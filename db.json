{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1572573049871},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1572573049872},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1572573049872},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1572573049872},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1572573049872},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1572573049877},{"_id":"source/_posts/2017-08-13-倚楼听风雨，淡看江湖路.md","hash":"dbb1dec0709122b225d5d3a4b264e6b3d0eb1135","modified":1572574594407},{"_id":"source/_posts/2017-08-16-一个简单的api授权流程.md","hash":"c882cd55a765113d8a15d73835267a169c98ac11","modified":1572574594407},{"_id":"source/_posts/2017-08-21-用PHP进行HTTP认证.md","hash":"03f0c7350da9adbd3a2255841902fc8f78f68078","modified":1572574594408},{"_id":"source/_posts/2017-09-06-九月，加油.md","hash":"84f3a6cda4cfd002fa51cffd9d860ab602a8b52b","modified":1572574594408},{"_id":"source/_posts/2017-09-07-一个百度地图的常用使用示例.md","hash":"7f49c7c00db4e3d627601af69e4df0512d75521f","modified":1572574594408},{"_id":"source/_posts/2017-09-09-自己实现AJAX异步上传文件.md","hash":"9616aae08da8b01616ad9b00b02afff6dc59f2b6","modified":1572574594408},{"_id":"source/_posts/2017-09-13-EFI模式下安装win10+Archlinux.md","hash":"bb336c7792cf45162a7aa516a9e0668b6ee753b2","modified":1572574594409},{"_id":"source/_posts/2017-09-17-win10子系统ubuntu更换源.md","hash":"c5bb2b979072307d844f4ca6634999f9f1fd8d3f","modified":1572574594409},{"_id":"source/_posts/2017-09-22-MSYS2初体验.md","hash":"eba8fa18d0f772b24c38c48cf69f391b613fbb01","modified":1572574594409},{"_id":"source/_posts/2017-09-29-搭建Git服务器、编写自动部署脚本.md","hash":"a92de1873baf1d38084d799711180ccbc1e2641f","modified":1572574594410},{"_id":"source/_posts/2017-10-26-Docker基础命令.md","hash":"cddb79cb5b8c306a56f9b33a854bade8c23cc0d0","modified":1572574594410},{"_id":"source/_posts/2017-11-16-使用docker玩转php开发环境.md","hash":"201bd38da0c5d966f577c0f494102466ce9e4b11","modified":1572574594410},{"_id":"source/_posts/2017-10-26-百度ueditor自定义上传地址.md","hash":"4e2557c9781493da4b8cfbbf3ae0799c5b871d73","modified":1572574594410},{"_id":"source/_posts/2018-01-01-2018-happy-new-year.md","hash":"1efd7f30c61b86ba4aaffbdf6c999a089e0b5136","modified":1572574594411},{"_id":"source/_posts/2018-01-20-cn-mirrors.md","hash":"ead8c26c38cbeb239575b7efa9e0b84ade74fc64","modified":1572574594411},{"_id":"source/_posts/2018-01-23-If-the-programming-language-is-a-weapon.md","hash":"488e6373a14635eda485c4b3f825a15545e197ca","modified":1572574594411},{"_id":"source/_posts/2018-03-31-git.md","hash":"8e6bfefdf676fe3bf2418e4576e37e58857579ab","modified":1572574594412},{"_id":"source/_posts/2018-01-24-change-rust-mirrors.md","hash":"64307213f7fccd17c467c5dfd8d9e9c12be3d8b7","modified":1572574594412},{"_id":"source/_posts/2018-05-01-git-webhook.md","hash":"6c138e59eec989b00c1e6ec3052530eefe217132","modified":1572574594412},{"_id":"source/_posts/2018-08-22-composer-mirrors.md","hash":"f76f12e817f644d547b0238f7db347be41bdda2b","modified":1572575656313},{"_id":"source/_posts/2018-09-16-bing-site-search.md","hash":"020dd2f58a0b177192b37f877394f24bec9f5e76","modified":1572574594413},{"_id":"source/_posts/2018-09-18-盗将行.md","hash":"55417216b8b2dc1f7be9e2f69f1da86ea17f7b47","modified":1572574594413},{"_id":"source/_posts/2018-09-16-docker-container-port.md","hash":"cef9021a20a440fb81be9d08ee9fe3cf4e57c9c6","modified":1572574594413},{"_id":"source/_posts/2018-10-16-yii2-activerecord-to-json.md","hash":"f995c0ceae2563e49477d82408856769755c8e6f","modified":1572574594414},{"_id":"source/_posts/2018-10-27-fix-gitment.md","hash":"ee6fc3f993057cc19a13237c849e4318711ff1ca","modified":1572574594414},{"_id":"source/_posts/2018-11-02-jupyter.md","hash":"01514c76a305742adb27a6f146ce312cced3f572","modified":1572574594414},{"_id":"source/_posts/2018-11-19-get-ssh-public-key-from-private-key.md","hash":"afaf6145d78f6d8efc5e9c721f6fc81d5f0a67fd","modified":1572574594415},{"_id":"source/_posts/2018-11-18-mysql-json.md","hash":"f3122b33482ab1d6b21c0e19b936ec6a597950a4","modified":1572574594414},{"_id":"source/_posts/2018-12-29-php-composer-version.md","hash":"f98b22431a398e9403a481b37d69b932ab8025b3","modified":1572574594415},{"_id":"source/_posts/2019-01-02-php-pcntl.md","hash":"03d6d7299f149bfe2034a125823b26cf2062b7e3","modified":1572574594415},{"_id":"source/_posts/2019-01-17-alpinelinux.md","hash":"5a18cc745dffe471b62d6bd3bba50088a3dae49f","modified":1572574594415},{"_id":"source/_posts/2019-03-29-php-queue.md","hash":"66eca7f481f80b5cf215335e2b0cfbc9c8ac445d","modified":1572574594416},{"_id":"source/_posts/2019-04-09-elasticsearch.md","hash":"545e681dec1d375e178d1659c8c9f1fe99b962c0","modified":1572574594416},{"_id":"source/_posts/2019-05-22-nginx-web-conf.md","hash":"f2f85826aa440a9869bdaa244ae0007eb44cae0a","modified":1572574594416},{"_id":"source/_posts/2019-05-23-upload-large-file.md","hash":"90f0e813d8dfaf85ade98957ffb0b5f978260d98","modified":1572574594417},{"_id":"source/_posts/2019-05-27-math-jax.md","hash":"4679849ba379ce51707a58714f33a268ba167fd8","modified":1572575257842},{"_id":"source/_posts/2019-05-29-linux-symbolic-link.md","hash":"b114522c91d963483215f7ed8658dbf4c5d0ad61","modified":1572574594417},{"_id":"source/_posts/2019-06-10-mysql-user.md","hash":"1cf62a08bedbb360bbe0cc0ee5251771340fb974","modified":1572574594418},{"_id":"source/_posts/2019-06-15-good-morning.md","hash":"598e3299cbf24be56b1eeb13166613987ef4da03","modified":1572574594418},{"_id":"source/_posts/2019-08-28-ssh-autologin.md","hash":"b0ae39ce3ce233db504cc7197d77cad2f0e36d40","modified":1572574594419},{"_id":"source/_posts/hello-world.md.bk","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1572574682175},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1572573049872},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1572573049872},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1572573049872},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1572573049872},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1572573049872},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1572573049873},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1572573049873},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1572573049873},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1572573049873},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1572573049873},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1572573049873},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1572573049873},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1572573049876},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1572573049876},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1572573049876},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1572573049876},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572573049876},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572573049876},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1572573049876},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1572573049877},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1572573049873},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1572573049873},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1572573049874},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1572573049875},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1572573049875},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1572573049875},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1572573049876},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1572573049876},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1572573049876},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1572573049877},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1572573049878},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1572573049882},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572573049882},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1572573049884},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1572573049885},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1572573049885},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1572573049886},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1572573049875},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1572573049875},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1572573049875},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1572573049875},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1572573049875},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1572573049875},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1572573049877},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1572573049877},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1572573049877},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1572573049877},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1572573049878},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1572573049878},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1572573049878},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1572573049878},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1572573049878},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1572573049878},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1572573049878},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1572573049878},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1572573049879},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1572573049879},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1572573049881},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572573049883},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1572573049884},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1572573049884},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572573049884},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1572573049884},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1572573049881},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1572573049880},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1572573049882},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1572861197429},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1572861197429},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1572861197429},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1572861197429},{"_id":"themes/vexo/_config.yml","hash":"bd397ab27a46d666567b9b144cca6ba19fedfa5e","modified":1572861197429},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1572861197433},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1572861197433},{"_id":"themes/vexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1572861197422},{"_id":"themes/vexo/.git/config","hash":"9cf891bec062e2138910d9c40051c4d656da1345","modified":1572861197424},{"_id":"themes/vexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1572861192428},{"_id":"themes/vexo/.git/packed-refs","hash":"694a9ed607dbea013588840e50c9da450f437ee2","modified":1572861197419},{"_id":"themes/vexo/.git/index","hash":"72c3bf8be6209d89f692e3b3c130248008887f61","modified":1572861197438},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1572861197431},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1572861197432},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1572861197432},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1572861197432},{"_id":"themes/vexo/layout/page.ejs","hash":"bc8958c120fb8569958164efb5e9dc278e2b4295","modified":1572861197432},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1572861197432},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1572861197432},{"_id":"themes/vexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1572861192428},{"_id":"themes/vexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1572861192429},{"_id":"themes/vexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1572861192430},{"_id":"themes/vexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1572861192430},{"_id":"themes/vexo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1572861192429},{"_id":"themes/vexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1572861192431},{"_id":"themes/vexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1572861192429},{"_id":"themes/vexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1572861192430},{"_id":"themes/vexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1572861192431},{"_id":"themes/vexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1572861192431},{"_id":"themes/vexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1572861192427},{"_id":"themes/vexo/.git/logs/HEAD","hash":"b4c6ac4363a285aaf0113f444f1bd979eb8d156d","modified":1572861197423},{"_id":"themes/vexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1572861192430},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1572861197430},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1572861197429},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1572861197430},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1572861197430},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"29db4b0211c6a9143c4d35bedd19498b02a3ceb1","modified":1572861197430},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"348c321961722a14b06032718a601e909d1232e3","modified":1572861557563},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1572861197430},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1572861197431},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1572861197431},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1572861197431},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1572861197431},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1572861197430},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1572861197431},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1572861197433},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1572861197436},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1572861197437},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1572861197438},{"_id":"themes/vexo/.git/refs/heads/master","hash":"1b47c88e3f2468aafd6c92b80805c9e9ffb55354","modified":1572861197423},{"_id":"themes/vexo/.git/objects/pack/pack-33e509390850c53752aa0607ff5d27f65e6a32cc.idx","hash":"daeeb9472ecf0f8f29966e3d0b02bd95d2264ae7","modified":1572861197412},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1572861197433},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1572861197433},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1572861197433},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1572861197433},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1572861197434},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"3ec22606f9548681389158384dc29ddf59c8ceea","modified":1572861197434},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1572861197434},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1572861197434},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1572861197434},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1572861197434},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1572861197435},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1572861197434},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1572861197435},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1572861197435},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1572861197435},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1572861197435},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1572861197436},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1572861197435},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1572861197437},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1572861197437},{"_id":"themes/vexo/.git/logs/refs/heads/master","hash":"b4c6ac4363a285aaf0113f444f1bd979eb8d156d","modified":1572861197423},{"_id":"themes/vexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1572861197422},{"_id":"themes/vexo/.git/logs/refs/remotes/origin/HEAD","hash":"b4c6ac4363a285aaf0113f444f1bd979eb8d156d","modified":1572861197421},{"_id":"themes/vexo/.git/objects/pack/pack-33e509390850c53752aa0607ff5d27f65e6a32cc.pack","hash":"ad0654e0628c06cbbeb90445e6cdde76c7302c90","modified":1572861197411},{"_id":"public/atom.xml","hash":"c71c9308fa267c9df28e448182b4199fb49f1979","modified":1572862386246},{"_id":"public/2019/06/15/2019-06-15-good-morning/index.html","hash":"ad26871bd18364fb4a92e9a1d167cf240205b864","modified":1572862063418},{"_id":"public/2019/08/28/2019-08-28-ssh-autologin/index.html","hash":"403abb69a99201cff998d0e3bd6a1febcb08922f","modified":1572862063418},{"_id":"public/2019/05/29/2019-05-29-linux-symbolic-link/index.html","hash":"ef04ec5c6f6159f10c9b13dd738e27488d178554","modified":1572862063418},{"_id":"public/2019/05/27/2019-05-27-math-jax/index.html","hash":"408db09e3a2af83ed8fbfec04516b29b66ffdd85","modified":1572862063418},{"_id":"public/2019/01/17/2019-01-17-alpinelinux/index.html","hash":"e6a24ba451a78a72dfb7303ac9315d70a49330d0","modified":1572862063418},{"_id":"public/2018/12/29/2018-12-29-php-composer-version/index.html","hash":"c2fa26d0562d2b6c6e22e68e6df84750bc493dcf","modified":1572862063418},{"_id":"public/2018/11/19/2018-11-19-get-ssh-public-key-from-private-key/index.html","hash":"2bfef785e7b1c8f6969dd8ada1dc6a6b875a80fe","modified":1572862063418},{"_id":"public/2018/11/02/2018-11-02-jupyter/index.html","hash":"e22141e90db278113a457bc0875318c648d859e7","modified":1572862063418},{"_id":"public/2018/10/16/2018-10-16-yii2-activerecord-to-json/index.html","hash":"1a1d50a6aa28940d1bbfab95f2fbb0fdd940b48c","modified":1572862063418},{"_id":"public/2018/09/18/2018-09-18-盗将行/index.html","hash":"c0722ddf248fa2cb08b5c0e8d95ffb5220864c53","modified":1572862063418},{"_id":"public/2018/09/16/2018-09-16-docker-container-port/index.html","hash":"f9601ffeb321e7613811dec5bac9069c63a9f0c1","modified":1572862063418},{"_id":"public/2018/09/15/2018-09-16-bing-site-search/index.html","hash":"59ae45b8b39e0045f78f497d4d1e2d75611462e4","modified":1572862063418},{"_id":"public/2018/08/02/2018-08-22-composer-mirrors/index.html","hash":"d9f4927938c02dcadea6dec5a5b50d47510d8977","modified":1572862063418},{"_id":"public/2018/01/24/2018-01-24-change-rust-mirrors/index.html","hash":"f3cbcac1d876cedee2670fa970f46891b5fefbdb","modified":1572862063418},{"_id":"public/2018/01/23/2018-01-23-If-the-programming-language-is-a-weapon/index.html","hash":"a12346f5592f3311988550114ed69583ef04dc82","modified":1572862063418},{"_id":"public/2018/01/20/2018-01-20-cn-mirrors/index.html","hash":"3232349fa833e7b759e86d548d767304ac2ba9d4","modified":1572862063418},{"_id":"public/2018/01/01/2018-01-01-2018-happy-new-year/index.html","hash":"c0a3da989caaf1948698e5c81f20a362af63f133","modified":1572862063418},{"_id":"public/2017/11/16/2017-11-16-使用docker玩转php开发环境/index.html","hash":"7f38ace3f724990835f25898cbd054aaa124cebb","modified":1572862063418},{"_id":"public/2017/09/22/2017-09-22-MSYS2初体验/index.html","hash":"ea3c75fc40d6d33bcecbf63a61348b3474cefbb8","modified":1572862063418},{"_id":"public/2017/09/17/2017-09-17-win10子系统ubuntu更换源/index.html","hash":"5ad0a876fd78698e2d40175114a57662fca7e75a","modified":1572862063418},{"_id":"public/2017/09/06/2017-09-06-九月，加油/index.html","hash":"706af6d3b9511e71d3c19a3e9f43facf90155119","modified":1572862063418},{"_id":"public/2017/08/21/2017-08-21-用PHP进行HTTP认证/index.html","hash":"6fcde40c0ac0bc2e3651e43d962746aee4fab619","modified":1572862063418},{"_id":"public/2017/08/13/2017-08-13-倚楼听风雨，淡看江湖路/index.html","hash":"a30f15a8546687f6786fbdba44ce649745947921","modified":1572862063418},{"_id":"public/archives/index.html","hash":"b65a61a8b6e6be5ebd5a56a563b25563c4ec53e4","modified":1572946421702},{"_id":"public/archives/page/2/index.html","hash":"eab41411cf3a03ee90056c7f1bdc8126579e82c3","modified":1572946421702},{"_id":"public/archives/page/3/index.html","hash":"d147b39bf42fc54eb242d51cda0bb0fda0b637e8","modified":1572946421702},{"_id":"public/archives/2017/index.html","hash":"84d82000d1899bb15ae3cc4658763430a0329f50","modified":1572946421702},{"_id":"public/archives/page/4/index.html","hash":"1d936666d1438a5ce24140b338ead5ee07a18878","modified":1572946421702},{"_id":"public/archives/2017/page/2/index.html","hash":"3aa64689f741967b267fa1e93ebc98b265839e52","modified":1572946421702},{"_id":"public/archives/2017/08/index.html","hash":"aa51952c72ec84fa9a07e1c3474f4aacf0090d29","modified":1572946421702},{"_id":"public/archives/2017/09/index.html","hash":"a9717328e74409ef4943739cffca6a12b8708dad","modified":1572946421702},{"_id":"public/archives/2017/10/index.html","hash":"2eaec98c6811f1161bcc3b0ae9d5a8d9949ef64c","modified":1572946421702},{"_id":"public/archives/2017/11/index.html","hash":"abbbdfe5005e2dfac8289aa6965322bf24a294e8","modified":1572946421702},{"_id":"public/archives/2018/index.html","hash":"1a1311fe7043b852c8073c246f1156bcb50af553","modified":1572946421702},{"_id":"public/archives/2018/page/2/index.html","hash":"d8208f00e4c3663cc2656ee77e1a537daa8e7a7d","modified":1572946421702},{"_id":"public/archives/2018/01/index.html","hash":"26e547a4bf06465f73138ac2b0d2d2b5f5aff688","modified":1572946421702},{"_id":"public/archives/2018/03/index.html","hash":"6961c8434ce88aaf8162cc4290712fa00cfbea14","modified":1572946421702},{"_id":"public/archives/2018/05/index.html","hash":"9d0a67a227408e9324f97aaec21a1c9bab810df6","modified":1572946421702},{"_id":"public/archives/2018/08/index.html","hash":"8dae8ab15090c45f5e3f0451fda054778b1fe190","modified":1572946421702},{"_id":"public/archives/2018/09/index.html","hash":"f64a961dfd81789373979a1a0a66138b1679dbd9","modified":1572946421702},{"_id":"public/archives/2018/10/index.html","hash":"202845d416864d69485f234bf2f0c990740ece06","modified":1572946421702},{"_id":"public/archives/2018/11/index.html","hash":"c4c95c365d2164991d317570f92aa5e02fb2ef13","modified":1572946421702},{"_id":"public/archives/2018/12/index.html","hash":"f424180de13588333a6a34775ce89eb4dcfc5f55","modified":1572946421702},{"_id":"public/archives/2019/index.html","hash":"d4a266c2e34ac96ddd972108deaee4b897a56b74","modified":1572946421702},{"_id":"public/archives/2019/page/2/index.html","hash":"25ee863a8abd49874d5c660ea617f645791d9450","modified":1572946421702},{"_id":"public/archives/2019/01/index.html","hash":"0dd1a5f051d23b82e5a574493711870d8ca34e62","modified":1572946421702},{"_id":"public/archives/2019/03/index.html","hash":"8802fa20d1fbd68389ab81029bccc7d329cf2cf3","modified":1572946421702},{"_id":"public/archives/2019/04/index.html","hash":"b63249372c2487a36f0d693521ef09c3414c55d0","modified":1572946421702},{"_id":"public/archives/2019/05/index.html","hash":"fa6ca4f32b2264d4baae90fcf476d970a9430b28","modified":1572946421702},{"_id":"public/archives/2019/06/index.html","hash":"72c7b06bcda4f025d979347844b5589dd18d4d6d","modified":1572946421702},{"_id":"public/archives/2019/08/index.html","hash":"8f028890e0f8604a720ff2c669df9a2e8e56e0ac","modified":1572946421702},{"_id":"public/categories/听风雨/index.html","hash":"fea2ab8b14c310cee432ce346bb930350bb34eee","modified":1572946421702},{"_id":"public/categories/PHP/index.html","hash":"7709f2a3b6697beb884b87724f35e9185d1ff3b5","modified":1572946421702},{"_id":"public/categories/岁月静好/index.html","hash":"630ab92925e2f65c34144feed77ebe3bff96a3af","modified":1572946421702},{"_id":"public/categories/JavaScript/index.html","hash":"08d5e880142b420671203b9df6e894aef8e95c27","modified":1572946421702},{"_id":"public/categories/Linux/index.html","hash":"7633172f3954aee771836e1b41a3a434e0f2f3e5","modified":1572946421702},{"_id":"public/categories/Docker/index.html","hash":"91fd6fce239f2f638377e1f7e64cf52c09a406bb","modified":1572946421702},{"_id":"public/categories/资源/index.html","hash":"0715e721a1d86114098d7544faec6a6c29dc0026","modified":1572946421702},{"_id":"public/categories/JavaScript/HTML5/index.html","hash":"98ec0c55167eb4ac51a6f42a305a32e6f7808b5e","modified":1572946421702},{"_id":"public/categories/互联网/index.html","hash":"54b2d8fd6c9c6df1360c6c710b66bac985409834","modified":1572946421702},{"_id":"public/categories/Git/index.html","hash":"3181071306c07c7031725f1813cfe43f64be88cf","modified":1572946421702},{"_id":"public/categories/Rust/index.html","hash":"450571818afa2c3aabaf6294d976ca6e7d72b02c","modified":1572946421702},{"_id":"public/categories/搜索引擎/index.html","hash":"5d4b5788eb3b4ca5afb17c8bd16493437bd1adb0","modified":1572946421702},{"_id":"public/categories/Linux/Git/index.html","hash":"6b710f13ff45de013e5dcd221dfde095310d13c4","modified":1572946421702},{"_id":"public/categories/python/index.html","hash":"b465c48e322a630f8eeabb2cbe19ea5d602443ca","modified":1572946421702},{"_id":"public/categories/github-issue/index.html","hash":"364f996e6d21b6b1324bc797ec2c4c8fd9e875dc","modified":1572946421702},{"_id":"public/categories/SSH/index.html","hash":"b076f33afc2867e670ddaff870fba71b877241fc","modified":1572946421702},{"_id":"public/categories/Docker/PHP/index.html","hash":"aac1f0bccffcffb4825702c96b5620df094052e9","modified":1572946421702},{"_id":"public/categories/MySQL/index.html","hash":"745982b982507684e0d55c9b33eb519b0ead190e","modified":1572946421702},{"_id":"public/categories/Queue/index.html","hash":"915af65682463081e2d04b03775a8a2ac7801cfd","modified":1572946421702},{"_id":"public/categories/全文搜索/index.html","hash":"44f88334991800e00bec9f4012b39871adf564fc","modified":1572946421702},{"_id":"public/categories/nginx/index.html","hash":"c5abd6200f7b4abdd1ec644631a4756d1b12f60d","modified":1572946421702},{"_id":"public/categories/JavaScript/PHP/index.html","hash":"9ba3f8f4ac1aa65e81d04bcffbc5335661c844f2","modified":1572946421702},{"_id":"public/categories/数学/index.html","hash":"e7e749f365821371d48ad95697631deaacb08646","modified":1572946421702},{"_id":"public/categories/Git/PHP/index.html","hash":"b173002e129cad412d4f7cf9f53025949f40daf0","modified":1572946421702},{"_id":"public/categories/Queue/PHP/index.html","hash":"06fb14370f20c723e908497b4f902daf450c5825","modified":1572946421702},{"_id":"public/categories/数学/JavaScript/index.html","hash":"fa2436cd98c811d81d4c3893701c55a44991e2f2","modified":1572946421702},{"_id":"public/index.html","hash":"60c9f6797815ecdf9424f9bfa422dce268a10600","modified":1572946421702},{"_id":"public/page/2/index.html","hash":"88a4ff16306e489672d00aed4f9adea14848eba2","modified":1572946421702},{"_id":"public/page/3/index.html","hash":"cf45b8104a18bcee5b81e1e6900fe3aa77a2fa52","modified":1572946421702},{"_id":"public/page/4/index.html","hash":"b552d8d5faa5fdd7a7741f0a5093964e4fb0f92c","modified":1572946421702},{"_id":"public/tags/听风雨/index.html","hash":"a4b5d9d5eceac0ac89ffaada608d23269b0e678e","modified":1572946421702},{"_id":"public/tags/API/index.html","hash":"8e167309a80b7ed966f6a152a24bb87a1390d3f4","modified":1572946421702},{"_id":"public/tags/PHP/index.html","hash":"7f26d6414ba9b5041370c629a038c07d76e83caf","modified":1572946421702},{"_id":"public/tags/PHP/page/2/index.html","hash":"5572900bf3dc4d2ab50ebf90a7cbe139f39f948d","modified":1572946421702},{"_id":"public/tags/HTTP/index.html","hash":"ea824045ed12a315dbc629c9c9661efb98913231","modified":1572946421702},{"_id":"public/tags/岁月静好/index.html","hash":"bf883b4eebab86ee8c6e7cf1d654215569c04c41","modified":1572946421702},{"_id":"public/tags/JavaScript/index.html","hash":"4d4ba748dee72746cc0619b7efd3b8e12cae1cfc","modified":1572946421702},{"_id":"public/tags/百度地图/index.html","hash":"f93c6f61a7f8bf3b7f7b072f12d3026a6c9a1f80","modified":1572946421702},{"_id":"public/tags/HTML5/index.html","hash":"917ba646bc2710b9775320504d2840d31bf4f117","modified":1572946421702},{"_id":"public/tags/AJAX/index.html","hash":"6f486d1a97e93a2d413c310a7c372527a7b88739","modified":1572946421702},{"_id":"public/tags/Linux/index.html","hash":"c96d93bdf781a969777b4d4d0c2334aec14ea03f","modified":1572946421702},{"_id":"public/tags/EFI/index.html","hash":"5bc50a6ceaca9e45f68110e4129b688beb67678c","modified":1572946421702},{"_id":"public/tags/Archlinux/index.html","hash":"2f02044147a9ea1212a6b2fa52f1099ba4657829","modified":1572946421702},{"_id":"public/tags/Win10/index.html","hash":"f30c8d4a39604d1f1bfe13a68fe58c1519967e63","modified":1572946421702},{"_id":"public/tags/Ubuntu/index.html","hash":"803e2a919e9dd089d534cd466d352bd8e6dc651a","modified":1572946421702},{"_id":"public/tags/MSYS2/index.html","hash":"92bc26282604e5fbef35739a9a52e38a60edf8ce","modified":1572946421702},{"_id":"public/tags/Git/index.html","hash":"cfe9a778c65c4fed6ca511c608da17e7ba67db82","modified":1572946421702},{"_id":"public/tags/虚拟化/index.html","hash":"df6aace5bc80bc7c0572ae0af353198c4c0126b6","modified":1572946421702},{"_id":"public/tags/容器/index.html","hash":"318ffaee390c6f8a3eccba3597640f4e0cf29696","modified":1572946421702},{"_id":"public/tags/Docker/index.html","hash":"af34ec9b96f9fb76a0e53daeed03a65a0f50f84b","modified":1572946421702},{"_id":"public/tags/UEditor/index.html","hash":"053ef3b5716c3327276d9dc64e1cfcbf8052fca6","modified":1572946421702},{"_id":"public/tags/互联网/index.html","hash":"1a3c93e47bfc845b1449fe817c3245f7636bbd83","modified":1572946421702},{"_id":"public/tags/Rust/index.html","hash":"41c9afacdd74e467c3ac03bb99ade733a3c7bbda","modified":1572946421702},{"_id":"public/tags/Webhook/index.html","hash":"83a6c1b38e9b0a2b2f26ce8fa8dce30d8c331d28","modified":1572946421702},{"_id":"public/tags/Composer/index.html","hash":"ff3db849123cf4e55dc82cdbd79642b8d9dc8aed","modified":1572946421702},{"_id":"public/tags/搜索引擎/index.html","hash":"4af191f291adf395b26b242d9df5188211d3818b","modified":1572946421702},{"_id":"public/tags/站内搜索/index.html","hash":"a6c9fbe0e85ee9b0436148adf04e4fd93a79b93a","modified":1572946421702},{"_id":"public/tags/Yii2/index.html","hash":"1c926e23d7d910ccbec5b3aca6ad627b15f8b928","modified":1572946421702},{"_id":"public/tags/jupyter/index.html","hash":"af69d850fd5bceff3860e80e8acd5f22c848c0da","modified":1572946421702},{"_id":"public/tags/python/index.html","hash":"9d44e7191019f234cfaec33599fad8ae8e4053c0","modified":1572946421702},{"_id":"public/tags/github-issue/index.html","hash":"29608efe20b7862b6d256a42d5027d5e061f04c7","modified":1572946421702},{"_id":"public/tags/gitment/index.html","hash":"0ebb9a47ef5914ec548b35c5bea9ec84211310c9","modified":1572946421702},{"_id":"public/tags/SSH/index.html","hash":"0a579abcea706554f15d1ee1bece284caf50658d","modified":1572946421702},{"_id":"public/tags/MySQL/index.html","hash":"bba6473e70186f68dad3860af7226224b2359e37","modified":1572946421702},{"_id":"public/tags/JSON/index.html","hash":"1f501006e92c4ed4d2461851956d413b4a14159e","modified":1572946421702},{"_id":"public/tags/pcntl/index.html","hash":"eeb11775c324d260de6aa2bc1508a64853aafa6d","modified":1572946421702},{"_id":"public/tags/AlpineLinux/index.html","hash":"a19d3c8930a19cdaaf733fe749d1e96a165d3e68","modified":1572946421702},{"_id":"public/tags/Queue/index.html","hash":"a1b3bf46ffc36fd6d8c5c11edbe86d8715d8536d","modified":1572946421702},{"_id":"public/tags/Redis/index.html","hash":"c7f24151b2d93760fc8ce63ddeb48889fc4fae1a","modified":1572946421702},{"_id":"public/tags/全文搜索/index.html","hash":"52ab2839882bc04baa1b53dc070181c9b070ba47","modified":1572946421702},{"_id":"public/tags/ElasticSearch/index.html","hash":"fc54fd7f0803edbfe00020e30d2e42b2c4d4a937","modified":1572946421702},{"_id":"public/tags/nginx/index.html","hash":"aecf069dfd41366ee654d635db9a2a558ce968f9","modified":1572946421702},{"_id":"public/tags/数学/index.html","hash":"445580f4f459dcce43cb70ae07ec2d71bda3fef9","modified":1572946421702},{"_id":"public/tags/MathJax/index.html","hash":"a96f6331dcf0fa3e51b0212a1b6ffa2b9422bd5f","modified":1572946421702},{"_id":"public/tags/LaTex/index.html","hash":"afd38d12248b8007fcbb3fd9b6f1eac8a0079d83","modified":1572946421702},{"_id":"public/2019/06/10/2019-06-10-mysql-user/index.html","hash":"7f0ee19ff1fbed6f4cf207ed92d90ef8e6ebe5bb","modified":1572862063418},{"_id":"public/2019/05/23/2019-05-23-upload-large-file/index.html","hash":"a58ab4c462f735608b28fd8beb1568b9021dd13a","modified":1572862063418},{"_id":"public/2019/05/22/2019-05-22-nginx-web-conf/index.html","hash":"23278a0c4d19cced7ce968a5106acd9d4a175d92","modified":1572862063418},{"_id":"public/2019/04/09/2019-04-09-elasticsearch/index.html","hash":"ee0f533b6645b70dc53ed7a81bcc3947bdf5c82b","modified":1572862063418},{"_id":"public/2019/03/29/2019-03-29-php-queue/index.html","hash":"9e0442ccdbb0612f87d01c58b5e5dcbcc194720e","modified":1572862063418},{"_id":"public/2019/01/02/2019-01-02-php-pcntl/index.html","hash":"2f171f5b681f02c1133f6e9ee4bcf95159b9d1ef","modified":1572862063418},{"_id":"public/2018/11/18/2018-11-18-mysql-json/index.html","hash":"8bf753d8c1a4c2d90534e053ad3bc531124eaa0e","modified":1572862063418},{"_id":"public/2018/10/27/2018-10-27-fix-gitment/index.html","hash":"16fe163aca7062115b891ae8efa122990c29ce24","modified":1572862063418},{"_id":"public/2018/05/01/2018-05-01-git-webhook/index.html","hash":"f25b737d7f9d804638d9163cdc06ece9a320c7e4","modified":1572862063418},{"_id":"public/2018/03/31/2018-03-31-git/index.html","hash":"62289a574e7f607ae62ad9e2a609dd114ce3deb1","modified":1572862063418},{"_id":"public/2017/10/26/2017-10-26-百度ueditor自定义上传地址/index.html","hash":"85713ba4ccc2bf3d7e38e9839c82f547d512b834","modified":1572862063418},{"_id":"public/2017/10/26/2017-10-26-Docker基础命令/index.html","hash":"8db136bbbfe4299c79d806c3d6338b8caccc37e6","modified":1572862063418},{"_id":"public/2017/09/29/2017-09-29-搭建Git服务器、编写自动部署脚本/index.html","hash":"b891523d5847ec0cbac52743bef8d562a9e3917a","modified":1572862063418},{"_id":"public/2017/09/13/2017-09-13-EFI模式下安装win10+Archlinux/index.html","hash":"c6543c9ea621751e87227c9a55c4b302559932f6","modified":1572862063418},{"_id":"public/2017/09/07/2017-09-07-一个百度地图的常用使用示例/index.html","hash":"27bd54dc4bd45424e7d8a6de676b0fc5284baafe","modified":1572862063418},{"_id":"public/2017/09/09/2017-09-09-自己实现AJAX异步上传文件/index.html","hash":"ed774384acbdf41165d3837d72225ed592cffbb0","modified":1572862063418},{"_id":"public/2017/08/16/2017-08-16-一个简单的api授权流程/index.html","hash":"3c895a0441eb69b41df8d699e27ed478665ad6ec","modified":1572862063418},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572862386246},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572862386246},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572862386246},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572862386246},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572862386246},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572862386246},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1572862386246},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1572862386246},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1572862386246},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1572862386246},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1572862386246},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1572862386246},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1572862386246},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1572862386246},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572862386246},{"_id":"public/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1572862386246},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1572862386246},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572862386246},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1572862386246},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1572862386246},{"_id":"public/css/style.css","hash":"6f904182ac1242145ecb78bc367487377906661b","modified":1572946421702},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1572862386246},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1572862386246},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1572862386246},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1572862386246},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1572862386246},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1572862386246},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572862386246},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1572862386246},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1572862386246},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1572862386246},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1572862386246},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1572862386246},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1572862386246},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1572861365317},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1572861365318},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1572861365318},{"_id":"public/about/index.html","hash":"70df5643dddeb4fb784ac693e726ac071d62b0d0","modified":1572946421702},{"_id":"public/project/index.html","hash":"7a4d28bbdf2642cf01485b8367d17c11d134da39","modified":1572946421702},{"_id":"public/tags/index.html","hash":"c7e01523d201937461b6fe96f0107909fc3cbd3b","modified":1572946421702},{"_id":"public/2019-08-28-ssh-autologin/index.html","hash":"a71f610ed21c8a32a67883289ed3022060473780","modified":1572946421702},{"_id":"public/2019-06-15-good-morning/index.html","hash":"318484971e9f1c3e18da986ae504e652f9cd14d1","modified":1572946421702},{"_id":"public/2019-05-29-linux-symbolic-link/index.html","hash":"398b66cbc977011c45708a5722927747c5849aef","modified":1572946421702},{"_id":"public/2019-05-27-math-jax/index.html","hash":"2c464a7295e5ee42e5f0af6f636cbf575f2201fb","modified":1572946421702},{"_id":"public/2019-01-17-alpinelinux/index.html","hash":"7eee35e7b6f0af4e0e3d9d6092e46fc463f7d4d2","modified":1572946421702},{"_id":"public/2018-12-29-php-composer-version/index.html","hash":"95d601f32e1aab50a43c9d2d678b37ac74a005ec","modified":1572946421702},{"_id":"public/2018-11-19-get-ssh-public-key-from-private-key/index.html","hash":"ab121e47b1a6f8a2237cfe65dae6c8b0de09a0b6","modified":1572946421702},{"_id":"public/2018-11-02-jupyter/index.html","hash":"6c1236006c57d0235906e059f4986ca18bfca7ce","modified":1572946421702},{"_id":"public/2018-10-16-yii2-activerecord-to-json/index.html","hash":"f22855254dc1059a7242f8f9ef325c70ca725da0","modified":1572946421702},{"_id":"public/2018-09-18-盗将行/index.html","hash":"c4865dbbda35b6b5b671ffe34a5960feaf55af3b","modified":1572946421702},{"_id":"public/2018-09-16-docker-container-port/index.html","hash":"dded9f934013fe8fadf1b87faca7889667855001","modified":1572946421702},{"_id":"public/2018-09-16-bing-site-search/index.html","hash":"daeb94908a5633e11b80a75cbfacc8eb11b6226e","modified":1572946421702},{"_id":"public/2018-08-22-composer-mirrors/index.html","hash":"91fc19f02897ab79c526a19dab2c76fbc34714e7","modified":1572946421702},{"_id":"public/2018-01-24-change-rust-mirrors/index.html","hash":"038d7290692f291575ab06207f34220acab73057","modified":1572946421702},{"_id":"public/2018-01-23-If-the-programming-language-is-a-weapon/index.html","hash":"31bb5bd9d3edb1cc4a36bb16c2f562761d005f08","modified":1572946421702},{"_id":"public/2018-01-20-cn-mirrors/index.html","hash":"11a29b498bf233674d5e678ca77c13a51718dfa3","modified":1572946421702},{"_id":"public/2018-01-01-2018-happy-new-year/index.html","hash":"b3f5b6a1e452545c1fcf8580f70f08ff107401f6","modified":1572946421702},{"_id":"public/2017-11-16-使用docker玩转php开发环境/index.html","hash":"881764c459eec6818c80415a2202c039f97bcd61","modified":1572946421702},{"_id":"public/2017-09-22-MSYS2初体验/index.html","hash":"dd42b13a6bd975e4ddfb9d4b889de941996c1d6b","modified":1572946421702},{"_id":"public/2017-09-17-win10子系统ubuntu更换源/index.html","hash":"1ad96d1bf98f5c31a2d5aff44101a23a980e51db","modified":1572946421702},{"_id":"public/2017-09-06-九月，加油/index.html","hash":"159f463efd285a9fc54afb0160afab8703914c0c","modified":1572946421702},{"_id":"public/2017-08-21-用PHP进行HTTP认证/index.html","hash":"406f97951b2aabeb5343b878d6e043dbce6dea75","modified":1572946421702},{"_id":"public/2017-08-13-倚楼听风雨，淡看江湖路/index.html","hash":"79e10712d359a219c6f1b561f890beab0dd20177","modified":1572946421702},{"_id":"public/2019-06-10-mysql-user/index.html","hash":"4e7b2ec538d052b326a90305e824315782183cf8","modified":1572946421702},{"_id":"public/2019-05-23-upload-large-file/index.html","hash":"0185c0885b2b9e7d82868b97785c3b4a49b5edec","modified":1572946421702},{"_id":"public/2019-05-22-nginx-web-conf/index.html","hash":"a624584cf0643a25bc153343f291d0a755a7c46b","modified":1572946421702},{"_id":"public/2019-04-09-elasticsearch/index.html","hash":"23d3819fff3fcebda2f1808d3fb7b9c227d34730","modified":1572946421702},{"_id":"public/2019-03-29-php-queue/index.html","hash":"ba9dd2f5fccf1e1334822cfcb4685d98ecc4d85d","modified":1572946421702},{"_id":"public/2019-01-02-php-pcntl/index.html","hash":"d0b978fa4e185a1202cf315a3c1a922fef1af717","modified":1572946421702},{"_id":"public/2018-11-18-mysql-json/index.html","hash":"b7d6feb5dce3c264b552e3ed6e0b47db59f39de3","modified":1572946421702},{"_id":"public/2018-10-27-fix-gitment/index.html","hash":"77a862f64127aeac2487d66cf072aa0c8fadd37b","modified":1572946421702},{"_id":"public/2018-05-01-git-webhook/index.html","hash":"61669b7ae001f9741aebaf823c89d13cafbfa094","modified":1572946421702},{"_id":"public/2018-03-31-git/index.html","hash":"fb27f84b7023a80b892237aeff144817f1b2940b","modified":1572946421702},{"_id":"public/2017-10-26-百度ueditor自定义上传地址/index.html","hash":"a95b5c030326c684f7701b58ef95bbf851364c1c","modified":1572946421702},{"_id":"public/2017-10-26-Docker基础命令/index.html","hash":"8bd1f920ca0781dc56419fbd54a8c419c26ebe3c","modified":1572946421702},{"_id":"public/2017-09-29-搭建Git服务器、编写自动部署脚本/index.html","hash":"4183683166ad9bd5c9b73e1ddb44158bb452220a","modified":1572946421702},{"_id":"public/2017-09-13-EFI模式下安装win10+Archlinux/index.html","hash":"34fc1b615ec8bab708e303e95c38e9d6551a1a89","modified":1572946421702},{"_id":"public/2017-09-09-自己实现AJAX异步上传文件/index.html","hash":"48b06237657d999554ddd17789dbd79729d0bf84","modified":1572946421702},{"_id":"public/2017-09-07-一个百度地图的常用使用示例/index.html","hash":"3e86d66aa5630743fc8090e5472b82fa1631df87","modified":1572946421702},{"_id":"public/2017-08-16-一个简单的api授权流程/index.html","hash":"f9da931d8af5e3b9795755157d5758f2d5c1eacb","modified":1572946421702},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1572946343452},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1572946343452},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1572946343452},{"_id":"themes/icarus/_config.yml","hash":"ecda9b3bf35ebfa473f95fd91a10396fe0b9006e","modified":1572946405306},{"_id":"themes/icarus/package.json","hash":"e9bcb9fcf69462d5b03c7870eb13ab28aa7933c7","modified":1572946343468},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1572946343452},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1572946343445},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1572946343447},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1572946202056},{"_id":"themes/icarus/.git/index","hash":"1af1b611d684bdf093c60002277a41f3b1bdb71b","modified":1572946343471},{"_id":"themes/icarus/.git/packed-refs","hash":"78d72a2d93adb757b6f6f825989a1e569d5afcac","modified":1572946343444},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1572946343456},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1572946343456},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1572946343456},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1572946343457},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1572946343457},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1572946343457},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1572946343457},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1572946343457},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1572946343457},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1572946343457},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1572946343457},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1572946343457},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1572946343457},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1572946343458},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1572946343458},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1572946343458},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1572946343462},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1572946343462},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1572946343462},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1572946343464},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1572946343466},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1572946343466},{"_id":"themes/icarus/scripts/index.js","hash":"f97eb95812480cc3b07cc0ad44dc39f9a0032f24","modified":1572946343468},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1572946202057},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1572946202057},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1572946202058},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1572946202059},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1572946202059},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1572946202059},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1572946202057},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1572946202058},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1572946202057},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1572946202058},{"_id":"themes/icarus/.git/logs/HEAD","hash":"ee5b5f758974658f933909df4cea28f6e5b2363b","modified":1572946343446},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1572946343452},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1572946343453},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1572946343453},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1572946202059},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1572946202056},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1572946343453},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1572946343453},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1572946343453},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1572946343453},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1572946343453},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1572946343453},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1572946343454},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1572946343454},{"_id":"themes/icarus/includes/helpers/override.js","hash":"98f2c72c79de74bd01e3be10ef2f174c885d395a","modified":1572946343454},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1572946343454},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1572946343454},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1572946343454},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1572946343454},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1572946343454},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1572946343455},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1572946343455},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1572946343455},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"28863042ad8fcf9ecb86d5288ecd3ce5250a984d","modified":1572946343455},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1572946343455},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1572946343455},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1572946343455},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1572946343455},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1572946343455},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1572946343456},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1572946343456},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1572946343456},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1572946343456},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1572946343456},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1572946343458},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1572946343458},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1572946343458},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1572946343458},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1572946343458},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1572946343458},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1572946343459},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1572946343459},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1572946343459},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1572946343459},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1572946343459},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343459},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1572946343459},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343459},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1572946343459},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343459},{"_id":"themes/icarus/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1572946343460},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1572946343460},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"4adfc361b780193bfc8ad73afb7079e550f37eb7","modified":1572946343460},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1572946343460},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1572946343460},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"765d8ab516781d7157bb41d690a71b549e95e721","modified":1572946343460},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1572946343460},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1572946343461},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"52f54b4ba88253ad0ec13d3b40fa4232e691af57","modified":1572946343461},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1572946343461},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1572946343461},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343461},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1572946343461},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343461},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1572946343461},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343461},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1572946343461},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/animejs.local.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1572946343462},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1572946343463},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1572946343464},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1572946343464},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1572946343464},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1572946343464},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1572946343464},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1572946343464},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343464},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1572946343464},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343464},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1572946343465},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343465},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1572946343465},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343465},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1572946343465},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343465},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1572946343465},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343465},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1572946343465},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1572946343465},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1572946343466},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343466},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1572946343466},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343466},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1572946343466},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343466},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"c18dab874af84147349a596d9e713f8e0ee5e17e","modified":1572946343466},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1572946343466},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"dba466b5bebafd6ce74523c761cba1f62ab62082","modified":1572946343467},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1572946343467},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1572946343467},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1572946343467},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"aa7610043ff2ab865bd7b184d5f9cb1b9c6e0ef3","modified":1572946343467},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1572946343467},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1572946343467},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1572946343467},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1572946343467},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1572946343467},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1572946343468},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1572946343468},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1572946343468},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1572946343468},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1572946343468},{"_id":"themes/icarus/source/css/style.styl","hash":"8f49c29a8246e9ce1a7bf62e39473e46e8637fc1","modified":1572946343468},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1572946343469},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1572946343469},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1572946343469},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1572946343470},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1572946343470},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1572946343470},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1572946343470},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1572946343470},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1572946343470},{"_id":"themes/icarus/source/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1572946343470},{"_id":"themes/icarus/.git/refs/heads/master","hash":"90d530bc01bbf5b85f1a4560b7c1c7895ffbaef0","modified":1572946343446},{"_id":"themes/icarus/.git/objects/pack/pack-b3e8589ef5c7ff4d1c80180f85d77cfbaf28634c.idx","hash":"609a8fe1cd5eec87bc64a2eea4aec03b203f135b","modified":1572946343424},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"ee5b5f758974658f933909df4cea28f6e5b2363b","modified":1572946343446},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1572946343445},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"ee5b5f758974658f933909df4cea28f6e5b2363b","modified":1572946343445},{"_id":"themes/icarus/.git/objects/pack/pack-b3e8589ef5c7ff4d1c80180f85d77cfbaf28634c.pack","hash":"5905d4c3157747b8991623c3d874ed71353f8b7e","modified":1572946343423},{"_id":"public/content.json","hash":"89ef5e014dc4e674e3faf5e8f59703a7fda79a60","modified":1572946421702},{"_id":"public/categories/index.html","hash":"0f7d78a0be98b31e20c6c1ceef1b0f48199ee1be","modified":1572946421702},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1572946421702},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1572946421702},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1572946421702},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1572946421702},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1572946421702},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1572946421702},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1572946421702},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1572946421702},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1572946421702},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1572946421702},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1572946421702},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1572946421702},{"_id":"public/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1572946421702},{"_id":"public/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1572946421702}],"Category":[{"name":"听风雨","_id":"ck2k8bsbr0002sm4whz0keq3d"},{"name":"PHP","_id":"ck2k8bsbw0007sm4warrg0btn"},{"name":"岁月静好","_id":"ck2k8bsc2000hsm4w86d561o2"},{"name":"JavaScript","_id":"ck2k8bsc5000psm4w8mj45seg"},{"name":"Linux","_id":"ck2k8bsc90010sm4wa5bsdm6f"},{"name":"Docker","_id":"ck2k8bsck001rsm4w17teggko"},{"name":"资源","_id":"ck2k8bsco0023sm4w6cnrhs7w"},{"name":"HTML5","parent":"ck2k8bsc5000psm4w8mj45seg","_id":"ck2k8bscq002asm4wduz4esls"},{"name":"互联网","_id":"ck2k8bscs002fsm4w0rw12iqb"},{"name":"Git","_id":"ck2k8bscv002osm4w8f2yaonn"},{"name":"Rust","_id":"ck2k8bscy002wsm4wb9p6dpwa"},{"name":"搜索引擎","_id":"ck2k8bsd3003asm4wc8zk0hia"},{"name":"Git","parent":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsd5003msm4w0te9czv7"},{"name":"python","_id":"ck2k8bsd6003ssm4w11g0hswm"},{"name":"github-issue","_id":"ck2k8bsd7003xsm4w9qgdhku2"},{"name":"SSH","_id":"ck2k8bsd80042sm4w6346bg7u"},{"name":"PHP","parent":"ck2k8bsck001rsm4w17teggko","_id":"ck2k8bsda0045sm4w7jw6dk8m"},{"name":"MySQL","_id":"ck2k8bsda0049sm4w0kfleoy1"},{"name":"Queue","_id":"ck2k8bsdb004esm4w1p4o4x3p"},{"name":"全文搜索","_id":"ck2k8bsdd004ism4w9jnf9z98"},{"name":"nginx","_id":"ck2k8bsdd004msm4w3f587j35"},{"name":"PHP","parent":"ck2k8bsc5000psm4w8mj45seg","_id":"ck2k8bsdf004ssm4wf9yagkpp"},{"name":"数学","_id":"ck2k8bsdg004xsm4w6czm9x1l"},{"name":"PHP","parent":"ck2k8bscv002osm4w8f2yaonn","_id":"ck2k8bsdi0054sm4wdgru3o48"},{"name":"PHP","parent":"ck2k8bsdb004esm4w1p4o4x3p","_id":"ck2k8bsdi005asm4wfkzi6iwg"},{"name":"JavaScript","parent":"ck2k8bsdg004xsm4w6czm9x1l","_id":"ck2k8bsdj005fsm4w490la5r1"}],"Data":[],"Page":[{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2019-11-04T09:56:05.317Z","updated":"2019-11-04T09:56:05.317Z","path":"about/index.html","comments":1,"_id":"ck2k91vqb00004o4w0cvyb5j8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2019-11-04T09:56:05.318Z","updated":"2019-11-04T09:56:05.318Z","path":"project/index.html","comments":1,"_id":"ck2k91vqf00014o4whyytd219","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2019-11-04T09:56:05.318Z","updated":"2019-11-04T09:56:05.318Z","path":"tags/index.html","comments":1,"_id":"ck2k91vqg00024o4wgwqi40wd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"倚楼听风雨，淡看江湖路(转)","date":"2017-08-13T11:03:02.000Z","author":"落叶","from":{"name":"文章阅读网","link":"http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html"},"excerpt":"倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！ ——《风云》梦写给风的信","_content":"倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！\n\n——《风云》梦写给风的信\n\n沧海桑田，天荒地老，不如有个人牵我的手，一起看夕阳老去。海枯石烂，天长地久，不如有个人陪我，倚楼听风雨，淡看江湖路。\n\n前尘往事，都让他随风而逝了吧。红尘滚滚，都任他湮没在历史中去吧。硝烟弥漫，都让他消沉在尘世间里吧。\n\n我，愿作世间素心人，本不想涉尘世太深的水而过，只愿独坐一隅，随世事流转，淡看红尘的故事，情感，梦想，琐碎的生活。\n\n微风，淡淡的从陌上吹来，掠过窗前，我听到了他的叹息，那是岁月深处的感慨，似水流年，我们像花儿一样各自散落在了天涯。\n\n朋友说，我总在碎碎念着悲伤，演绎着同样忧伤的爱情，落寞的思绪，寂寥的情愫，淡淡的情缘，浅淡的思念，痴恋的深情，心动的唯美，心碎的情殇……\n\n我，无法忘记让我最初心动的人，却是那份情愫在念念不忘的日子里，淡了。那时，我相信的一生只爱一个人的信念，也彻底崩溃在边缘了。\n\n从此，我不知该怎么继续我的红尘情缘，人散，情淡，心性开始变得薄凉。细数流年，转身离开的日子，亦是很久很远了，这些年，寂寞一直汩汩流淌在心溪。\n\n也许，我爱上了一个人，就爱上了寂寞，也爱上了文字。有人说，爱上了文字的孩子，苍老的比较快。因为心的沧桑。我想，我便如是所说。\n\n所以，而今倚楼听风雨，悲欢离合总无情，一任阶前点滴到天明。淡看江湖路，人渐渐远去，情淡淡散去，但见泪痕湿，不知心爱谁。\n\n红颜易老，情缘易醉，流光容易把人抛，惹了心绪，染了尘埃。良辰美景奈何天，泪水凉了心，才懂得，最后的疼爱是手放开。\n\n温暖，刹那芳菲尽。悲伤，注入半世寂寞。我，不过是一个平凡的人，一杯又一杯的红尘酒，自斟自饮，醉了这一生，淡了红尘路。\n\n青烟袅袅，那是心中挥之不去的忧伤。淡淡流云，那是心中无以言说的伤痛。风轻云淡，抹淡流年，静听雨声，洗尽芳华，愿你我安好。\n\n轻轻地推开窗，沁人心脾的花香飘散在风雨中，扑鼻而来。温暖，依然在眼前，是我的心太多贪恋了。不如泡一杯茶，安于一份淡然。\n\n也许，爱与不爱，都是殇。毕竟，我总觉得，爱是人间最美的情愫，心动的朦胧，抵得过心喜的痴恋自醉，心痛的黯然销魂。\n\n其实，不是将他忘了，也不是讲故事忘了，更不是将情感忘了。虽然云淡风轻了，却依然是，多少事，才下眉头，却上心间。只是，选择三缄其口，不说了。\n\n拈花一笑，捣碎了心，寂静转身，安然守候一丝一缕的情愫，如睡莲般静躺在红尘的流水里，即使，风雨穿透世事，亦波澜不惊。\n\n夏夜微凉，窗外雨潺潺，随着旋律轻轻流泻指尖的忧伤，人淡情远，静静地坐着，想着心事，任红尘纷纭一一化了虚无，散了云烟，浅了风情。\n\n搁浅心思，束之高阁，转身离开。如莲禅定，潜入红尘，出淤泥而不染。倚楼听风雨，淡看江湖路……\n\n作者：落叶\n链接：http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html\n來源：文章阅读网","source":"_posts/2017-08-13-倚楼听风雨，淡看江湖路.md","raw":"---\nlayout: post\ntitle:  \"倚楼听风雨，淡看江湖路(转)\"\ndate:   2017-08-13 19:03:02\nauthor: \"落叶\"\nfrom: \n    name: \"文章阅读网\"\n    link: \"http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html\"\ncategories: \n    - 听风雨\ntags: \n    - 听风雨\n\nexcerpt: \"倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！\n\t——《风云》梦写给风的信\"\n---\n倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！\n\n——《风云》梦写给风的信\n\n沧海桑田，天荒地老，不如有个人牵我的手，一起看夕阳老去。海枯石烂，天长地久，不如有个人陪我，倚楼听风雨，淡看江湖路。\n\n前尘往事，都让他随风而逝了吧。红尘滚滚，都任他湮没在历史中去吧。硝烟弥漫，都让他消沉在尘世间里吧。\n\n我，愿作世间素心人，本不想涉尘世太深的水而过，只愿独坐一隅，随世事流转，淡看红尘的故事，情感，梦想，琐碎的生活。\n\n微风，淡淡的从陌上吹来，掠过窗前，我听到了他的叹息，那是岁月深处的感慨，似水流年，我们像花儿一样各自散落在了天涯。\n\n朋友说，我总在碎碎念着悲伤，演绎着同样忧伤的爱情，落寞的思绪，寂寥的情愫，淡淡的情缘，浅淡的思念，痴恋的深情，心动的唯美，心碎的情殇……\n\n我，无法忘记让我最初心动的人，却是那份情愫在念念不忘的日子里，淡了。那时，我相信的一生只爱一个人的信念，也彻底崩溃在边缘了。\n\n从此，我不知该怎么继续我的红尘情缘，人散，情淡，心性开始变得薄凉。细数流年，转身离开的日子，亦是很久很远了，这些年，寂寞一直汩汩流淌在心溪。\n\n也许，我爱上了一个人，就爱上了寂寞，也爱上了文字。有人说，爱上了文字的孩子，苍老的比较快。因为心的沧桑。我想，我便如是所说。\n\n所以，而今倚楼听风雨，悲欢离合总无情，一任阶前点滴到天明。淡看江湖路，人渐渐远去，情淡淡散去，但见泪痕湿，不知心爱谁。\n\n红颜易老，情缘易醉，流光容易把人抛，惹了心绪，染了尘埃。良辰美景奈何天，泪水凉了心，才懂得，最后的疼爱是手放开。\n\n温暖，刹那芳菲尽。悲伤，注入半世寂寞。我，不过是一个平凡的人，一杯又一杯的红尘酒，自斟自饮，醉了这一生，淡了红尘路。\n\n青烟袅袅，那是心中挥之不去的忧伤。淡淡流云，那是心中无以言说的伤痛。风轻云淡，抹淡流年，静听雨声，洗尽芳华，愿你我安好。\n\n轻轻地推开窗，沁人心脾的花香飘散在风雨中，扑鼻而来。温暖，依然在眼前，是我的心太多贪恋了。不如泡一杯茶，安于一份淡然。\n\n也许，爱与不爱，都是殇。毕竟，我总觉得，爱是人间最美的情愫，心动的朦胧，抵得过心喜的痴恋自醉，心痛的黯然销魂。\n\n其实，不是将他忘了，也不是讲故事忘了，更不是将情感忘了。虽然云淡风轻了，却依然是，多少事，才下眉头，却上心间。只是，选择三缄其口，不说了。\n\n拈花一笑，捣碎了心，寂静转身，安然守候一丝一缕的情愫，如睡莲般静躺在红尘的流水里，即使，风雨穿透世事，亦波澜不惊。\n\n夏夜微凉，窗外雨潺潺，随着旋律轻轻流泻指尖的忧伤，人淡情远，静静地坐着，想着心事，任红尘纷纭一一化了虚无，散了云烟，浅了风情。\n\n搁浅心思，束之高阁，转身离开。如莲禅定，潜入红尘，出淤泥而不染。倚楼听风雨，淡看江湖路……\n\n作者：落叶\n链接：http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html\n來源：文章阅读网","slug":"2017-08-13-倚楼听风雨，淡看江湖路","published":1,"updated":"2019-11-01T02:16:34.407Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbm0000sm4wd8qwhcwl","content":"<p>倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！</p>\n<p>——《风云》梦写给风的信</p>\n<p>沧海桑田，天荒地老，不如有个人牵我的手，一起看夕阳老去。海枯石烂，天长地久，不如有个人陪我，倚楼听风雨，淡看江湖路。</p>\n<p>前尘往事，都让他随风而逝了吧。红尘滚滚，都任他湮没在历史中去吧。硝烟弥漫，都让他消沉在尘世间里吧。</p>\n<p>我，愿作世间素心人，本不想涉尘世太深的水而过，只愿独坐一隅，随世事流转，淡看红尘的故事，情感，梦想，琐碎的生活。</p>\n<p>微风，淡淡的从陌上吹来，掠过窗前，我听到了他的叹息，那是岁月深处的感慨，似水流年，我们像花儿一样各自散落在了天涯。</p>\n<p>朋友说，我总在碎碎念着悲伤，演绎着同样忧伤的爱情，落寞的思绪，寂寥的情愫，淡淡的情缘，浅淡的思念，痴恋的深情，心动的唯美，心碎的情殇……</p>\n<p>我，无法忘记让我最初心动的人，却是那份情愫在念念不忘的日子里，淡了。那时，我相信的一生只爱一个人的信念，也彻底崩溃在边缘了。</p>\n<p>从此，我不知该怎么继续我的红尘情缘，人散，情淡，心性开始变得薄凉。细数流年，转身离开的日子，亦是很久很远了，这些年，寂寞一直汩汩流淌在心溪。</p>\n<p>也许，我爱上了一个人，就爱上了寂寞，也爱上了文字。有人说，爱上了文字的孩子，苍老的比较快。因为心的沧桑。我想，我便如是所说。</p>\n<p>所以，而今倚楼听风雨，悲欢离合总无情，一任阶前点滴到天明。淡看江湖路，人渐渐远去，情淡淡散去，但见泪痕湿，不知心爱谁。</p>\n<p>红颜易老，情缘易醉，流光容易把人抛，惹了心绪，染了尘埃。良辰美景奈何天，泪水凉了心，才懂得，最后的疼爱是手放开。</p>\n<p>温暖，刹那芳菲尽。悲伤，注入半世寂寞。我，不过是一个平凡的人，一杯又一杯的红尘酒，自斟自饮，醉了这一生，淡了红尘路。</p>\n<p>青烟袅袅，那是心中挥之不去的忧伤。淡淡流云，那是心中无以言说的伤痛。风轻云淡，抹淡流年，静听雨声，洗尽芳华，愿你我安好。</p>\n<p>轻轻地推开窗，沁人心脾的花香飘散在风雨中，扑鼻而来。温暖，依然在眼前，是我的心太多贪恋了。不如泡一杯茶，安于一份淡然。</p>\n<p>也许，爱与不爱，都是殇。毕竟，我总觉得，爱是人间最美的情愫，心动的朦胧，抵得过心喜的痴恋自醉，心痛的黯然销魂。</p>\n<p>其实，不是将他忘了，也不是讲故事忘了，更不是将情感忘了。虽然云淡风轻了，却依然是，多少事，才下眉头，却上心间。只是，选择三缄其口，不说了。</p>\n<p>拈花一笑，捣碎了心，寂静转身，安然守候一丝一缕的情愫，如睡莲般静躺在红尘的流水里，即使，风雨穿透世事，亦波澜不惊。</p>\n<p>夏夜微凉，窗外雨潺潺，随着旋律轻轻流泻指尖的忧伤，人淡情远，静静地坐着，想着心事，任红尘纷纭一一化了虚无，散了云烟，浅了风情。</p>\n<p>搁浅心思，束之高阁，转身离开。如莲禅定，潜入红尘，出淤泥而不染。倚楼听风雨，淡看江湖路……</p>\n<p>作者：落叶<br>链接：<a href=\"http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html\" target=\"_blank\" rel=\"noopener\">http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html</a><br>來源：文章阅读网</p>\n","site":{"data":{}},"more":"<p>倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！</p>\n<p>——《风云》梦写给风的信</p>\n<p>沧海桑田，天荒地老，不如有个人牵我的手，一起看夕阳老去。海枯石烂，天长地久，不如有个人陪我，倚楼听风雨，淡看江湖路。</p>\n<p>前尘往事，都让他随风而逝了吧。红尘滚滚，都任他湮没在历史中去吧。硝烟弥漫，都让他消沉在尘世间里吧。</p>\n<p>我，愿作世间素心人，本不想涉尘世太深的水而过，只愿独坐一隅，随世事流转，淡看红尘的故事，情感，梦想，琐碎的生活。</p>\n<p>微风，淡淡的从陌上吹来，掠过窗前，我听到了他的叹息，那是岁月深处的感慨，似水流年，我们像花儿一样各自散落在了天涯。</p>\n<p>朋友说，我总在碎碎念着悲伤，演绎着同样忧伤的爱情，落寞的思绪，寂寥的情愫，淡淡的情缘，浅淡的思念，痴恋的深情，心动的唯美，心碎的情殇……</p>\n<p>我，无法忘记让我最初心动的人，却是那份情愫在念念不忘的日子里，淡了。那时，我相信的一生只爱一个人的信念，也彻底崩溃在边缘了。</p>\n<p>从此，我不知该怎么继续我的红尘情缘，人散，情淡，心性开始变得薄凉。细数流年，转身离开的日子，亦是很久很远了，这些年，寂寞一直汩汩流淌在心溪。</p>\n<p>也许，我爱上了一个人，就爱上了寂寞，也爱上了文字。有人说，爱上了文字的孩子，苍老的比较快。因为心的沧桑。我想，我便如是所说。</p>\n<p>所以，而今倚楼听风雨，悲欢离合总无情，一任阶前点滴到天明。淡看江湖路，人渐渐远去，情淡淡散去，但见泪痕湿，不知心爱谁。</p>\n<p>红颜易老，情缘易醉，流光容易把人抛，惹了心绪，染了尘埃。良辰美景奈何天，泪水凉了心，才懂得，最后的疼爱是手放开。</p>\n<p>温暖，刹那芳菲尽。悲伤，注入半世寂寞。我，不过是一个平凡的人，一杯又一杯的红尘酒，自斟自饮，醉了这一生，淡了红尘路。</p>\n<p>青烟袅袅，那是心中挥之不去的忧伤。淡淡流云，那是心中无以言说的伤痛。风轻云淡，抹淡流年，静听雨声，洗尽芳华，愿你我安好。</p>\n<p>轻轻地推开窗，沁人心脾的花香飘散在风雨中，扑鼻而来。温暖，依然在眼前，是我的心太多贪恋了。不如泡一杯茶，安于一份淡然。</p>\n<p>也许，爱与不爱，都是殇。毕竟，我总觉得，爱是人间最美的情愫，心动的朦胧，抵得过心喜的痴恋自醉，心痛的黯然销魂。</p>\n<p>其实，不是将他忘了，也不是讲故事忘了，更不是将情感忘了。虽然云淡风轻了，却依然是，多少事，才下眉头，却上心间。只是，选择三缄其口，不说了。</p>\n<p>拈花一笑，捣碎了心，寂静转身，安然守候一丝一缕的情愫，如睡莲般静躺在红尘的流水里，即使，风雨穿透世事，亦波澜不惊。</p>\n<p>夏夜微凉，窗外雨潺潺，随着旋律轻轻流泻指尖的忧伤，人淡情远，静静地坐着，想着心事，任红尘纷纭一一化了虚无，散了云烟，浅了风情。</p>\n<p>搁浅心思，束之高阁，转身离开。如莲禅定，潜入红尘，出淤泥而不染。倚楼听风雨，淡看江湖路……</p>\n<p>作者：落叶<br>链接：<a href=\"http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html\" target=\"_blank\" rel=\"noopener\">http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html</a><br>來源：文章阅读网</p>\n"},{"layout":"post","title":"一个简单的API授权流程","date":"2017-08-16T02:42:02.000Z","author":"Heropoo","excerpt":"实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。","_content":"实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。这时我们要保证api的安全，参考`腾讯广点通`的api调用。现将php的代码实现整理这此。\n\n我们的算法很简单：\n\n> 1. 把调用方自己的appid,secret_key,当前的时间戳time连接起来用sha1方法生成一个sign\n> 2. 把appid,time,sign用英文逗号连接并用base64打包变成一个参数token\n\n### API的几个方法\n`api_functions.php`\n```php\n<?php\n/**\n * 生成token\n * @param string $appid\n * @param string $secret_key\n * @param int $time\n * @return string\n */\nfunction generate_token($appid, $secret_key, $time)\n{\n    $sign = sha1($appid . $secret_key . $time);\n    return base64_encode($appid . ',' . $time . ',' . $sign);\n}\n\n/**\n * 解包token\n * @param string $token\n * @return array\n */\nfunction unpack_token($token){\n    $params = base64_decode($token);\n    $params = explode(',', $params);\n\n    return [\n        'appid'=> isset($params[0]) ? $params[0] : '',\n        'time'=> isset($params[1]) ? $params[1] : '',\n        'sign'=> isset($params[2]) ? $params[2] : '',\n    ];\n}\n\n/**\n * @param $url\n * @param array $data\n * @param bool $is_post\n * @param array $header\n * @return mixed\n */\nfunction sub_curl($url, $data = array(), $is_post = false, $header = array())\n{\n    $ch = curl_init();\n    if (!$is_post && !empty($data)) {\n        $url = $url . '?' . http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, $is_post);\n    if ($is_post) {\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $info = curl_exec($ch);\n    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if($code != 200){\n\n        echo_json($code, 'api调用出错'.$code);\n    }\n    curl_close($ch);\n    return $info;\n}\n\n/**\n * @param int $code\n * @param string $msg\n * @param array $data\n */\nfunction echo_json($code, $msg = '', $data = array()){\n    header('Content-type:application/json');\n    echo json_encode(array('ret' => $code, 'msg' => $msg, 'data' => $data));\n    exit;\n}\n```\n\n### API提供方 \n`api.php`\n```php\n<?php\nrequire 'api_functions.php';\n\n//授权的使用方名单 现为演示方便直接使用数组\n$users = [\n    'user_001'=>[\n        'appid'=>'user_001',    //使用方对于提供方api的唯一id\n        'secret_key'=>'97bc847d4ea7dd9f035d41a657302f1c'    //密钥 也唯一\n    ],\n    'user_002'=>[\n        'appid'=>'user_002',\n        'secret_key'=>'c763b64a62186ae6831edd22063539c4'\n    ],\n    'user_003'=>[\n        'appid'=>'user_003',\n        'secret_key'=>'51a683bea5e5c138fd0342fb70e03c65'\n    ],\n];\n\n//检验签名\n$token = isset($_GET['token']) ? trim($_GET['token']) : '';\nif(empty($token)){\n    echo_json(1000, 'token missed');\n}\n\n//解包token\n$token_params = unpack_token($token);\n\nif(empty($token_params['sign'])){\n    echo_json(1001, 'sign error');  //签名为空或者错误\n}\n\nif(empty($token_params['appid'])){\n    echo_json(1002, 'appid error');  //appid为空或者错误\n}\n\nif(empty($token_params['time'])){\n    echo_json(1003, 'time error');  //time为空或者错误\n}\n\nif(abs($token_params['time'] - time()) > 10 * 60){    // api 调用时间限制左右浮动10分钟\n    echo_json(1004, 'time expired');  // 10 minutes\n}\n\n//用appid取用户\n$user = isset($users[$token_params['appid']]) ? $users[$token_params['appid']] : [];\nif(empty($user)){\n    echo_json(1005, 'appid not exists');  //调用方不存在\n}\n\n//使用调用方参数生成token\n$create_token = generate_token($user['appid'], $user['secret_key'], $token_params['time']);\n\nif($token !== $create_token){\n    echo_json(1006, 'token error');  //token错误\n}\n\n//到此 调用权限的验证就ok了\n\n$api = isset($_GET['api']) ? trim($_GET['api']) : '';\n\n//接下来你可以有其他对具体接口的验证...\n\n\n//返回结果\necho_json(200, 'your request api '.$api. ' success!');\n```\n\n### API调用方 \n`use_api.php`\n```php\n<?php\nrequire 'api_functions.php';\n\n//假设使用方是 user_001 他拥有自己的appid和secret_key\n$user = [\n    'appid' => 'user_001',    //使用方对于提供方api的唯一id\n    'secret_key' => '97bc847d4ea7dd9f035d41a657302f1c'    //密钥 也唯一\n\n];\n\n//生成token\n$token = generate_token($user['appid'], $user['secret_key'], time());\n\n//url换成你自己的接口url\n$url = 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']);\n\n$url .= '/api.php?api=user_info'; //调用user_info的接口\n$url .= '&token=' . $token;\n\necho $url;\necho '<hr><pre>';\n\n//请求接口\n$res = sub_curl($url);\n\nvar_dump(json_decode($res, 1));\n\n/* 调用成功结果\narray(3) {\n  [\"ret\"]=>\n  int(200)\n  [\"msg\"]=>\n  string(35) \"your request api user_info success!\"\n  [\"data\"]=>\n  array(0) {\n  }\n}\n*/\n```","source":"_posts/2017-08-16-一个简单的api授权流程.md","raw":"---\nlayout: post\ntitle:  \"一个简单的API授权流程\"\ndate:   2017-08-16 10:42:02\nauthor: \"Heropoo\"\ncategories: \n    - PHP\ntags: \n    - API\n    - PHP\nexcerpt: \"实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。\"\n---\n实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。这时我们要保证api的安全，参考`腾讯广点通`的api调用。现将php的代码实现整理这此。\n\n我们的算法很简单：\n\n> 1. 把调用方自己的appid,secret_key,当前的时间戳time连接起来用sha1方法生成一个sign\n> 2. 把appid,time,sign用英文逗号连接并用base64打包变成一个参数token\n\n### API的几个方法\n`api_functions.php`\n```php\n<?php\n/**\n * 生成token\n * @param string $appid\n * @param string $secret_key\n * @param int $time\n * @return string\n */\nfunction generate_token($appid, $secret_key, $time)\n{\n    $sign = sha1($appid . $secret_key . $time);\n    return base64_encode($appid . ',' . $time . ',' . $sign);\n}\n\n/**\n * 解包token\n * @param string $token\n * @return array\n */\nfunction unpack_token($token){\n    $params = base64_decode($token);\n    $params = explode(',', $params);\n\n    return [\n        'appid'=> isset($params[0]) ? $params[0] : '',\n        'time'=> isset($params[1]) ? $params[1] : '',\n        'sign'=> isset($params[2]) ? $params[2] : '',\n    ];\n}\n\n/**\n * @param $url\n * @param array $data\n * @param bool $is_post\n * @param array $header\n * @return mixed\n */\nfunction sub_curl($url, $data = array(), $is_post = false, $header = array())\n{\n    $ch = curl_init();\n    if (!$is_post && !empty($data)) {\n        $url = $url . '?' . http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, $is_post);\n    if ($is_post) {\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $info = curl_exec($ch);\n    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if($code != 200){\n\n        echo_json($code, 'api调用出错'.$code);\n    }\n    curl_close($ch);\n    return $info;\n}\n\n/**\n * @param int $code\n * @param string $msg\n * @param array $data\n */\nfunction echo_json($code, $msg = '', $data = array()){\n    header('Content-type:application/json');\n    echo json_encode(array('ret' => $code, 'msg' => $msg, 'data' => $data));\n    exit;\n}\n```\n\n### API提供方 \n`api.php`\n```php\n<?php\nrequire 'api_functions.php';\n\n//授权的使用方名单 现为演示方便直接使用数组\n$users = [\n    'user_001'=>[\n        'appid'=>'user_001',    //使用方对于提供方api的唯一id\n        'secret_key'=>'97bc847d4ea7dd9f035d41a657302f1c'    //密钥 也唯一\n    ],\n    'user_002'=>[\n        'appid'=>'user_002',\n        'secret_key'=>'c763b64a62186ae6831edd22063539c4'\n    ],\n    'user_003'=>[\n        'appid'=>'user_003',\n        'secret_key'=>'51a683bea5e5c138fd0342fb70e03c65'\n    ],\n];\n\n//检验签名\n$token = isset($_GET['token']) ? trim($_GET['token']) : '';\nif(empty($token)){\n    echo_json(1000, 'token missed');\n}\n\n//解包token\n$token_params = unpack_token($token);\n\nif(empty($token_params['sign'])){\n    echo_json(1001, 'sign error');  //签名为空或者错误\n}\n\nif(empty($token_params['appid'])){\n    echo_json(1002, 'appid error');  //appid为空或者错误\n}\n\nif(empty($token_params['time'])){\n    echo_json(1003, 'time error');  //time为空或者错误\n}\n\nif(abs($token_params['time'] - time()) > 10 * 60){    // api 调用时间限制左右浮动10分钟\n    echo_json(1004, 'time expired');  // 10 minutes\n}\n\n//用appid取用户\n$user = isset($users[$token_params['appid']]) ? $users[$token_params['appid']] : [];\nif(empty($user)){\n    echo_json(1005, 'appid not exists');  //调用方不存在\n}\n\n//使用调用方参数生成token\n$create_token = generate_token($user['appid'], $user['secret_key'], $token_params['time']);\n\nif($token !== $create_token){\n    echo_json(1006, 'token error');  //token错误\n}\n\n//到此 调用权限的验证就ok了\n\n$api = isset($_GET['api']) ? trim($_GET['api']) : '';\n\n//接下来你可以有其他对具体接口的验证...\n\n\n//返回结果\necho_json(200, 'your request api '.$api. ' success!');\n```\n\n### API调用方 \n`use_api.php`\n```php\n<?php\nrequire 'api_functions.php';\n\n//假设使用方是 user_001 他拥有自己的appid和secret_key\n$user = [\n    'appid' => 'user_001',    //使用方对于提供方api的唯一id\n    'secret_key' => '97bc847d4ea7dd9f035d41a657302f1c'    //密钥 也唯一\n\n];\n\n//生成token\n$token = generate_token($user['appid'], $user['secret_key'], time());\n\n//url换成你自己的接口url\n$url = 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']);\n\n$url .= '/api.php?api=user_info'; //调用user_info的接口\n$url .= '&token=' . $token;\n\necho $url;\necho '<hr><pre>';\n\n//请求接口\n$res = sub_curl($url);\n\nvar_dump(json_decode($res, 1));\n\n/* 调用成功结果\narray(3) {\n  [\"ret\"]=>\n  int(200)\n  [\"msg\"]=>\n  string(35) \"your request api user_info success!\"\n  [\"data\"]=>\n  array(0) {\n  }\n}\n*/\n```","slug":"2017-08-16-一个简单的api授权流程","published":1,"updated":"2019-11-01T02:16:34.407Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbq0001sm4w8ivffv7o","content":"<p>实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。这时我们要保证api的安全，参考<code>腾讯广点通</code>的api调用。现将php的代码实现整理这此。</p>\n<p>我们的算法很简单：</p>\n<blockquote>\n<ol>\n<li>把调用方自己的appid,secret_key,当前的时间戳time连接起来用sha1方法生成一个sign</li>\n<li>把appid,time,sign用英文逗号连接并用base64打包变成一个参数token</li>\n</ol>\n</blockquote>\n<h3 id=\"API的几个方法\"><a href=\"#API的几个方法\" class=\"headerlink\" title=\"API的几个方法\"></a>API的几个方法</h3><p><code>api_functions.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $appid</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $secret_key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $time</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate_token</span><span class=\"params\">($appid, $secret_key, $time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sign = sha1($appid . $secret_key . $time);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64_encode($appid . <span class=\"string\">','</span> . $time . <span class=\"string\">','</span> . $sign);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解包token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unpack_token</span><span class=\"params\">($token)</span></span>&#123;</span><br><span class=\"line\">    $params = base64_decode($token);</span><br><span class=\"line\">    $params = explode(<span class=\"string\">','</span>, $params);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">0</span>]) ? $params[<span class=\"number\">0</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'time'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">1</span>]) ? $params[<span class=\"number\">1</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'sign'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">2</span>]) ? $params[<span class=\"number\">2</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bool $is_post</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $header</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub_curl</span><span class=\"params\">($url, $data = array<span class=\"params\">()</span>, $is_post = false, $header = array<span class=\"params\">()</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$is_post &amp;&amp; !<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">        $url = $url . <span class=\"string\">'?'</span> . http_build_query($data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POST, $is_post);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($is_post) &#123;</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, <span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($header)) &#123;</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $info = curl_exec($ch);</span><br><span class=\"line\">    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($code != <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo_json($code, <span class=\"string\">'api调用出错'</span>.$code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $code</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $msg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo_json</span><span class=\"params\">($code, $msg = <span class=\"string\">''</span>, $data = array<span class=\"params\">()</span>)</span></span>&#123;</span><br><span class=\"line\">    header(<span class=\"string\">'Content-type:application/json'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">'ret'</span> =&gt; $code, <span class=\"string\">'msg'</span> =&gt; $msg, <span class=\"string\">'data'</span> =&gt; $data));</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API提供方\"><a href=\"#API提供方\" class=\"headerlink\" title=\"API提供方\"></a>API提供方</h3><p><code>api.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'api_functions.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//授权的使用方名单 现为演示方便直接使用数组</span></span><br><span class=\"line\">$users = [</span><br><span class=\"line\">    <span class=\"string\">'user_001'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_001'</span>,    <span class=\"comment\">//使用方对于提供方api的唯一id</span></span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'97bc847d4ea7dd9f035d41a657302f1c'</span>    <span class=\"comment\">//密钥 也唯一</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'user_002'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_002'</span>,</span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'c763b64a62186ae6831edd22063539c4'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'user_003'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_003'</span>,</span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'51a683bea5e5c138fd0342fb70e03c65'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检验签名</span></span><br><span class=\"line\">$token = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'token'</span>]) ? trim($_GET[<span class=\"string\">'token'</span>]) : <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1000</span>, <span class=\"string\">'token missed'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解包token</span></span><br><span class=\"line\">$token_params = unpack_token($token);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'sign'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1001</span>, <span class=\"string\">'sign error'</span>);  <span class=\"comment\">//签名为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'appid'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1002</span>, <span class=\"string\">'appid error'</span>);  <span class=\"comment\">//appid为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'time'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1003</span>, <span class=\"string\">'time error'</span>);  <span class=\"comment\">//time为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(abs($token_params[<span class=\"string\">'time'</span>] - time()) &gt; <span class=\"number\">10</span> * <span class=\"number\">60</span>)&#123;    <span class=\"comment\">// api 调用时间限制左右浮动10分钟</span></span><br><span class=\"line\">    echo_json(<span class=\"number\">1004</span>, <span class=\"string\">'time expired'</span>);  <span class=\"comment\">// 10 minutes</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用appid取用户</span></span><br><span class=\"line\">$user = <span class=\"keyword\">isset</span>($users[$token_params[<span class=\"string\">'appid'</span>]]) ? $users[$token_params[<span class=\"string\">'appid'</span>]] : [];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($user))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1005</span>, <span class=\"string\">'appid not exists'</span>);  <span class=\"comment\">//调用方不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用调用方参数生成token</span></span><br><span class=\"line\">$create_token = generate_token($user[<span class=\"string\">'appid'</span>], $user[<span class=\"string\">'secret_key'</span>], $token_params[<span class=\"string\">'time'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($token !== $create_token)&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1006</span>, <span class=\"string\">'token error'</span>);  <span class=\"comment\">//token错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//到此 调用权限的验证就ok了</span></span><br><span class=\"line\"></span><br><span class=\"line\">$api = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'api'</span>]) ? trim($_GET[<span class=\"string\">'api'</span>]) : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接下来你可以有其他对具体接口的验证...</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\">echo_json(<span class=\"number\">200</span>, <span class=\"string\">'your request api '</span>.$api. <span class=\"string\">' success!'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API调用方\"><a href=\"#API调用方\" class=\"headerlink\" title=\"API调用方\"></a>API调用方</h3><p><code>use_api.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'api_functions.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设使用方是 user_001 他拥有自己的appid和secret_key</span></span><br><span class=\"line\">$user = [</span><br><span class=\"line\">    <span class=\"string\">'appid'</span> =&gt; <span class=\"string\">'user_001'</span>,    <span class=\"comment\">//使用方对于提供方api的唯一id</span></span><br><span class=\"line\">    <span class=\"string\">'secret_key'</span> =&gt; <span class=\"string\">'97bc847d4ea7dd9f035d41a657302f1c'</span>    <span class=\"comment\">//密钥 也唯一</span></span><br><span class=\"line\"></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成token</span></span><br><span class=\"line\">$token = generate_token($user[<span class=\"string\">'appid'</span>], $user[<span class=\"string\">'secret_key'</span>], time());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//url换成你自己的接口url</span></span><br><span class=\"line\">$url = <span class=\"string\">'http://'</span> . $_SERVER[<span class=\"string\">'HTTP_HOST'</span>] . dirname($_SERVER[<span class=\"string\">'REQUEST_URI'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$url .= <span class=\"string\">'/api.php?api=user_info'</span>; <span class=\"comment\">//调用user_info的接口</span></span><br><span class=\"line\">$url .= <span class=\"string\">'&amp;token='</span> . $token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $url;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;hr&gt;&lt;pre&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请求接口</span></span><br><span class=\"line\">$res = sub_curl($url);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(json_decode($res, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 调用成功结果</span></span><br><span class=\"line\"><span class=\"comment\">array(3) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  [\"ret\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  int(200)</span></span><br><span class=\"line\"><span class=\"comment\">  [\"msg\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  string(35) \"your request api user_info success!\"</span></span><br><span class=\"line\"><span class=\"comment\">  [\"data\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  array(0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p>实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。这时我们要保证api的安全，参考<code>腾讯广点通</code>的api调用。现将php的代码实现整理这此。</p>\n<p>我们的算法很简单：</p>\n<blockquote>\n<ol>\n<li>把调用方自己的appid,secret_key,当前的时间戳time连接起来用sha1方法生成一个sign</li>\n<li>把appid,time,sign用英文逗号连接并用base64打包变成一个参数token</li>\n</ol>\n</blockquote>\n<h3 id=\"API的几个方法\"><a href=\"#API的几个方法\" class=\"headerlink\" title=\"API的几个方法\"></a>API的几个方法</h3><p><code>api_functions.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $appid</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $secret_key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $time</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate_token</span><span class=\"params\">($appid, $secret_key, $time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sign = sha1($appid . $secret_key . $time);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64_encode($appid . <span class=\"string\">','</span> . $time . <span class=\"string\">','</span> . $sign);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解包token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unpack_token</span><span class=\"params\">($token)</span></span>&#123;</span><br><span class=\"line\">    $params = base64_decode($token);</span><br><span class=\"line\">    $params = explode(<span class=\"string\">','</span>, $params);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">0</span>]) ? $params[<span class=\"number\">0</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'time'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">1</span>]) ? $params[<span class=\"number\">1</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'sign'</span>=&gt; <span class=\"keyword\">isset</span>($params[<span class=\"number\">2</span>]) ? $params[<span class=\"number\">2</span>] : <span class=\"string\">''</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bool $is_post</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $header</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub_curl</span><span class=\"params\">($url, $data = array<span class=\"params\">()</span>, $is_post = false, $header = array<span class=\"params\">()</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$is_post &amp;&amp; !<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">        $url = $url . <span class=\"string\">'?'</span> . http_build_query($data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POST, $is_post);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($is_post) &#123;</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, <span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($header)) &#123;</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $info = curl_exec($ch);</span><br><span class=\"line\">    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($code != <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo_json($code, <span class=\"string\">'api调用出错'</span>.$code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $code</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $msg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo_json</span><span class=\"params\">($code, $msg = <span class=\"string\">''</span>, $data = array<span class=\"params\">()</span>)</span></span>&#123;</span><br><span class=\"line\">    header(<span class=\"string\">'Content-type:application/json'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">'ret'</span> =&gt; $code, <span class=\"string\">'msg'</span> =&gt; $msg, <span class=\"string\">'data'</span> =&gt; $data));</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API提供方\"><a href=\"#API提供方\" class=\"headerlink\" title=\"API提供方\"></a>API提供方</h3><p><code>api.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'api_functions.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//授权的使用方名单 现为演示方便直接使用数组</span></span><br><span class=\"line\">$users = [</span><br><span class=\"line\">    <span class=\"string\">'user_001'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_001'</span>,    <span class=\"comment\">//使用方对于提供方api的唯一id</span></span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'97bc847d4ea7dd9f035d41a657302f1c'</span>    <span class=\"comment\">//密钥 也唯一</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'user_002'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_002'</span>,</span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'c763b64a62186ae6831edd22063539c4'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'user_003'</span>=&gt;[</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>=&gt;<span class=\"string\">'user_003'</span>,</span><br><span class=\"line\">        <span class=\"string\">'secret_key'</span>=&gt;<span class=\"string\">'51a683bea5e5c138fd0342fb70e03c65'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检验签名</span></span><br><span class=\"line\">$token = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'token'</span>]) ? trim($_GET[<span class=\"string\">'token'</span>]) : <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1000</span>, <span class=\"string\">'token missed'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解包token</span></span><br><span class=\"line\">$token_params = unpack_token($token);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'sign'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1001</span>, <span class=\"string\">'sign error'</span>);  <span class=\"comment\">//签名为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'appid'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1002</span>, <span class=\"string\">'appid error'</span>);  <span class=\"comment\">//appid为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($token_params[<span class=\"string\">'time'</span>]))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1003</span>, <span class=\"string\">'time error'</span>);  <span class=\"comment\">//time为空或者错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(abs($token_params[<span class=\"string\">'time'</span>] - time()) &gt; <span class=\"number\">10</span> * <span class=\"number\">60</span>)&#123;    <span class=\"comment\">// api 调用时间限制左右浮动10分钟</span></span><br><span class=\"line\">    echo_json(<span class=\"number\">1004</span>, <span class=\"string\">'time expired'</span>);  <span class=\"comment\">// 10 minutes</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用appid取用户</span></span><br><span class=\"line\">$user = <span class=\"keyword\">isset</span>($users[$token_params[<span class=\"string\">'appid'</span>]]) ? $users[$token_params[<span class=\"string\">'appid'</span>]] : [];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($user))&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1005</span>, <span class=\"string\">'appid not exists'</span>);  <span class=\"comment\">//调用方不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用调用方参数生成token</span></span><br><span class=\"line\">$create_token = generate_token($user[<span class=\"string\">'appid'</span>], $user[<span class=\"string\">'secret_key'</span>], $token_params[<span class=\"string\">'time'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($token !== $create_token)&#123;</span><br><span class=\"line\">    echo_json(<span class=\"number\">1006</span>, <span class=\"string\">'token error'</span>);  <span class=\"comment\">//token错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//到此 调用权限的验证就ok了</span></span><br><span class=\"line\"></span><br><span class=\"line\">$api = <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'api'</span>]) ? trim($_GET[<span class=\"string\">'api'</span>]) : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接下来你可以有其他对具体接口的验证...</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\">echo_json(<span class=\"number\">200</span>, <span class=\"string\">'your request api '</span>.$api. <span class=\"string\">' success!'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API调用方\"><a href=\"#API调用方\" class=\"headerlink\" title=\"API调用方\"></a>API调用方</h3><p><code>use_api.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'api_functions.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设使用方是 user_001 他拥有自己的appid和secret_key</span></span><br><span class=\"line\">$user = [</span><br><span class=\"line\">    <span class=\"string\">'appid'</span> =&gt; <span class=\"string\">'user_001'</span>,    <span class=\"comment\">//使用方对于提供方api的唯一id</span></span><br><span class=\"line\">    <span class=\"string\">'secret_key'</span> =&gt; <span class=\"string\">'97bc847d4ea7dd9f035d41a657302f1c'</span>    <span class=\"comment\">//密钥 也唯一</span></span><br><span class=\"line\"></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成token</span></span><br><span class=\"line\">$token = generate_token($user[<span class=\"string\">'appid'</span>], $user[<span class=\"string\">'secret_key'</span>], time());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//url换成你自己的接口url</span></span><br><span class=\"line\">$url = <span class=\"string\">'http://'</span> . $_SERVER[<span class=\"string\">'HTTP_HOST'</span>] . dirname($_SERVER[<span class=\"string\">'REQUEST_URI'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$url .= <span class=\"string\">'/api.php?api=user_info'</span>; <span class=\"comment\">//调用user_info的接口</span></span><br><span class=\"line\">$url .= <span class=\"string\">'&amp;token='</span> . $token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $url;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;hr&gt;&lt;pre&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请求接口</span></span><br><span class=\"line\">$res = sub_curl($url);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(json_decode($res, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 调用成功结果</span></span><br><span class=\"line\"><span class=\"comment\">array(3) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  [\"ret\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  int(200)</span></span><br><span class=\"line\"><span class=\"comment\">  [\"msg\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  string(35) \"your request api user_info success!\"</span></span><br><span class=\"line\"><span class=\"comment\">  [\"data\"]=&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  array(0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"用PHP进行HTTP认证","date":"2017-08-21T03:54:14.000Z","author":"Heropoo","excerpt":"PHP的HTTP认证机制，就是用`header()`函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后","_content":"PHP的HTTP认证机制，就是用`header()`函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后，包含有URL的PHP脚本将会加上预定义变量`PHP_AUTH_USER`，`PHP_AUTH_PW`和`AUTH_TYPE`被再次调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 `$_SERVER` 或者 `$HTTP_SERVER_VARS` 数组中。支持“Basic”和“Digest”（自 PHP 5.1.0 起）认证方法。这是php官网的解释。\n大家看示例体会。😁\n\n参考连接：[http://php.net/manual/zh/features.http-auth.php](http://php.net/manual/zh/features.http-auth.php)\n\n### 示例：\n```php\n<?php\nif (!isset($_SERVER['PHP_AUTH_USER'])) {\n    header('WWW-Authenticate: Basic realm=\"My Realm\"');\n    header('HTTP/1.0 401 Unauthorized');\n    die('401 Unauthorized'.'<br> <button onclick=\"window.location.reload();\">Login Again</button>');\n} else {\n    if($_SERVER['PHP_AUTH_USER'] !== 'James Bond' || $_SERVER['PHP_AUTH_PW'] !== '007'){\n        header('WWW-Authenticate: Basic realm=\"My Realm\"');\n        header('HTTP/1.0 401 Unauthorized');\n        die('401 Unauthorized'.'<br> <button onclick=\"window.location.reload();\">Login Again</button>');\n    }\n}\n\n//下面是你的业务代码\n\n\n```\n\n\n![example-pic](/assets/images/20170821120459.png)\n\n\n\n这样就会弹出一个登陆框，输入用户名：`James Bond` 密码：`007` 登陆吧！\n\n成功了没，哈哈，大家觉得是不是很好玩~","source":"_posts/2017-08-21-用PHP进行HTTP认证.md","raw":"---\nlayout: post\ntitle:  \"用PHP进行HTTP认证\"\ndate:   2017-08-21 11:54:14\nauthor: \"Heropoo\"\ncategories: \n    - PHP\ntags:\n    - PHP\n    - HTTP\nexcerpt: \"PHP的HTTP认证机制，就是用`header()`函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后\"\n---\nPHP的HTTP认证机制，就是用`header()`函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后，包含有URL的PHP脚本将会加上预定义变量`PHP_AUTH_USER`，`PHP_AUTH_PW`和`AUTH_TYPE`被再次调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 `$_SERVER` 或者 `$HTTP_SERVER_VARS` 数组中。支持“Basic”和“Digest”（自 PHP 5.1.0 起）认证方法。这是php官网的解释。\n大家看示例体会。😁\n\n参考连接：[http://php.net/manual/zh/features.http-auth.php](http://php.net/manual/zh/features.http-auth.php)\n\n### 示例：\n```php\n<?php\nif (!isset($_SERVER['PHP_AUTH_USER'])) {\n    header('WWW-Authenticate: Basic realm=\"My Realm\"');\n    header('HTTP/1.0 401 Unauthorized');\n    die('401 Unauthorized'.'<br> <button onclick=\"window.location.reload();\">Login Again</button>');\n} else {\n    if($_SERVER['PHP_AUTH_USER'] !== 'James Bond' || $_SERVER['PHP_AUTH_PW'] !== '007'){\n        header('WWW-Authenticate: Basic realm=\"My Realm\"');\n        header('HTTP/1.0 401 Unauthorized');\n        die('401 Unauthorized'.'<br> <button onclick=\"window.location.reload();\">Login Again</button>');\n    }\n}\n\n//下面是你的业务代码\n\n\n```\n\n\n![example-pic](/assets/images/20170821120459.png)\n\n\n\n这样就会弹出一个登陆框，输入用户名：`James Bond` 密码：`007` 登陆吧！\n\n成功了没，哈哈，大家觉得是不是很好玩~","slug":"2017-08-21-用PHP进行HTTP认证","published":1,"updated":"2019-11-01T02:16:34.408Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbt0004sm4whpq7aq4n","content":"<p>PHP的HTTP认证机制，就是用<code>header()</code>函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后，包含有URL的PHP脚本将会加上预定义变量<code>PHP_AUTH_USER</code>，<code>PHP_AUTH_PW</code>和<code>AUTH_TYPE</code>被再次调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 <code>$_SERVER</code> 或者 <code>$HTTP_SERVER_VARS</code> 数组中。支持“Basic”和“Digest”（自 PHP 5.1.0 起）认证方法。这是php官网的解释。<br>大家看示例体会。😁</p>\n<p>参考连接：<a href=\"http://php.net/manual/zh/features.http-auth.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/features.http-auth.php</a></p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'PHP_AUTH_USER'</span>])) &#123;</span><br><span class=\"line\">    header(<span class=\"string\">'WWW-Authenticate: Basic realm=\"My Realm\"'</span>);</span><br><span class=\"line\">    header(<span class=\"string\">'HTTP/1.0 401 Unauthorized'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'401 Unauthorized'</span>.<span class=\"string\">'&lt;br&gt; &lt;button onclick=\"window.location.reload();\"&gt;Login Again&lt;/button&gt;'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($_SERVER[<span class=\"string\">'PHP_AUTH_USER'</span>] !== <span class=\"string\">'James Bond'</span> || $_SERVER[<span class=\"string\">'PHP_AUTH_PW'</span>] !== <span class=\"string\">'007'</span>)&#123;</span><br><span class=\"line\">        header(<span class=\"string\">'WWW-Authenticate: Basic realm=\"My Realm\"'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">'HTTP/1.0 401 Unauthorized'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'401 Unauthorized'</span>.<span class=\"string\">'&lt;br&gt; &lt;button onclick=\"window.location.reload();\"&gt;Login Again&lt;/button&gt;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面是你的业务代码</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/assets/images/20170821120459.png\" alt=\"example-pic\"></p>\n<p>这样就会弹出一个登陆框，输入用户名：<code>James Bond</code> 密码：<code>007</code> 登陆吧！</p>\n<p>成功了没，哈哈，大家觉得是不是很好玩~</p>\n","site":{"data":{}},"more":"<p>PHP的HTTP认证机制，就是用<code>header()</code>函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后，包含有URL的PHP脚本将会加上预定义变量<code>PHP_AUTH_USER</code>，<code>PHP_AUTH_PW</code>和<code>AUTH_TYPE</code>被再次调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 <code>$_SERVER</code> 或者 <code>$HTTP_SERVER_VARS</code> 数组中。支持“Basic”和“Digest”（自 PHP 5.1.0 起）认证方法。这是php官网的解释。<br>大家看示例体会。😁</p>\n<p>参考连接：<a href=\"http://php.net/manual/zh/features.http-auth.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/features.http-auth.php</a></p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'PHP_AUTH_USER'</span>])) &#123;</span><br><span class=\"line\">    header(<span class=\"string\">'WWW-Authenticate: Basic realm=\"My Realm\"'</span>);</span><br><span class=\"line\">    header(<span class=\"string\">'HTTP/1.0 401 Unauthorized'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'401 Unauthorized'</span>.<span class=\"string\">'&lt;br&gt; &lt;button onclick=\"window.location.reload();\"&gt;Login Again&lt;/button&gt;'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($_SERVER[<span class=\"string\">'PHP_AUTH_USER'</span>] !== <span class=\"string\">'James Bond'</span> || $_SERVER[<span class=\"string\">'PHP_AUTH_PW'</span>] !== <span class=\"string\">'007'</span>)&#123;</span><br><span class=\"line\">        header(<span class=\"string\">'WWW-Authenticate: Basic realm=\"My Realm\"'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">'HTTP/1.0 401 Unauthorized'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'401 Unauthorized'</span>.<span class=\"string\">'&lt;br&gt; &lt;button onclick=\"window.location.reload();\"&gt;Login Again&lt;/button&gt;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面是你的业务代码</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/assets/images/20170821120459.png\" alt=\"example-pic\"></p>\n<p>这样就会弹出一个登陆框，输入用户名：<code>James Bond</code> 密码：<code>007</code> 登陆吧！</p>\n<p>成功了没，哈哈，大家觉得是不是很好玩~</p>\n"},{"layout":"post","title":"九月，加油！","date":"2017-09-06T02:35:56.000Z","author":"Heropoo","excerpt":"不知不觉这一年已经过了大半。九月了，加油！","_content":"\n![example-pic](/assets/images/IMG_20170906_101345.png)\n\n不知不觉这一年已经过了大半。九月了，加油！","source":"_posts/2017-09-06-九月，加油.md","raw":"---\nlayout: post\ntitle:  \"九月，加油！\"\ndate:   2017-09-06 10:35:56\nauthor: \"Heropoo\"\ncategories: \n    - 岁月静好\ntags:\n    - 岁月静好\nexcerpt: \"不知不觉这一年已经过了大半。九月了，加油！\"\n---\n\n![example-pic](/assets/images/IMG_20170906_101345.png)\n\n不知不觉这一年已经过了大半。九月了，加油！","slug":"2017-09-06-九月，加油","published":1,"updated":"2019-11-01T02:16:34.408Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbu0005sm4w1uaz4lcr","content":"<p><img src=\"/assets/images/IMG_20170906_101345.png\" alt=\"example-pic\"></p>\n<p>不知不觉这一年已经过了大半。九月了，加油！</p>\n","site":{"data":{}},"more":"<p><img src=\"/assets/images/IMG_20170906_101345.png\" alt=\"example-pic\"></p>\n<p>不知不觉这一年已经过了大半。九月了，加油！</p>\n"},{"layout":"post","title":"一个百度地图的常用使用示例","date":"2017-09-07T12:07:01.000Z","author":"Heropoo","excerpt":"今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁","_content":"今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁\n\n效果如图：\n\n![example-pic](/assets/images/20170907200341.png)\n\n先说说需求吧：\n> 1. 打开地图，自动**定位到当前所在位置**，并在地图上添加一个**可拖拽**的标注（marker） \n> 2. 用户可以拖拽标注选择地图上的位置，同时标注的**经纬度**显示在input框中（其实这个是为了看效果，一般都用隐藏域），标注的**当前地址**显示在地址的输入框中\n> 3. 用户输入地址之后自动调用百度地图的API，找到输入地址对应到地图的点并移动标注到此。当然也包括显示经纬度。\n\nHTML页面部分是这样子，使用bootstrap3的样式\n```php\n<div class=\"form\">\n    <div class=\"form-group\">\n        <label class=\"col-lg-2 col-sm-2 control-label\">地址</label>\n        <div class=\"col-lg-10\">\n            <input type=\"text\" class=\"form-control pwd-input\" name=\"address\" id=\"address\" value=\"<?php echo !empty($info['address']) ? $info['address'] : '';?>\" placeholder=\"请输入地址\">\n            <p class=\"help-block\"></p>\n        </div>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"col-lg-2 col-sm-2 control-label\">选择位置</label>\n        <div class=\"col-lg-10\">\n            <div class=\"clearfix\">\n                <label class=\"control-label pull-left\" style=\"margin-right: 5px;\">经度</label><input type=\"text\" name=\"lng\" id=\"lng\" value=\"<?php echo !empty($info['lng']) ? $info['lng'] : '';?>\" class=\"form-control pull-left\" style=\"width: 120px;margin-right: 15px;\">\n                <label class=\"control-label pull-left\" style=\"margin-right: 5px;\">维度</label><input type=\"text\" name=\"lat\" id=\"lat\" value=\"<?php echo !empty($info['lat']) ? $info['lat'] : '';?>\" class=\"form-control pull-left\" style=\"width: 120px;\">\n            </div>\n            <br>\n            <div id=\"l-map\" style=\"width: 600px;height: 400px;\"></div>\n        </div>\n    </div>\n\n</div>\n```\n\n重点是js：\n```javascript\n//经纬度\nvar lat = '<?php echo !empty($info['lat']) ? $info['lat'] : '';?>';\nvar lng = '<?php echo !empty($info['lng']) ? $info['lng'] : '';?>';\n\n// 百度地图API功能\nvar map = new BMap.Map(\"l-map\");    //new个地图出来\nvar point;\nvar marker;\nif(lat && lng){\n    point = new BMap.Point(lng,lat);    //new个点\n    marker = new BMap.Marker(point);    //new个标注\n    marker.enableDragging();           // 可拖拽\n    map.addOverlay(marker);             // 将标注添加到地图中\n    getPosition(marker);\n}else{\n    point = new BMap.Point(107.475903, 31.214995);\n    //map.addControl(new BMap.GeolocationControl());  //定位\n    map.addControl(new BMap.NavigationControl());  \n    var geolocation = new BMap.Geolocation();   //获取当前位置\n    geolocation.getCurrentPosition(function(r){\n        if(this.getStatus() == BMAP_STATUS_SUCCESS){\n            marker = new BMap.Marker(r.point);\n            marker.enableDragging();           // 可拖拽\n            map.addOverlay(marker);\n            map.panTo(r.point);\n            //console.log('您的位置：'+r.point.lng+','+r.point.lat);\n            getPosition(marker);\n        } else {\n            marker = new BMap.Marker(point);\n            marker.enableDragging();           // 可拖拽\n            map.addOverlay(marker);             // 将标注添加到地图中\n            getPosition(marker);\n        }\n    },{enableHighAccuracy: true});\n}\n\nmap.centerAndZoom(point, 12);\n\nvar gc = new BMap.Geocoder();//地址解析类\n\n//地址输入框失去焦点时搜索输入的位置\n$(\"#address\").blur(function(){\n    var address = $(this).val();\n    parseAddress(address, '上海市');\n});\n\n//解析地址\nfunction parseAddress(address, city){\n    gc.getPoint(address, function(point){\n        console.log(point);\n        if(point){\n            //放大地图 之前zoom是12\n            map.setZoom(15);\n            // console.log(marker);\n            \n            $(\"#lng\").val(point.lng);\n            $(\"#lat\").val(point.lat);\n            \n            //接下来的操作想想应该时移动标注到新的位置，但是好像api没这中操作，只有先把标注从地图上取下来 换个位置再放上去\n            var allOverlay = map.getOverlays(); //获取地图覆盖物\n            //console.log(allOverlay);\n            for(var i = 0;i<allOverlay.length;i++) {\n                var pos = allOverlay[i].getPosition();\n                //删除指定经度的覆盖物\n                if (pos && pos.lng == point.lng && pos.lat == point.lat) {\n                    map.removeOverlay(allOverlay[i]);\n                }\n            }\n            //重设标注的位置\n            marker.setPosition(point);\n            //把标注重新放到地图上\n            map.addOverlay(marker);\n            //移动地图到新位置\n            map.panTo(point);\n        }\n    }, city);\n}\n\nfunction getPosition(marker){\n    //添加标记点击监听\n    marker.addEventListener(\"mouseup\", function(e){\n        gc.getLocation(e.point, function(rs){\n            //console.log(\"地图中心点变更为：\" + rs.lng + \", \" + rs.lat);\n            console.log(rs.point.lat + ',' + rs.point.lng);\n            $(\"#lng\").val(rs.point.lng);\n            $(\"#lat\").val(rs.point.lat);\n            $(\"#address\").val(rs.address);\n        });\n    });\n}\n```\n\n其实基本的操作还挺顺利的，只是在一个地方碰到了坑：**移动标注**\n\n怎么移动呢？翻了百度API没找到，最后也是通过搜素引擎查查查，才找到思路。\n\n原来标注添加标注(marker)添加到地图上是属于覆盖物(Overlay)。想移动就换个思路，把这个覆盖物移除，然后重新给标注赋予新的位置属性，然后重新添加到地图上。\n\n(。・∀・)ノ 这下搞定啦~ 赶紧关机下班，庆祝一下 🎉\n\n","source":"_posts/2017-09-07-一个百度地图的常用使用示例.md","raw":"---\nlayout: post\ntitle:  \"一个百度地图的常用使用示例\"\ndate:   2017-09-07 20:07:01\nauthor: \"Heropoo\"\ncategories: \n    - JavaScript\ntags:\n    - JavaScript \n    - 百度地图\nexcerpt: \"今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁\"\n---\n今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁\n\n效果如图：\n\n![example-pic](/assets/images/20170907200341.png)\n\n先说说需求吧：\n> 1. 打开地图，自动**定位到当前所在位置**，并在地图上添加一个**可拖拽**的标注（marker） \n> 2. 用户可以拖拽标注选择地图上的位置，同时标注的**经纬度**显示在input框中（其实这个是为了看效果，一般都用隐藏域），标注的**当前地址**显示在地址的输入框中\n> 3. 用户输入地址之后自动调用百度地图的API，找到输入地址对应到地图的点并移动标注到此。当然也包括显示经纬度。\n\nHTML页面部分是这样子，使用bootstrap3的样式\n```php\n<div class=\"form\">\n    <div class=\"form-group\">\n        <label class=\"col-lg-2 col-sm-2 control-label\">地址</label>\n        <div class=\"col-lg-10\">\n            <input type=\"text\" class=\"form-control pwd-input\" name=\"address\" id=\"address\" value=\"<?php echo !empty($info['address']) ? $info['address'] : '';?>\" placeholder=\"请输入地址\">\n            <p class=\"help-block\"></p>\n        </div>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"col-lg-2 col-sm-2 control-label\">选择位置</label>\n        <div class=\"col-lg-10\">\n            <div class=\"clearfix\">\n                <label class=\"control-label pull-left\" style=\"margin-right: 5px;\">经度</label><input type=\"text\" name=\"lng\" id=\"lng\" value=\"<?php echo !empty($info['lng']) ? $info['lng'] : '';?>\" class=\"form-control pull-left\" style=\"width: 120px;margin-right: 15px;\">\n                <label class=\"control-label pull-left\" style=\"margin-right: 5px;\">维度</label><input type=\"text\" name=\"lat\" id=\"lat\" value=\"<?php echo !empty($info['lat']) ? $info['lat'] : '';?>\" class=\"form-control pull-left\" style=\"width: 120px;\">\n            </div>\n            <br>\n            <div id=\"l-map\" style=\"width: 600px;height: 400px;\"></div>\n        </div>\n    </div>\n\n</div>\n```\n\n重点是js：\n```javascript\n//经纬度\nvar lat = '<?php echo !empty($info['lat']) ? $info['lat'] : '';?>';\nvar lng = '<?php echo !empty($info['lng']) ? $info['lng'] : '';?>';\n\n// 百度地图API功能\nvar map = new BMap.Map(\"l-map\");    //new个地图出来\nvar point;\nvar marker;\nif(lat && lng){\n    point = new BMap.Point(lng,lat);    //new个点\n    marker = new BMap.Marker(point);    //new个标注\n    marker.enableDragging();           // 可拖拽\n    map.addOverlay(marker);             // 将标注添加到地图中\n    getPosition(marker);\n}else{\n    point = new BMap.Point(107.475903, 31.214995);\n    //map.addControl(new BMap.GeolocationControl());  //定位\n    map.addControl(new BMap.NavigationControl());  \n    var geolocation = new BMap.Geolocation();   //获取当前位置\n    geolocation.getCurrentPosition(function(r){\n        if(this.getStatus() == BMAP_STATUS_SUCCESS){\n            marker = new BMap.Marker(r.point);\n            marker.enableDragging();           // 可拖拽\n            map.addOverlay(marker);\n            map.panTo(r.point);\n            //console.log('您的位置：'+r.point.lng+','+r.point.lat);\n            getPosition(marker);\n        } else {\n            marker = new BMap.Marker(point);\n            marker.enableDragging();           // 可拖拽\n            map.addOverlay(marker);             // 将标注添加到地图中\n            getPosition(marker);\n        }\n    },{enableHighAccuracy: true});\n}\n\nmap.centerAndZoom(point, 12);\n\nvar gc = new BMap.Geocoder();//地址解析类\n\n//地址输入框失去焦点时搜索输入的位置\n$(\"#address\").blur(function(){\n    var address = $(this).val();\n    parseAddress(address, '上海市');\n});\n\n//解析地址\nfunction parseAddress(address, city){\n    gc.getPoint(address, function(point){\n        console.log(point);\n        if(point){\n            //放大地图 之前zoom是12\n            map.setZoom(15);\n            // console.log(marker);\n            \n            $(\"#lng\").val(point.lng);\n            $(\"#lat\").val(point.lat);\n            \n            //接下来的操作想想应该时移动标注到新的位置，但是好像api没这中操作，只有先把标注从地图上取下来 换个位置再放上去\n            var allOverlay = map.getOverlays(); //获取地图覆盖物\n            //console.log(allOverlay);\n            for(var i = 0;i<allOverlay.length;i++) {\n                var pos = allOverlay[i].getPosition();\n                //删除指定经度的覆盖物\n                if (pos && pos.lng == point.lng && pos.lat == point.lat) {\n                    map.removeOverlay(allOverlay[i]);\n                }\n            }\n            //重设标注的位置\n            marker.setPosition(point);\n            //把标注重新放到地图上\n            map.addOverlay(marker);\n            //移动地图到新位置\n            map.panTo(point);\n        }\n    }, city);\n}\n\nfunction getPosition(marker){\n    //添加标记点击监听\n    marker.addEventListener(\"mouseup\", function(e){\n        gc.getLocation(e.point, function(rs){\n            //console.log(\"地图中心点变更为：\" + rs.lng + \", \" + rs.lat);\n            console.log(rs.point.lat + ',' + rs.point.lng);\n            $(\"#lng\").val(rs.point.lng);\n            $(\"#lat\").val(rs.point.lat);\n            $(\"#address\").val(rs.address);\n        });\n    });\n}\n```\n\n其实基本的操作还挺顺利的，只是在一个地方碰到了坑：**移动标注**\n\n怎么移动呢？翻了百度API没找到，最后也是通过搜素引擎查查查，才找到思路。\n\n原来标注添加标注(marker)添加到地图上是属于覆盖物(Overlay)。想移动就换个思路，把这个覆盖物移除，然后重新给标注赋予新的位置属性，然后重新添加到地图上。\n\n(。・∀・)ノ 这下搞定啦~ 赶紧关机下班，庆祝一下 🎉\n\n","slug":"2017-09-07-一个百度地图的常用使用示例","published":1,"updated":"2019-11-01T02:16:34.408Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbv0006sm4whbta8bx2","content":"<p>今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁</p>\n<p>效果如图：</p>\n<p><img src=\"/assets/images/20170907200341.png\" alt=\"example-pic\"></p>\n<p>先说说需求吧：</p>\n<blockquote>\n<ol>\n<li>打开地图，自动<strong>定位到当前所在位置</strong>，并在地图上添加一个<strong>可拖拽</strong>的标注（marker） </li>\n<li>用户可以拖拽标注选择地图上的位置，同时标注的<strong>经纬度</strong>显示在input框中（其实这个是为了看效果，一般都用隐藏域），标注的<strong>当前地址</strong>显示在地址的输入框中</li>\n<li>用户输入地址之后自动调用百度地图的API，找到输入地址对应到地图的点并移动标注到此。当然也包括显示经纬度。</li>\n</ol>\n</blockquote>\n<p>HTML页面部分是这样子，使用bootstrap3的样式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=\"form\"&gt;</span><br><span class=\"line\">    &lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">        &lt;label class=\"col-lg-2 col-sm-2 control-label\"&gt;地址&lt;/label&gt;</span><br><span class=\"line\">        &lt;div class=\"col-lg-10\"&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" class=\"form-control pwd-input\" name=\"address\" id=\"address\" value=\"&lt;?php echo !empty($info['address']) ? $info['address'] : '';?&gt;\" placeholder=\"请输入地址\"&gt;</span><br><span class=\"line\">            &lt;p class=\"help-block\"&gt;&lt;/p&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">        &lt;label class=\"col-lg-2 col-sm-2 control-label\"&gt;选择位置&lt;/label&gt;</span><br><span class=\"line\">        &lt;div class=\"col-lg-10\"&gt;</span><br><span class=\"line\">            &lt;div class=\"clearfix\"&gt;</span><br><span class=\"line\">                &lt;label class=\"control-label pull-left\" style=\"margin-right: 5px;\"&gt;经度&lt;/label&gt;&lt;input type=\"text\" name=\"lng\" id=\"lng\" value=\"&lt;?php echo !empty($info['lng']) ? $info['lng'] : '';?&gt;\" class=\"form-control pull-left\" style=\"width: 120px;margin-right: 15px;\"&gt;</span><br><span class=\"line\">                &lt;label class=\"control-label pull-left\" style=\"margin-right: 5px;\"&gt;维度&lt;/label&gt;&lt;input type=\"text\" name=\"lat\" id=\"lat\" value=\"&lt;?php echo !empty($info['lat']) ? $info['lat'] : '';?&gt;\" class=\"form-control pull-left\" style=\"width: 120px;\"&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;br&gt;</span><br><span class=\"line\">            &lt;div id=<span class=\"string\">\"l-map\"</span> style=<span class=\"string\">\"width: 600px;height: 400px;\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>重点是js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经纬度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lat = <span class=\"string\">'&lt;?php echo !empty($info['</span>lat<span class=\"string\">']) ? $info['</span>lat<span class=\"string\">'] : '</span><span class=\"string\">';?&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lng = <span class=\"string\">'&lt;?php echo !empty($info['</span>lng<span class=\"string\">']) ? $info['</span>lng<span class=\"string\">'] : '</span><span class=\"string\">';?&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 百度地图API功能</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"l-map\"</span>);    <span class=\"comment\">//new个地图出来</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point;</span><br><span class=\"line\"><span class=\"keyword\">var</span> marker;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(lat &amp;&amp; lng)&#123;</span><br><span class=\"line\">    point = <span class=\"keyword\">new</span> BMap.Point(lng,lat);    <span class=\"comment\">//new个点</span></span><br><span class=\"line\">    marker = <span class=\"keyword\">new</span> BMap.Marker(point);    <span class=\"comment\">//new个标注</span></span><br><span class=\"line\">    marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">    map.addOverlay(marker);             <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\">    getPosition(marker);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"number\">107.475903</span>, <span class=\"number\">31.214995</span>);</span><br><span class=\"line\">    <span class=\"comment\">//map.addControl(new BMap.GeolocationControl());  //定位</span></span><br><span class=\"line\">    map.addControl(<span class=\"keyword\">new</span> BMap.NavigationControl());  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> geolocation = <span class=\"keyword\">new</span> BMap.Geolocation();   <span class=\"comment\">//获取当前位置</span></span><br><span class=\"line\">    geolocation.getCurrentPosition(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span><br><span class=\"line\">            marker = <span class=\"keyword\">new</span> BMap.Marker(r.point);</span><br><span class=\"line\">            marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">            map.addOverlay(marker);</span><br><span class=\"line\">            map.panTo(r.point);</span><br><span class=\"line\">            <span class=\"comment\">//console.log('您的位置：'+r.point.lng+','+r.point.lat);</span></span><br><span class=\"line\">            getPosition(marker);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            marker = <span class=\"keyword\">new</span> BMap.Marker(point);</span><br><span class=\"line\">            marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">            map.addOverlay(marker);             <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\">            getPosition(marker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,&#123;<span class=\"attr\">enableHighAccuracy</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.centerAndZoom(point, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gc = <span class=\"keyword\">new</span> BMap.Geocoder();<span class=\"comment\">//地址解析类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地址输入框失去焦点时搜索输入的位置</span></span><br><span class=\"line\">$(<span class=\"string\">\"#address\"</span>).blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> address = $(<span class=\"keyword\">this</span>).val();</span><br><span class=\"line\">    parseAddress(address, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseAddress</span>(<span class=\"params\">address, city</span>)</span>&#123;</span><br><span class=\"line\">    gc.getPoint(address, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">point</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(point);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(point)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//放大地图 之前zoom是12</span></span><br><span class=\"line\">            map.setZoom(<span class=\"number\">15</span>);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(marker);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            $(<span class=\"string\">\"#lng\"</span>).val(point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lat\"</span>).val(point.lat);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//接下来的操作想想应该时移动标注到新的位置，但是好像api没这中操作，只有先把标注从地图上取下来 换个位置再放上去</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> allOverlay = map.getOverlays(); <span class=\"comment\">//获取地图覆盖物</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(allOverlay);</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;allOverlay.length;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pos = allOverlay[i].getPosition();</span><br><span class=\"line\">                <span class=\"comment\">//删除指定经度的覆盖物</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pos &amp;&amp; pos.lng == point.lng &amp;&amp; pos.lat == point.lat) &#123;</span><br><span class=\"line\">                    map.removeOverlay(allOverlay[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重设标注的位置</span></span><br><span class=\"line\">            marker.setPosition(point);</span><br><span class=\"line\">            <span class=\"comment\">//把标注重新放到地图上</span></span><br><span class=\"line\">            map.addOverlay(marker);</span><br><span class=\"line\">            <span class=\"comment\">//移动地图到新位置</span></span><br><span class=\"line\">            map.panTo(point);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, city);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosition</span>(<span class=\"params\">marker</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加标记点击监听</span></span><br><span class=\"line\">    marker.addEventListener(<span class=\"string\">\"mouseup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        gc.getLocation(e.point, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rs</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//console.log(\"地图中心点变更为：\" + rs.lng + \", \" + rs.lat);</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(rs.point.lat + <span class=\"string\">','</span> + rs.point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lng\"</span>).val(rs.point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lat\"</span>).val(rs.point.lat);</span><br><span class=\"line\">            $(<span class=\"string\">\"#address\"</span>).val(rs.address);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实基本的操作还挺顺利的，只是在一个地方碰到了坑：<strong>移动标注</strong></p>\n<p>怎么移动呢？翻了百度API没找到，最后也是通过搜素引擎查查查，才找到思路。</p>\n<p>原来标注添加标注(marker)添加到地图上是属于覆盖物(Overlay)。想移动就换个思路，把这个覆盖物移除，然后重新给标注赋予新的位置属性，然后重新添加到地图上。</p>\n<p>(。・∀・)ノ 这下搞定啦~ 赶紧关机下班，庆祝一下 🎉</p>\n","site":{"data":{}},"more":"<p>今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁</p>\n<p>效果如图：</p>\n<p><img src=\"/assets/images/20170907200341.png\" alt=\"example-pic\"></p>\n<p>先说说需求吧：</p>\n<blockquote>\n<ol>\n<li>打开地图，自动<strong>定位到当前所在位置</strong>，并在地图上添加一个<strong>可拖拽</strong>的标注（marker） </li>\n<li>用户可以拖拽标注选择地图上的位置，同时标注的<strong>经纬度</strong>显示在input框中（其实这个是为了看效果，一般都用隐藏域），标注的<strong>当前地址</strong>显示在地址的输入框中</li>\n<li>用户输入地址之后自动调用百度地图的API，找到输入地址对应到地图的点并移动标注到此。当然也包括显示经纬度。</li>\n</ol>\n</blockquote>\n<p>HTML页面部分是这样子，使用bootstrap3的样式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=\"form\"&gt;</span><br><span class=\"line\">    &lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">        &lt;label class=\"col-lg-2 col-sm-2 control-label\"&gt;地址&lt;/label&gt;</span><br><span class=\"line\">        &lt;div class=\"col-lg-10\"&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" class=\"form-control pwd-input\" name=\"address\" id=\"address\" value=\"&lt;?php echo !empty($info['address']) ? $info['address'] : '';?&gt;\" placeholder=\"请输入地址\"&gt;</span><br><span class=\"line\">            &lt;p class=\"help-block\"&gt;&lt;/p&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">        &lt;label class=\"col-lg-2 col-sm-2 control-label\"&gt;选择位置&lt;/label&gt;</span><br><span class=\"line\">        &lt;div class=\"col-lg-10\"&gt;</span><br><span class=\"line\">            &lt;div class=\"clearfix\"&gt;</span><br><span class=\"line\">                &lt;label class=\"control-label pull-left\" style=\"margin-right: 5px;\"&gt;经度&lt;/label&gt;&lt;input type=\"text\" name=\"lng\" id=\"lng\" value=\"&lt;?php echo !empty($info['lng']) ? $info['lng'] : '';?&gt;\" class=\"form-control pull-left\" style=\"width: 120px;margin-right: 15px;\"&gt;</span><br><span class=\"line\">                &lt;label class=\"control-label pull-left\" style=\"margin-right: 5px;\"&gt;维度&lt;/label&gt;&lt;input type=\"text\" name=\"lat\" id=\"lat\" value=\"&lt;?php echo !empty($info['lat']) ? $info['lat'] : '';?&gt;\" class=\"form-control pull-left\" style=\"width: 120px;\"&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;br&gt;</span><br><span class=\"line\">            &lt;div id=<span class=\"string\">\"l-map\"</span> style=<span class=\"string\">\"width: 600px;height: 400px;\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>重点是js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经纬度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lat = <span class=\"string\">'&lt;?php echo !empty($info['</span>lat<span class=\"string\">']) ? $info['</span>lat<span class=\"string\">'] : '</span><span class=\"string\">';?&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lng = <span class=\"string\">'&lt;?php echo !empty($info['</span>lng<span class=\"string\">']) ? $info['</span>lng<span class=\"string\">'] : '</span><span class=\"string\">';?&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 百度地图API功能</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"l-map\"</span>);    <span class=\"comment\">//new个地图出来</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point;</span><br><span class=\"line\"><span class=\"keyword\">var</span> marker;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(lat &amp;&amp; lng)&#123;</span><br><span class=\"line\">    point = <span class=\"keyword\">new</span> BMap.Point(lng,lat);    <span class=\"comment\">//new个点</span></span><br><span class=\"line\">    marker = <span class=\"keyword\">new</span> BMap.Marker(point);    <span class=\"comment\">//new个标注</span></span><br><span class=\"line\">    marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">    map.addOverlay(marker);             <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\">    getPosition(marker);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"number\">107.475903</span>, <span class=\"number\">31.214995</span>);</span><br><span class=\"line\">    <span class=\"comment\">//map.addControl(new BMap.GeolocationControl());  //定位</span></span><br><span class=\"line\">    map.addControl(<span class=\"keyword\">new</span> BMap.NavigationControl());  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> geolocation = <span class=\"keyword\">new</span> BMap.Geolocation();   <span class=\"comment\">//获取当前位置</span></span><br><span class=\"line\">    geolocation.getCurrentPosition(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span><br><span class=\"line\">            marker = <span class=\"keyword\">new</span> BMap.Marker(r.point);</span><br><span class=\"line\">            marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">            map.addOverlay(marker);</span><br><span class=\"line\">            map.panTo(r.point);</span><br><span class=\"line\">            <span class=\"comment\">//console.log('您的位置：'+r.point.lng+','+r.point.lat);</span></span><br><span class=\"line\">            getPosition(marker);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            marker = <span class=\"keyword\">new</span> BMap.Marker(point);</span><br><span class=\"line\">            marker.enableDragging();           <span class=\"comment\">// 可拖拽</span></span><br><span class=\"line\">            map.addOverlay(marker);             <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\">            getPosition(marker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,&#123;<span class=\"attr\">enableHighAccuracy</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.centerAndZoom(point, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gc = <span class=\"keyword\">new</span> BMap.Geocoder();<span class=\"comment\">//地址解析类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地址输入框失去焦点时搜索输入的位置</span></span><br><span class=\"line\">$(<span class=\"string\">\"#address\"</span>).blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> address = $(<span class=\"keyword\">this</span>).val();</span><br><span class=\"line\">    parseAddress(address, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseAddress</span>(<span class=\"params\">address, city</span>)</span>&#123;</span><br><span class=\"line\">    gc.getPoint(address, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">point</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(point);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(point)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//放大地图 之前zoom是12</span></span><br><span class=\"line\">            map.setZoom(<span class=\"number\">15</span>);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(marker);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            $(<span class=\"string\">\"#lng\"</span>).val(point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lat\"</span>).val(point.lat);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//接下来的操作想想应该时移动标注到新的位置，但是好像api没这中操作，只有先把标注从地图上取下来 换个位置再放上去</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> allOverlay = map.getOverlays(); <span class=\"comment\">//获取地图覆盖物</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(allOverlay);</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;allOverlay.length;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pos = allOverlay[i].getPosition();</span><br><span class=\"line\">                <span class=\"comment\">//删除指定经度的覆盖物</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pos &amp;&amp; pos.lng == point.lng &amp;&amp; pos.lat == point.lat) &#123;</span><br><span class=\"line\">                    map.removeOverlay(allOverlay[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重设标注的位置</span></span><br><span class=\"line\">            marker.setPosition(point);</span><br><span class=\"line\">            <span class=\"comment\">//把标注重新放到地图上</span></span><br><span class=\"line\">            map.addOverlay(marker);</span><br><span class=\"line\">            <span class=\"comment\">//移动地图到新位置</span></span><br><span class=\"line\">            map.panTo(point);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, city);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosition</span>(<span class=\"params\">marker</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加标记点击监听</span></span><br><span class=\"line\">    marker.addEventListener(<span class=\"string\">\"mouseup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        gc.getLocation(e.point, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rs</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//console.log(\"地图中心点变更为：\" + rs.lng + \", \" + rs.lat);</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(rs.point.lat + <span class=\"string\">','</span> + rs.point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lng\"</span>).val(rs.point.lng);</span><br><span class=\"line\">            $(<span class=\"string\">\"#lat\"</span>).val(rs.point.lat);</span><br><span class=\"line\">            $(<span class=\"string\">\"#address\"</span>).val(rs.address);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实基本的操作还挺顺利的，只是在一个地方碰到了坑：<strong>移动标注</strong></p>\n<p>怎么移动呢？翻了百度API没找到，最后也是通过搜素引擎查查查，才找到思路。</p>\n<p>原来标注添加标注(marker)添加到地图上是属于覆盖物(Overlay)。想移动就换个思路，把这个覆盖物移除，然后重新给标注赋予新的位置属性，然后重新添加到地图上。</p>\n<p>(。・∀・)ノ 这下搞定啦~ 赶紧关机下班，庆祝一下 🎉</p>\n"},{"layout":"post","title":"自己实现AJAX异步上传文件","date":"2017-09-09T08:05:20.000Z","author":"Heropoo","excerpt":"在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧","_content":"在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧。\n\n先说说具体需求：\n> 1. 上传文件做到所见所得，就是选择文件之后能立马看到 \n> 2. 可以方便用在用js异步提交的表单中\n\nHTML页面部分是这样子\n```html\n<div>\n    <!-- 图片./images/add_img.png就是一个很大的加号 +  -->\n    <img style=\"cursor: pointer;\" src=\"./images/add_img.png\" alt=\"点击上传\" width=\"100\" title=\"点击上传\" class=\"upload-img\" data-id=\"img\">\n    <input type=\"hidden\" name=\"image\" value=\"\" class=\"upload-img-input\" data-id=\"img\">\n    <input style=\"display: none\" type=\"file\" accept=\"image/gif,image/jpeg,image/jpg,image/png,image/bmp\" name=\"file\" id=\"file_img\" data-id=\"img\" onchange=\"upload_image(this);\">\n</div>\n```\n\n在input:file的accept属性中定义可以上传的文件格式（MIME 类型）在这里我们列出常用的图片类型：image/gif,image/jpeg,image/jpg,image/png,image/bmp\n\n其实在这大家会说后缀是`.jpg`和`.jpeg`的图片的mime type不都是`image/jpeg`吗？为什么还要加个`image/jpg`?\n\n没错，是这样如果你只写`image/jpeg`用谷歌浏览器是没问题的。但是在微信浏览器，QQ浏览器中就不行了，后来找不到问题，尝试了好多次才发现这个问题。没办法，国产浏览器不按标准造的原因 ╮(╯▽╰)╭\n\n其他文件格式大家看这里  [w3school](http://www.w3school.com.cn/media/media_mimeref.asp) \n\n重点是js：\n```javascript\n//点击图片的时候 触发隐藏的input:file的点击事件\n$(\".upload-img\").click(function(){\n    var id = $(this).data('id');\n    var file = document.getElementById('file_' + id);\n    file.click();\n});\nfunction upload_image(pic_file) {\n    var id = $(pic_file).data('id');\n    var input = $(\"input.upload-img-input[data-id=\"+id+\"]\");    //找到相应的隐藏域\n    var pic = $(\"img.upload-img[data-id=\"+id+\"]\");              //找到相应的预览图片\n\n    var file = pic_file.files[0];\n    if (file.size > 2 * 1024 * 1024) {   //设置限制文件大小 不大于2MB\n        alert('上传文件不能大于2M!');\n        return false;\n    }\n\n    var fd = new FormData();    //使用formData对象\n    fd.append(\"pic_file\", file);\n    //fd.append(\"name\", name);  //可以添加其他字段，比如有些框为了安全加的csrf_token\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.open(\"POST\", 'upload_file.php');    //这里是后端处理的地址\n    xhr.onload = function () {\n        if (xhr.status == 200) {\n            var obj = eval('(' + xhr.responseText + ')');   //把json字符串转换成js对象\n            if (obj.ret == 200) {   //上传成功\n                var pic_url = obj.data.url; //显示预览图\n                input.val(pic_url);         //把地址放到隐藏域\n                pic.attr('src', pic_url);\n            } else {\n                alert(obj.msg);\n            }\n        } else {\n            alert('上传失败，请稍候再试');\n        }\n    };\n    xhr.send(fd);\n}\n```\n\n我们服务端上传返回的json格式是这样\n```json\n{\n    \"ret\": 200,\n    \"msg\": \"ok\",\n    \"data\": {\n        \"url\": \"你的图片url地址\"\n    }\n}\n```\n\n\n","source":"_posts/2017-09-09-自己实现AJAX异步上传文件.md","raw":"---\nlayout: post\ntitle:  \"自己实现AJAX异步上传文件\"\ndate:   2017-09-09 16:05:20\nauthor: \"Heropoo\"\ncategories: \n    - JavaScript\n    - HTML5\ntags:\n    - JavaScript\n    - HTML5\n    - AJAX  \nexcerpt: \"在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧\"\n---\n在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧。\n\n先说说具体需求：\n> 1. 上传文件做到所见所得，就是选择文件之后能立马看到 \n> 2. 可以方便用在用js异步提交的表单中\n\nHTML页面部分是这样子\n```html\n<div>\n    <!-- 图片./images/add_img.png就是一个很大的加号 +  -->\n    <img style=\"cursor: pointer;\" src=\"./images/add_img.png\" alt=\"点击上传\" width=\"100\" title=\"点击上传\" class=\"upload-img\" data-id=\"img\">\n    <input type=\"hidden\" name=\"image\" value=\"\" class=\"upload-img-input\" data-id=\"img\">\n    <input style=\"display: none\" type=\"file\" accept=\"image/gif,image/jpeg,image/jpg,image/png,image/bmp\" name=\"file\" id=\"file_img\" data-id=\"img\" onchange=\"upload_image(this);\">\n</div>\n```\n\n在input:file的accept属性中定义可以上传的文件格式（MIME 类型）在这里我们列出常用的图片类型：image/gif,image/jpeg,image/jpg,image/png,image/bmp\n\n其实在这大家会说后缀是`.jpg`和`.jpeg`的图片的mime type不都是`image/jpeg`吗？为什么还要加个`image/jpg`?\n\n没错，是这样如果你只写`image/jpeg`用谷歌浏览器是没问题的。但是在微信浏览器，QQ浏览器中就不行了，后来找不到问题，尝试了好多次才发现这个问题。没办法，国产浏览器不按标准造的原因 ╮(╯▽╰)╭\n\n其他文件格式大家看这里  [w3school](http://www.w3school.com.cn/media/media_mimeref.asp) \n\n重点是js：\n```javascript\n//点击图片的时候 触发隐藏的input:file的点击事件\n$(\".upload-img\").click(function(){\n    var id = $(this).data('id');\n    var file = document.getElementById('file_' + id);\n    file.click();\n});\nfunction upload_image(pic_file) {\n    var id = $(pic_file).data('id');\n    var input = $(\"input.upload-img-input[data-id=\"+id+\"]\");    //找到相应的隐藏域\n    var pic = $(\"img.upload-img[data-id=\"+id+\"]\");              //找到相应的预览图片\n\n    var file = pic_file.files[0];\n    if (file.size > 2 * 1024 * 1024) {   //设置限制文件大小 不大于2MB\n        alert('上传文件不能大于2M!');\n        return false;\n    }\n\n    var fd = new FormData();    //使用formData对象\n    fd.append(\"pic_file\", file);\n    //fd.append(\"name\", name);  //可以添加其他字段，比如有些框为了安全加的csrf_token\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.open(\"POST\", 'upload_file.php');    //这里是后端处理的地址\n    xhr.onload = function () {\n        if (xhr.status == 200) {\n            var obj = eval('(' + xhr.responseText + ')');   //把json字符串转换成js对象\n            if (obj.ret == 200) {   //上传成功\n                var pic_url = obj.data.url; //显示预览图\n                input.val(pic_url);         //把地址放到隐藏域\n                pic.attr('src', pic_url);\n            } else {\n                alert(obj.msg);\n            }\n        } else {\n            alert('上传失败，请稍候再试');\n        }\n    };\n    xhr.send(fd);\n}\n```\n\n我们服务端上传返回的json格式是这样\n```json\n{\n    \"ret\": 200,\n    \"msg\": \"ok\",\n    \"data\": {\n        \"url\": \"你的图片url地址\"\n    }\n}\n```\n\n\n","slug":"2017-09-09-自己实现AJAX异步上传文件","published":1,"updated":"2019-11-01T02:16:34.408Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsbx000asm4w0smz4itp","content":"<p>在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧。</p>\n<p>先说说具体需求：</p>\n<blockquote>\n<ol>\n<li>上传文件做到所见所得，就是选择文件之后能立马看到 </li>\n<li>可以方便用在用js异步提交的表单中</li>\n</ol>\n</blockquote>\n<p>HTML页面部分是这样子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 图片./images/add_img.png就是一个很大的加号 +  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor: pointer;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/add_img.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"点击上传\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"点击上传\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload-img\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload-img-input\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif,image/jpeg,image/jpg,image/png,image/bmp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file_img\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"upload_image(this);\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在input:file的accept属性中定义可以上传的文件格式（MIME 类型）在这里我们列出常用的图片类型：image/gif,image/jpeg,image/jpg,image/png,image/bmp</p>\n<p>其实在这大家会说后缀是<code>.jpg</code>和<code>.jpeg</code>的图片的mime type不都是<code>image/jpeg</code>吗？为什么还要加个<code>image/jpg</code>?</p>\n<p>没错，是这样如果你只写<code>image/jpeg</code>用谷歌浏览器是没问题的。但是在微信浏览器，QQ浏览器中就不行了，后来找不到问题，尝试了好多次才发现这个问题。没办法，国产浏览器不按标准造的原因 ╮(╯▽╰)╭</p>\n<p>其他文件格式大家看这里  <a href=\"http://www.w3school.com.cn/media/media_mimeref.asp\" target=\"_blank\" rel=\"noopener\">w3school</a> </p>\n<p>重点是js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击图片的时候 触发隐藏的input:file的点击事件</span></span><br><span class=\"line\">$(<span class=\"string\">\".upload-img\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file_'</span> + id);</span><br><span class=\"line\">    file.click();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload_image</span>(<span class=\"params\">pic_file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $(pic_file).data(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = $(<span class=\"string\">\"input.upload-img-input[data-id=\"</span>+id+<span class=\"string\">\"]\"</span>);    <span class=\"comment\">//找到相应的隐藏域</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pic = $(<span class=\"string\">\"img.upload-img[data-id=\"</span>+id+<span class=\"string\">\"]\"</span>);              <span class=\"comment\">//找到相应的预览图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = pic_file.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.size &gt; <span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;   <span class=\"comment\">//设置限制文件大小 不大于2MB</span></span><br><span class=\"line\">        alert(<span class=\"string\">'上传文件不能大于2M!'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> FormData();    <span class=\"comment\">//使用formData对象</span></span><br><span class=\"line\">    fd.append(<span class=\"string\">\"pic_file\"</span>, file);</span><br><span class=\"line\">    <span class=\"comment\">//fd.append(\"name\", name);  //可以添加其他字段，比如有些框为了安全加的csrf_token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">'upload_file.php'</span>);    <span class=\"comment\">//这里是后端处理的地址</span></span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + xhr.responseText + <span class=\"string\">')'</span>);   <span class=\"comment\">//把json字符串转换成js对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.ret == <span class=\"number\">200</span>) &#123;   <span class=\"comment\">//上传成功</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> pic_url = obj.data.url; <span class=\"comment\">//显示预览图</span></span><br><span class=\"line\">                input.val(pic_url);         <span class=\"comment\">//把地址放到隐藏域</span></span><br><span class=\"line\">                pic.attr(<span class=\"string\">'src'</span>, pic_url);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                alert(obj.msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'上传失败，请稍候再试'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们服务端上传返回的json格式是这样</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ret\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"你的图片url地址\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"more":"<p>在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧。</p>\n<p>先说说具体需求：</p>\n<blockquote>\n<ol>\n<li>上传文件做到所见所得，就是选择文件之后能立马看到 </li>\n<li>可以方便用在用js异步提交的表单中</li>\n</ol>\n</blockquote>\n<p>HTML页面部分是这样子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 图片./images/add_img.png就是一个很大的加号 +  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor: pointer;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/add_img.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"点击上传\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"点击上传\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload-img\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload-img-input\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif,image/jpeg,image/jpg,image/png,image/bmp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file_img\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"upload_image(this);\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在input:file的accept属性中定义可以上传的文件格式（MIME 类型）在这里我们列出常用的图片类型：image/gif,image/jpeg,image/jpg,image/png,image/bmp</p>\n<p>其实在这大家会说后缀是<code>.jpg</code>和<code>.jpeg</code>的图片的mime type不都是<code>image/jpeg</code>吗？为什么还要加个<code>image/jpg</code>?</p>\n<p>没错，是这样如果你只写<code>image/jpeg</code>用谷歌浏览器是没问题的。但是在微信浏览器，QQ浏览器中就不行了，后来找不到问题，尝试了好多次才发现这个问题。没办法，国产浏览器不按标准造的原因 ╮(╯▽╰)╭</p>\n<p>其他文件格式大家看这里  <a href=\"http://www.w3school.com.cn/media/media_mimeref.asp\" target=\"_blank\" rel=\"noopener\">w3school</a> </p>\n<p>重点是js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击图片的时候 触发隐藏的input:file的点击事件</span></span><br><span class=\"line\">$(<span class=\"string\">\".upload-img\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file_'</span> + id);</span><br><span class=\"line\">    file.click();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload_image</span>(<span class=\"params\">pic_file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $(pic_file).data(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = $(<span class=\"string\">\"input.upload-img-input[data-id=\"</span>+id+<span class=\"string\">\"]\"</span>);    <span class=\"comment\">//找到相应的隐藏域</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pic = $(<span class=\"string\">\"img.upload-img[data-id=\"</span>+id+<span class=\"string\">\"]\"</span>);              <span class=\"comment\">//找到相应的预览图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = pic_file.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.size &gt; <span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;   <span class=\"comment\">//设置限制文件大小 不大于2MB</span></span><br><span class=\"line\">        alert(<span class=\"string\">'上传文件不能大于2M!'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> FormData();    <span class=\"comment\">//使用formData对象</span></span><br><span class=\"line\">    fd.append(<span class=\"string\">\"pic_file\"</span>, file);</span><br><span class=\"line\">    <span class=\"comment\">//fd.append(\"name\", name);  //可以添加其他字段，比如有些框为了安全加的csrf_token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">'upload_file.php'</span>);    <span class=\"comment\">//这里是后端处理的地址</span></span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + xhr.responseText + <span class=\"string\">')'</span>);   <span class=\"comment\">//把json字符串转换成js对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.ret == <span class=\"number\">200</span>) &#123;   <span class=\"comment\">//上传成功</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> pic_url = obj.data.url; <span class=\"comment\">//显示预览图</span></span><br><span class=\"line\">                input.val(pic_url);         <span class=\"comment\">//把地址放到隐藏域</span></span><br><span class=\"line\">                pic.attr(<span class=\"string\">'src'</span>, pic_url);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                alert(obj.msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'上传失败，请稍候再试'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们服务端上传返回的json格式是这样</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ret\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"你的图片url地址\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"layout":"post","title":"EFI模式下安装win10+Archlinux","date":"2017-09-13T14:49:50.000Z","author":"Heropoo","excerpt":"就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜","_content":"就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜 \n\nWin10安装就略过了，我的电脑linux老换，win10始终稳稳的在那躺着，一动不动。。。\n\n因为win10是提前安装好的，而他是使用EFI模式安装的 我们在win10下在硬盘上给咋arch挪出点空间来，几十个GB就行。看你硬盘大小了和心情了。\n\n### 启动liveCD\n用在[官网](https://www.archlinux.org/download/)或者[163](http://mirrors.163.com/archlinux/iso/2017.09.01/)源下载最新的liveCD镜像（比如最新是archlinux-2017.09.01-x86_64.iso），刻录到u盘，我喜欢用[rufs](http://rufus.akeo.ie/)，这个不大于1M的小工具很简单强大我喜欢。 当然了，熟悉linux的同学可以用[dd](https://wiki.archlinux.org/index.php/Core_utilities#dd)命令。\n\n插上u盘，重启到liveCD里面。里面也是个没桌面的shell系统。\n\n### 看Archlinux wiki\n在开始之前最好还是看看[arch的wiki](https://wiki.archlinux.org/index.php/Installation_guide)Installation guide(安装指南)，写的很详细，最好看英文的，中文的翻译有点延迟。\n\n### 联网\n如果你是有线网络，插上网线，启动[dhcpd](https://wiki.archlinux.org/index.php/Dhcpcd)服务（也就是动态获取ip）\n```bash\nsystemctl start dhcpcd\n```\n无线网络用wifi-menu链接\n```bash\nwifi-menu\n```\n看看链接成功了没 查看下ip\n```\nip addr\n```\n如果没成功，或者其他的联网方式，看看[arch的wiki](https://wiki.archlinux.org/index.php/Network_configuration)\n\n其实说到这，再次提醒大家，看[arch的wiki](https://wiki.archlinux.org/)\n\n连上网络了，开工吧!\n\n### 分区：\n```\nfdisk /dev/sda\n```\n进入fdisk之后按`p`，看看现有分区的情况\n这是我的硬盘分区情况，硬盘格式`gpt`\n```\n/dev/sda1        2048     923647    921600   450M Windows 恢复环境\n/dev/sda2      923648    1128447    204800   100M EFI 系统\n/dev/sda3     1128448    1161215     32768    16M Microsoft 保留\n/dev/sda4     1161216  209256750 208095535  99.2G Microsoft 基本数据\n/dev/sda5   209258496  210888703   1630208   796M Windows 恢复环境\n/dev/sda6   210890752  462559542 251668791   120G Microsoft 基本数据\n```\n假如我的硬盘中空闲空间100GB，用fdisk 给这100GB分一分\n\n我的方案是：\n```\n/dev/sda7    /boot           ext4    500MB    #boot启动分区 500MB够用了\n/dev/sda8    swap                        8GB         #交换分区， 我的内存也8GB，我就分一样大小了\n/dev/sda9    /                   ext4                   #剩下的全给 / 根分区\n```\n根据自己的空间大小自行调整。\n\n格式化：\n```\nmkfs.ext4 /dev/sda7\nmkfs.ext4 /dev/sda9\nmkswap /dev/sda8\n```\n### 安装基础系统\n挂载分区：\n```\nmount /dev/sda9 /mnt\nmkdir /mnt/boot\nmount /dev/sda7 /mnt/boot\nmkdir /mnt/boot/EFI\nmount /dev/sda2 /mnt/boot/EFI          #这个EFI分区在分区情况里面能看到我的是sda2\nswapon /dev/sda8\n```\n修改源：\n```\nvim /etc/pacman.d/mirrorlist\n```\n把163，ustc这几个比较好使的中国源复制到文件最上面，到时候下载安装的时候跑的快一点\n\n开始安装：\n```\npacstrap -i /mnt base vim dialog wpa_supplicant     \n```\nbase是基础系统，dialog是上面提到的链接无线网的wifi-menu，wpa_supplicant也是手动链接无线网的包，vim 不解释 \n\n安装完成之后\n\n把分区挂载情况写入fstab中：\n```\ngenfstab -U -p /mnt > /mnt/etc/fstab\n```\n\nchroot进新系统：\n```\narch-chroot /mnt /bin/bash\n```\n\n一些配置：\n```\necho 'my-archlinux' > /etc/hostname     #设置主机名字\nln -sf /usr/share/zoneinfo/Asia/Shanghai   #设置时区\ntimedatectl set-timezone Asia/Shanghai      #也可以用这个设置时区\ntimedatectl set-ntp true        # 设置时间ntp同步网络时间\nvim /etc/locale.gen     # 区域设置 取消英文（en_US.UTF-8）和中文(zh_CN.UTF-8)的注释\nlocale-gen      #生成设置区域设置\necho \"LANG=en_US.UTF-8\" > /etc/locale.conf #设置语言，因为先安装的是没桌面的模式，先用英文，中文会显示成小方块\n```\n 创建初始内存盘[mkinitcpio](https://wiki.archlinux.org/index.php/Mkinitcpio)\n```\nmkinitcpio -p linux  \n```\n设置root密码\n```\npasswd      \n```\n这步忘了，你就进不去系统了，╮(╯▽╰)╭\n\n搞定启动项：\n```\npacman -S grub efibootmgr       #安装grub efibootmgr管理启动项\ngrub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck\npacman -S os-prober     #安装这个包是为了让grub-mkconfig发现win10的启动项\ngrub-mkconfig -o /boot/grub/grub.cfg   #把启动项写到文件配置里 \n```\n如果win10的启动项没有被发现，不要着急，在新的系统安装重启之后，重新执行上面`grub-mkconfig`命令就行了\n\n退出新系统,重启\n```\nexit        #退出\nunmout -R /mnt  #取消挂载磁盘\nreboot   #重启\n```\n\n好了如果一切顺利，重启之后就能看到你的新系统了  (。・∀・)ノ \n\n\n\n\n\n","source":"_posts/2017-09-13-EFI模式下安装win10+Archlinux.md","raw":"---\nlayout: post\ntitle:  \"EFI模式下安装win10+Archlinux\"\ndate:   2017-09-13 22:49:50\nauthor: \"Heropoo\"\ncategories: \n    - Linux\ntags:\n    - Linux\n    - EFI\n    - Archlinux  \nexcerpt: \"就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜\"\n---\n就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜 \n\nWin10安装就略过了，我的电脑linux老换，win10始终稳稳的在那躺着，一动不动。。。\n\n因为win10是提前安装好的，而他是使用EFI模式安装的 我们在win10下在硬盘上给咋arch挪出点空间来，几十个GB就行。看你硬盘大小了和心情了。\n\n### 启动liveCD\n用在[官网](https://www.archlinux.org/download/)或者[163](http://mirrors.163.com/archlinux/iso/2017.09.01/)源下载最新的liveCD镜像（比如最新是archlinux-2017.09.01-x86_64.iso），刻录到u盘，我喜欢用[rufs](http://rufus.akeo.ie/)，这个不大于1M的小工具很简单强大我喜欢。 当然了，熟悉linux的同学可以用[dd](https://wiki.archlinux.org/index.php/Core_utilities#dd)命令。\n\n插上u盘，重启到liveCD里面。里面也是个没桌面的shell系统。\n\n### 看Archlinux wiki\n在开始之前最好还是看看[arch的wiki](https://wiki.archlinux.org/index.php/Installation_guide)Installation guide(安装指南)，写的很详细，最好看英文的，中文的翻译有点延迟。\n\n### 联网\n如果你是有线网络，插上网线，启动[dhcpd](https://wiki.archlinux.org/index.php/Dhcpcd)服务（也就是动态获取ip）\n```bash\nsystemctl start dhcpcd\n```\n无线网络用wifi-menu链接\n```bash\nwifi-menu\n```\n看看链接成功了没 查看下ip\n```\nip addr\n```\n如果没成功，或者其他的联网方式，看看[arch的wiki](https://wiki.archlinux.org/index.php/Network_configuration)\n\n其实说到这，再次提醒大家，看[arch的wiki](https://wiki.archlinux.org/)\n\n连上网络了，开工吧!\n\n### 分区：\n```\nfdisk /dev/sda\n```\n进入fdisk之后按`p`，看看现有分区的情况\n这是我的硬盘分区情况，硬盘格式`gpt`\n```\n/dev/sda1        2048     923647    921600   450M Windows 恢复环境\n/dev/sda2      923648    1128447    204800   100M EFI 系统\n/dev/sda3     1128448    1161215     32768    16M Microsoft 保留\n/dev/sda4     1161216  209256750 208095535  99.2G Microsoft 基本数据\n/dev/sda5   209258496  210888703   1630208   796M Windows 恢复环境\n/dev/sda6   210890752  462559542 251668791   120G Microsoft 基本数据\n```\n假如我的硬盘中空闲空间100GB，用fdisk 给这100GB分一分\n\n我的方案是：\n```\n/dev/sda7    /boot           ext4    500MB    #boot启动分区 500MB够用了\n/dev/sda8    swap                        8GB         #交换分区， 我的内存也8GB，我就分一样大小了\n/dev/sda9    /                   ext4                   #剩下的全给 / 根分区\n```\n根据自己的空间大小自行调整。\n\n格式化：\n```\nmkfs.ext4 /dev/sda7\nmkfs.ext4 /dev/sda9\nmkswap /dev/sda8\n```\n### 安装基础系统\n挂载分区：\n```\nmount /dev/sda9 /mnt\nmkdir /mnt/boot\nmount /dev/sda7 /mnt/boot\nmkdir /mnt/boot/EFI\nmount /dev/sda2 /mnt/boot/EFI          #这个EFI分区在分区情况里面能看到我的是sda2\nswapon /dev/sda8\n```\n修改源：\n```\nvim /etc/pacman.d/mirrorlist\n```\n把163，ustc这几个比较好使的中国源复制到文件最上面，到时候下载安装的时候跑的快一点\n\n开始安装：\n```\npacstrap -i /mnt base vim dialog wpa_supplicant     \n```\nbase是基础系统，dialog是上面提到的链接无线网的wifi-menu，wpa_supplicant也是手动链接无线网的包，vim 不解释 \n\n安装完成之后\n\n把分区挂载情况写入fstab中：\n```\ngenfstab -U -p /mnt > /mnt/etc/fstab\n```\n\nchroot进新系统：\n```\narch-chroot /mnt /bin/bash\n```\n\n一些配置：\n```\necho 'my-archlinux' > /etc/hostname     #设置主机名字\nln -sf /usr/share/zoneinfo/Asia/Shanghai   #设置时区\ntimedatectl set-timezone Asia/Shanghai      #也可以用这个设置时区\ntimedatectl set-ntp true        # 设置时间ntp同步网络时间\nvim /etc/locale.gen     # 区域设置 取消英文（en_US.UTF-8）和中文(zh_CN.UTF-8)的注释\nlocale-gen      #生成设置区域设置\necho \"LANG=en_US.UTF-8\" > /etc/locale.conf #设置语言，因为先安装的是没桌面的模式，先用英文，中文会显示成小方块\n```\n 创建初始内存盘[mkinitcpio](https://wiki.archlinux.org/index.php/Mkinitcpio)\n```\nmkinitcpio -p linux  \n```\n设置root密码\n```\npasswd      \n```\n这步忘了，你就进不去系统了，╮(╯▽╰)╭\n\n搞定启动项：\n```\npacman -S grub efibootmgr       #安装grub efibootmgr管理启动项\ngrub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck\npacman -S os-prober     #安装这个包是为了让grub-mkconfig发现win10的启动项\ngrub-mkconfig -o /boot/grub/grub.cfg   #把启动项写到文件配置里 \n```\n如果win10的启动项没有被发现，不要着急，在新的系统安装重启之后，重新执行上面`grub-mkconfig`命令就行了\n\n退出新系统,重启\n```\nexit        #退出\nunmout -R /mnt  #取消挂载磁盘\nreboot   #重启\n```\n\n好了如果一切顺利，重启之后就能看到你的新系统了  (。・∀・)ノ \n\n\n\n\n\n","slug":"2017-09-13-EFI模式下安装win10+Archlinux","published":1,"updated":"2019-11-01T02:16:34.409Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsby000bsm4wdzvzhsk4","content":"<p>就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜 </p>\n<p>Win10安装就略过了，我的电脑linux老换，win10始终稳稳的在那躺着，一动不动。。。</p>\n<p>因为win10是提前安装好的，而他是使用EFI模式安装的 我们在win10下在硬盘上给咋arch挪出点空间来，几十个GB就行。看你硬盘大小了和心情了。</p>\n<h3 id=\"启动liveCD\"><a href=\"#启动liveCD\" class=\"headerlink\" title=\"启动liveCD\"></a>启动liveCD</h3><p>用在<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">官网</a>或者<a href=\"http://mirrors.163.com/archlinux/iso/2017.09.01/\" target=\"_blank\" rel=\"noopener\">163</a>源下载最新的liveCD镜像（比如最新是archlinux-2017.09.01-x86_64.iso），刻录到u盘，我喜欢用<a href=\"http://rufus.akeo.ie/\" target=\"_blank\" rel=\"noopener\">rufs</a>，这个不大于1M的小工具很简单强大我喜欢。 当然了，熟悉linux的同学可以用<a href=\"https://wiki.archlinux.org/index.php/Core_utilities#dd\" target=\"_blank\" rel=\"noopener\">dd</a>命令。</p>\n<p>插上u盘，重启到liveCD里面。里面也是个没桌面的shell系统。</p>\n<h3 id=\"看Archlinux-wiki\"><a href=\"#看Archlinux-wiki\" class=\"headerlink\" title=\"看Archlinux wiki\"></a>看Archlinux wiki</h3><p>在开始之前最好还是看看<a href=\"https://wiki.archlinux.org/index.php/Installation_guide\" target=\"_blank\" rel=\"noopener\">arch的wiki</a>Installation guide(安装指南)，写的很详细，最好看英文的，中文的翻译有点延迟。</p>\n<h3 id=\"联网\"><a href=\"#联网\" class=\"headerlink\" title=\"联网\"></a>联网</h3><p>如果你是有线网络，插上网线，启动<a href=\"https://wiki.archlinux.org/index.php/Dhcpcd\" target=\"_blank\" rel=\"noopener\">dhcpd</a>服务（也就是动态获取ip）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure>\n<p>无线网络用wifi-menu链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-menu</span><br></pre></td></tr></table></figure>\n<p>看看链接成功了没 查看下ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p>如果没成功，或者其他的联网方式，看看<a href=\"https://wiki.archlinux.org/index.php/Network_configuration\" target=\"_blank\" rel=\"noopener\">arch的wiki</a></p>\n<p>其实说到这，再次提醒大家，看<a href=\"https://wiki.archlinux.org/\" target=\"_blank\" rel=\"noopener\">arch的wiki</a></p>\n<p>连上网络了，开工吧!</p>\n<h3 id=\"分区：\"><a href=\"#分区：\" class=\"headerlink\" title=\"分区：\"></a>分区：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sda</span><br></pre></td></tr></table></figure>\n<p>进入fdisk之后按<code>p</code>，看看现有分区的情况<br>这是我的硬盘分区情况，硬盘格式<code>gpt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1        2048     923647    921600   450M Windows 恢复环境</span><br><span class=\"line\">/dev/sda2      923648    1128447    204800   100M EFI 系统</span><br><span class=\"line\">/dev/sda3     1128448    1161215     32768    16M Microsoft 保留</span><br><span class=\"line\">/dev/sda4     1161216  209256750 208095535  99.2G Microsoft 基本数据</span><br><span class=\"line\">/dev/sda5   209258496  210888703   1630208   796M Windows 恢复环境</span><br><span class=\"line\">/dev/sda6   210890752  462559542 251668791   120G Microsoft 基本数据</span><br></pre></td></tr></table></figure>\n<p>假如我的硬盘中空闲空间100GB，用fdisk 给这100GB分一分</p>\n<p>我的方案是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda7    /boot           ext4    500MB    #boot启动分区 500MB够用了</span><br><span class=\"line\">/dev/sda8    swap                        8GB         #交换分区， 我的内存也8GB，我就分一样大小了</span><br><span class=\"line\">/dev/sda9    /                   ext4                   #剩下的全给 / 根分区</span><br></pre></td></tr></table></figure>\n<p>根据自己的空间大小自行调整。</p>\n<p>格式化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sda7</span><br><span class=\"line\">mkfs.ext4 /dev/sda9</span><br><span class=\"line\">mkswap /dev/sda8</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装基础系统\"><a href=\"#安装基础系统\" class=\"headerlink\" title=\"安装基础系统\"></a>安装基础系统</h3><p>挂载分区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sda9 /mnt</span><br><span class=\"line\">mkdir /mnt/boot</span><br><span class=\"line\">mount /dev/sda7 /mnt/boot</span><br><span class=\"line\">mkdir /mnt/boot/EFI</span><br><span class=\"line\">mount /dev/sda2 /mnt/boot/EFI          #这个EFI分区在分区情况里面能看到我的是sda2</span><br><span class=\"line\">swapon /dev/sda8</span><br></pre></td></tr></table></figure>\n<p>修改源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n<p>把163，ustc这几个比较好使的中国源复制到文件最上面，到时候下载安装的时候跑的快一点</p>\n<p>开始安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacstrap -i /mnt base vim dialog wpa_supplicant</span><br></pre></td></tr></table></figure>\n<p>base是基础系统，dialog是上面提到的链接无线网的wifi-menu，wpa_supplicant也是手动链接无线网的包，vim 不解释 </p>\n<p>安装完成之后</p>\n<p>把分区挂载情况写入fstab中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p /mnt &gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>\n\n<p>chroot进新系统：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>一些配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;my-archlinux&apos; &gt; /etc/hostname     #设置主机名字</span><br><span class=\"line\">ln -sf /usr/share/zoneinfo/Asia/Shanghai   #设置时区</span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai      #也可以用这个设置时区</span><br><span class=\"line\">timedatectl set-ntp true        # 设置时间ntp同步网络时间</span><br><span class=\"line\">vim /etc/locale.gen     # 区域设置 取消英文（en_US.UTF-8）和中文(zh_CN.UTF-8)的注释</span><br><span class=\"line\">locale-gen      #生成设置区域设置</span><br><span class=\"line\">echo &quot;LANG=en_US.UTF-8&quot; &gt; /etc/locale.conf #设置语言，因为先安装的是没桌面的模式，先用英文，中文会显示成小方块</span><br></pre></td></tr></table></figure>\n<p> 创建初始内存盘<a href=\"https://wiki.archlinux.org/index.php/Mkinitcpio\" target=\"_blank\" rel=\"noopener\">mkinitcpio</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkinitcpio -p linux</span><br></pre></td></tr></table></figure>\n<p>设置root密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n<p>这步忘了，你就进不去系统了，╮(╯▽╰)╭</p>\n<p>搞定启动项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S grub efibootmgr       #安装grub efibootmgr管理启动项</span><br><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck</span><br><span class=\"line\">pacman -S os-prober     #安装这个包是为了让grub-mkconfig发现win10的启动项</span><br><span class=\"line\">grub-mkconfig -o /boot/grub/grub.cfg   #把启动项写到文件配置里</span><br></pre></td></tr></table></figure>\n<p>如果win10的启动项没有被发现，不要着急，在新的系统安装重启之后，重新执行上面<code>grub-mkconfig</code>命令就行了</p>\n<p>退出新系统,重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit        #退出</span><br><span class=\"line\">unmout -R /mnt  #取消挂载磁盘</span><br><span class=\"line\">reboot   #重启</span><br></pre></td></tr></table></figure>\n\n<p>好了如果一切顺利，重启之后就能看到你的新系统了  (。・∀・)ノ </p>\n","site":{"data":{}},"more":"<p>就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜 </p>\n<p>Win10安装就略过了，我的电脑linux老换，win10始终稳稳的在那躺着，一动不动。。。</p>\n<p>因为win10是提前安装好的，而他是使用EFI模式安装的 我们在win10下在硬盘上给咋arch挪出点空间来，几十个GB就行。看你硬盘大小了和心情了。</p>\n<h3 id=\"启动liveCD\"><a href=\"#启动liveCD\" class=\"headerlink\" title=\"启动liveCD\"></a>启动liveCD</h3><p>用在<a href=\"https://www.archlinux.org/download/\" target=\"_blank\" rel=\"noopener\">官网</a>或者<a href=\"http://mirrors.163.com/archlinux/iso/2017.09.01/\" target=\"_blank\" rel=\"noopener\">163</a>源下载最新的liveCD镜像（比如最新是archlinux-2017.09.01-x86_64.iso），刻录到u盘，我喜欢用<a href=\"http://rufus.akeo.ie/\" target=\"_blank\" rel=\"noopener\">rufs</a>，这个不大于1M的小工具很简单强大我喜欢。 当然了，熟悉linux的同学可以用<a href=\"https://wiki.archlinux.org/index.php/Core_utilities#dd\" target=\"_blank\" rel=\"noopener\">dd</a>命令。</p>\n<p>插上u盘，重启到liveCD里面。里面也是个没桌面的shell系统。</p>\n<h3 id=\"看Archlinux-wiki\"><a href=\"#看Archlinux-wiki\" class=\"headerlink\" title=\"看Archlinux wiki\"></a>看Archlinux wiki</h3><p>在开始之前最好还是看看<a href=\"https://wiki.archlinux.org/index.php/Installation_guide\" target=\"_blank\" rel=\"noopener\">arch的wiki</a>Installation guide(安装指南)，写的很详细，最好看英文的，中文的翻译有点延迟。</p>\n<h3 id=\"联网\"><a href=\"#联网\" class=\"headerlink\" title=\"联网\"></a>联网</h3><p>如果你是有线网络，插上网线，启动<a href=\"https://wiki.archlinux.org/index.php/Dhcpcd\" target=\"_blank\" rel=\"noopener\">dhcpd</a>服务（也就是动态获取ip）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure>\n<p>无线网络用wifi-menu链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-menu</span><br></pre></td></tr></table></figure>\n<p>看看链接成功了没 查看下ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p>如果没成功，或者其他的联网方式，看看<a href=\"https://wiki.archlinux.org/index.php/Network_configuration\" target=\"_blank\" rel=\"noopener\">arch的wiki</a></p>\n<p>其实说到这，再次提醒大家，看<a href=\"https://wiki.archlinux.org/\" target=\"_blank\" rel=\"noopener\">arch的wiki</a></p>\n<p>连上网络了，开工吧!</p>\n<h3 id=\"分区：\"><a href=\"#分区：\" class=\"headerlink\" title=\"分区：\"></a>分区：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sda</span><br></pre></td></tr></table></figure>\n<p>进入fdisk之后按<code>p</code>，看看现有分区的情况<br>这是我的硬盘分区情况，硬盘格式<code>gpt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1        2048     923647    921600   450M Windows 恢复环境</span><br><span class=\"line\">/dev/sda2      923648    1128447    204800   100M EFI 系统</span><br><span class=\"line\">/dev/sda3     1128448    1161215     32768    16M Microsoft 保留</span><br><span class=\"line\">/dev/sda4     1161216  209256750 208095535  99.2G Microsoft 基本数据</span><br><span class=\"line\">/dev/sda5   209258496  210888703   1630208   796M Windows 恢复环境</span><br><span class=\"line\">/dev/sda6   210890752  462559542 251668791   120G Microsoft 基本数据</span><br></pre></td></tr></table></figure>\n<p>假如我的硬盘中空闲空间100GB，用fdisk 给这100GB分一分</p>\n<p>我的方案是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda7    /boot           ext4    500MB    #boot启动分区 500MB够用了</span><br><span class=\"line\">/dev/sda8    swap                        8GB         #交换分区， 我的内存也8GB，我就分一样大小了</span><br><span class=\"line\">/dev/sda9    /                   ext4                   #剩下的全给 / 根分区</span><br></pre></td></tr></table></figure>\n<p>根据自己的空间大小自行调整。</p>\n<p>格式化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sda7</span><br><span class=\"line\">mkfs.ext4 /dev/sda9</span><br><span class=\"line\">mkswap /dev/sda8</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装基础系统\"><a href=\"#安装基础系统\" class=\"headerlink\" title=\"安装基础系统\"></a>安装基础系统</h3><p>挂载分区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sda9 /mnt</span><br><span class=\"line\">mkdir /mnt/boot</span><br><span class=\"line\">mount /dev/sda7 /mnt/boot</span><br><span class=\"line\">mkdir /mnt/boot/EFI</span><br><span class=\"line\">mount /dev/sda2 /mnt/boot/EFI          #这个EFI分区在分区情况里面能看到我的是sda2</span><br><span class=\"line\">swapon /dev/sda8</span><br></pre></td></tr></table></figure>\n<p>修改源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n<p>把163，ustc这几个比较好使的中国源复制到文件最上面，到时候下载安装的时候跑的快一点</p>\n<p>开始安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacstrap -i /mnt base vim dialog wpa_supplicant</span><br></pre></td></tr></table></figure>\n<p>base是基础系统，dialog是上面提到的链接无线网的wifi-menu，wpa_supplicant也是手动链接无线网的包，vim 不解释 </p>\n<p>安装完成之后</p>\n<p>把分区挂载情况写入fstab中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p /mnt &gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>\n\n<p>chroot进新系统：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>一些配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;my-archlinux&apos; &gt; /etc/hostname     #设置主机名字</span><br><span class=\"line\">ln -sf /usr/share/zoneinfo/Asia/Shanghai   #设置时区</span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai      #也可以用这个设置时区</span><br><span class=\"line\">timedatectl set-ntp true        # 设置时间ntp同步网络时间</span><br><span class=\"line\">vim /etc/locale.gen     # 区域设置 取消英文（en_US.UTF-8）和中文(zh_CN.UTF-8)的注释</span><br><span class=\"line\">locale-gen      #生成设置区域设置</span><br><span class=\"line\">echo &quot;LANG=en_US.UTF-8&quot; &gt; /etc/locale.conf #设置语言，因为先安装的是没桌面的模式，先用英文，中文会显示成小方块</span><br></pre></td></tr></table></figure>\n<p> 创建初始内存盘<a href=\"https://wiki.archlinux.org/index.php/Mkinitcpio\" target=\"_blank\" rel=\"noopener\">mkinitcpio</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkinitcpio -p linux</span><br></pre></td></tr></table></figure>\n<p>设置root密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n<p>这步忘了，你就进不去系统了，╮(╯▽╰)╭</p>\n<p>搞定启动项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S grub efibootmgr       #安装grub efibootmgr管理启动项</span><br><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck</span><br><span class=\"line\">pacman -S os-prober     #安装这个包是为了让grub-mkconfig发现win10的启动项</span><br><span class=\"line\">grub-mkconfig -o /boot/grub/grub.cfg   #把启动项写到文件配置里</span><br></pre></td></tr></table></figure>\n<p>如果win10的启动项没有被发现，不要着急，在新的系统安装重启之后，重新执行上面<code>grub-mkconfig</code>命令就行了</p>\n<p>退出新系统,重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit        #退出</span><br><span class=\"line\">unmout -R /mnt  #取消挂载磁盘</span><br><span class=\"line\">reboot   #重启</span><br></pre></td></tr></table></figure>\n\n<p>好了如果一切顺利，重启之后就能看到你的新系统了  (。・∀・)ノ </p>\n"},{"layout":"post","title":"Win10子系统ubuntu更换源","date":"2017-09-17T04:04:01.000Z","author":"Heropoo","excerpt":"作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。","_content":"作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。\n\n现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。\n\n安装过程，网上很多也不难，就略过了，大家自行搜索吧。\n\n我的linux子系统用的是ubuntu，使用起来简单方便啊😁\n\n安装完成之后，顺手就是一个 `apt update`，但是默认的源太慢了，没法忍。那我们就换国内源吧。\n\n国内有好多源，[阿里云](http://mirrors.aliyun.com/)，[163](http://mirrors.163.com/)，[搜狐](http://mirrors.sohu.com/)，[中科大](http://mirrors.ustc.edu.cn/)等等。我们就以阿里云做个例子吧：\n\n浏览器打开 [http://mirrors.aliyun.com/](http://mirrors.aliyun.com/)\n\n![example-pic](/assets/images/20170917191649.png)\n\n找到ubuntu的help \n\n![pic](/assets/images/20170917192021.png)\n\n发现里面最新的是 Quantal(12.10) 看来不能直接复制\n\n在你的子系统bash中执行\n```sh\ncat /etc/apt/sources.list\n-------------------------\ndeb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse\n-------------------------\n```\n索性最新版ubuntu16.04代号叫xenial\n\n那直接把url换换就行了\n```sh\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     # 改配置文件，先备份是个好习惯\nsudo vim /etc/apt/sources.list   # 把内容换成下面的就行了，其实就是url变了\n-------------------------\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n-------------------------\n```\n搞定了，测试下：\n```sh\nsudo apt update\n```\n没问题就可以了。\n\n\n\n","source":"_posts/2017-09-17-win10子系统ubuntu更换源.md","raw":"---\nlayout: post\ntitle:  \"Win10子系统ubuntu更换源\"\ndate:   2017-09-17 12:04:01\nauthor: \"Heropoo\"\ncategories: \n    - Linux\ntags:\n    - Win10\n    - Ubuntu \nexcerpt: \"作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。\"\n---\n作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。\n\n现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。\n\n安装过程，网上很多也不难，就略过了，大家自行搜索吧。\n\n我的linux子系统用的是ubuntu，使用起来简单方便啊😁\n\n安装完成之后，顺手就是一个 `apt update`，但是默认的源太慢了，没法忍。那我们就换国内源吧。\n\n国内有好多源，[阿里云](http://mirrors.aliyun.com/)，[163](http://mirrors.163.com/)，[搜狐](http://mirrors.sohu.com/)，[中科大](http://mirrors.ustc.edu.cn/)等等。我们就以阿里云做个例子吧：\n\n浏览器打开 [http://mirrors.aliyun.com/](http://mirrors.aliyun.com/)\n\n![example-pic](/assets/images/20170917191649.png)\n\n找到ubuntu的help \n\n![pic](/assets/images/20170917192021.png)\n\n发现里面最新的是 Quantal(12.10) 看来不能直接复制\n\n在你的子系统bash中执行\n```sh\ncat /etc/apt/sources.list\n-------------------------\ndeb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse\n-------------------------\n```\n索性最新版ubuntu16.04代号叫xenial\n\n那直接把url换换就行了\n```sh\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     # 改配置文件，先备份是个好习惯\nsudo vim /etc/apt/sources.list   # 把内容换成下面的就行了，其实就是url变了\n-------------------------\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n-------------------------\n```\n搞定了，测试下：\n```sh\nsudo apt update\n```\n没问题就可以了。\n\n\n\n","slug":"2017-09-17-win10子系统ubuntu更换源","published":1,"updated":"2019-11-01T02:16:34.409Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc0000fsm4w3g0afqfd","content":"<p>作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。</p>\n<p>现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。</p>\n<p>安装过程，网上很多也不难，就略过了，大家自行搜索吧。</p>\n<p>我的linux子系统用的是ubuntu，使用起来简单方便啊😁</p>\n<p>安装完成之后，顺手就是一个 <code>apt update</code>，但是默认的源太慢了，没法忍。那我们就换国内源吧。</p>\n<p>国内有好多源，<a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">阿里云</a>，<a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">163</a>，<a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"noopener\">搜狐</a>，<a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">中科大</a>等等。我们就以阿里云做个例子吧：</p>\n<p>浏览器打开 <a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/</a></p>\n<p><img src=\"/assets/images/20170917191649.png\" alt=\"example-pic\"></p>\n<p>找到ubuntu的help </p>\n<p><img src=\"/assets/images/20170917192021.png\" alt=\"pic\"></p>\n<p>发现里面最新的是 Quantal(12.10) 看来不能直接复制</p>\n<p>在你的子系统bash中执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/apt/sources.list</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<p>索性最新版ubuntu16.04代号叫xenial</p>\n<p>那直接把url换换就行了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     <span class=\"comment\"># 改配置文件，先备份是个好习惯</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list   <span class=\"comment\"># 把内容换成下面的就行了，其实就是url变了</span></span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<p>搞定了，测试下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<p>没问题就可以了。</p>\n","site":{"data":{}},"more":"<p>作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。</p>\n<p>现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。</p>\n<p>安装过程，网上很多也不难，就略过了，大家自行搜索吧。</p>\n<p>我的linux子系统用的是ubuntu，使用起来简单方便啊😁</p>\n<p>安装完成之后，顺手就是一个 <code>apt update</code>，但是默认的源太慢了，没法忍。那我们就换国内源吧。</p>\n<p>国内有好多源，<a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">阿里云</a>，<a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">163</a>，<a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"noopener\">搜狐</a>，<a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">中科大</a>等等。我们就以阿里云做个例子吧：</p>\n<p>浏览器打开 <a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/</a></p>\n<p><img src=\"/assets/images/20170917191649.png\" alt=\"example-pic\"></p>\n<p>找到ubuntu的help </p>\n<p><img src=\"/assets/images/20170917192021.png\" alt=\"pic\"></p>\n<p>发现里面最新的是 Quantal(12.10) 看来不能直接复制</p>\n<p>在你的子系统bash中执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/apt/sources.list</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<p>索性最新版ubuntu16.04代号叫xenial</p>\n<p>那直接把url换换就行了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     <span class=\"comment\"># 改配置文件，先备份是个好习惯</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list   <span class=\"comment\"># 把内容换成下面的就行了，其实就是url变了</span></span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<p>搞定了，测试下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<p>没问题就可以了。</p>\n"},{"layout":"post","title":"MSYS2初体验","date":"2017-09-22T08:07:54.000Z","author":"Heropoo","excerpt":"作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。","_content":"作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。\n\n发现这家伙还不错，这是[百度百科](https://baike.baidu.com/item/MSYS2)的介绍：\n\n> MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从\"MinGW-生成\"）基础上产生的，追求更好的互操作性的 Windows 软件。\n> MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。\n\n\n看起来还不错，这是[官网](http://www.msys2.org/)\n\n安装就下载二进制安装程序安装就可以了。\n\n安装之后急切地 `pacman -Sy` 刷新软件包数据，官网的源还有点慢。换[中科大](http://mirrors.ustc.edu.cn/)的源吧。\n\n```sh\ncd /etc/pacman.d\nls\n-------------------\ngnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys\n```\n\n三个`mirrorlist`开头的文件就是源的配置文件\n\n编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/mingw/i686\n```\n\n编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64\n```\n编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/msys/$arch\n```\n\n然后执行 `pacman -Sy` 刷新软件包数据即可。\n\n\n还有一点，cygwin切换系统磁盘是\n```sh\ncd /cygdrive/d/   #比如切换到d盘\n```\n\nMYSYS2是：\n```sh\ncd /d\n```\n\n使用windows原生命令比如ping会中文乱码，这么解决：\n\n新建 /bin/win：\n```sh\n#!/bin/bash\n$@ |iconv -f gbk -t utf-8\n```\n\n使用：\n```sh\n/bin/win ping baidu.com\n```\n\n","source":"_posts/2017-09-22-MSYS2初体验.md","raw":"---\nlayout: post\ntitle:  \"MSYS2初体验\"\ndate:   2017-09-22 16:07:54\nauthor: \"Heropoo\"\ncategories: \n    - Linux\ntags:\n    - Win10\n    - Linux\n    - MSYS2 \nexcerpt: \"作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。\"\n---\n作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。\n\n发现这家伙还不错，这是[百度百科](https://baike.baidu.com/item/MSYS2)的介绍：\n\n> MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从\"MinGW-生成\"）基础上产生的，追求更好的互操作性的 Windows 软件。\n> MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。\n\n\n看起来还不错，这是[官网](http://www.msys2.org/)\n\n安装就下载二进制安装程序安装就可以了。\n\n安装之后急切地 `pacman -Sy` 刷新软件包数据，官网的源还有点慢。换[中科大](http://mirrors.ustc.edu.cn/)的源吧。\n\n```sh\ncd /etc/pacman.d\nls\n-------------------\ngnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys\n```\n\n三个`mirrorlist`开头的文件就是源的配置文件\n\n编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/mingw/i686\n```\n\n编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64\n```\n编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：\n\n```\nServer = http://mirrors.ustc.edu.cn/msys2/msys/$arch\n```\n\n然后执行 `pacman -Sy` 刷新软件包数据即可。\n\n\n还有一点，cygwin切换系统磁盘是\n```sh\ncd /cygdrive/d/   #比如切换到d盘\n```\n\nMYSYS2是：\n```sh\ncd /d\n```\n\n使用windows原生命令比如ping会中文乱码，这么解决：\n\n新建 /bin/win：\n```sh\n#!/bin/bash\n$@ |iconv -f gbk -t utf-8\n```\n\n使用：\n```sh\n/bin/win ping baidu.com\n```\n\n","slug":"2017-09-22-MSYS2初体验","published":1,"updated":"2019-11-01T02:16:34.409Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc1000gsm4w2doibozz","content":"<p>作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。</p>\n<p>发现这家伙还不错，这是<a href=\"https://baike.baidu.com/item/MSYS2\" target=\"_blank\" rel=\"noopener\">百度百科</a>的介绍：</p>\n<blockquote>\n<p>MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从”MinGW-生成”）基础上产生的，追求更好的互操作性的 Windows 软件。<br>MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。</p>\n</blockquote>\n<p>看起来还不错，这是<a href=\"http://www.msys2.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>安装就下载二进制安装程序安装就可以了。</p>\n<p>安装之后急切地 <code>pacman -Sy</code> 刷新软件包数据，官网的源还有点慢。换<a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">中科大</a>的源吧。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/pacman.d</span><br><span class=\"line\">ls</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">gnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys</span><br></pre></td></tr></table></figure>\n\n<p>三个<code>mirrorlist</code>开头的文件就是源的配置文件</p>\n<p>编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686</span><br></pre></td></tr></table></figure>\n\n<p>编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64</span><br></pre></td></tr></table></figure>\n<p>编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>pacman -Sy</code> 刷新软件包数据即可。</p>\n<p>还有一点，cygwin切换系统磁盘是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /cygdrive/d/   <span class=\"comment\">#比如切换到d盘</span></span><br></pre></td></tr></table></figure>\n\n<p>MYSYS2是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /d</span><br></pre></td></tr></table></figure>\n\n<p>使用windows原生命令比如ping会中文乱码，这么解决：</p>\n<p>新建 /bin/win：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"variable\">$@</span> |iconv -f gbk -t utf-8</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/win ping baidu.com</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p>作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。</p>\n<p>发现这家伙还不错，这是<a href=\"https://baike.baidu.com/item/MSYS2\" target=\"_blank\" rel=\"noopener\">百度百科</a>的介绍：</p>\n<blockquote>\n<p>MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从”MinGW-生成”）基础上产生的，追求更好的互操作性的 Windows 软件。<br>MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。</p>\n</blockquote>\n<p>看起来还不错，这是<a href=\"http://www.msys2.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>安装就下载二进制安装程序安装就可以了。</p>\n<p>安装之后急切地 <code>pacman -Sy</code> 刷新软件包数据，官网的源还有点慢。换<a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">中科大</a>的源吧。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/pacman.d</span><br><span class=\"line\">ls</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">gnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys</span><br></pre></td></tr></table></figure>\n\n<p>三个<code>mirrorlist</code>开头的文件就是源的配置文件</p>\n<p>编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686</span><br></pre></td></tr></table></figure>\n\n<p>编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64</span><br></pre></td></tr></table></figure>\n<p>编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>pacman -Sy</code> 刷新软件包数据即可。</p>\n<p>还有一点，cygwin切换系统磁盘是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /cygdrive/d/   <span class=\"comment\">#比如切换到d盘</span></span><br></pre></td></tr></table></figure>\n\n<p>MYSYS2是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /d</span><br></pre></td></tr></table></figure>\n\n<p>使用windows原生命令比如ping会中文乱码，这么解决：</p>\n<p>新建 /bin/win：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"variable\">$@</span> |iconv -f gbk -t utf-8</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/win ping baidu.com</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"搭建Git服务器、编写自动部署脚本","date":"2017-09-29T05:51:23.000Z","author":"Heropoo","excerpt":"今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。","_content":"今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。\n\n主要参考 [廖雪峰-GIT教程-搭建Git服务器](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)\n\n现在开始吧！\n\n### 创建一个`git`用户，用来运行`git`服务\n```sh\nadduser git\n```\n\n### 创建证书登录\n收集所有需要登录的用户的公钥，就是他们自己的`id_rsa.pub`文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个。\n\n### 初始化Git仓库\n先选定一个目录作为Git仓库，假定是`/home/git/sample.git`，在`/home/git`目录下输入命令\n```sh\ngit init --bare sample.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以`.git`结尾。然后，把owner改为`git`\n```sh\nchown -R git:git sample.git\n```\n\n### 禁用git用户shell登录\n通过编辑`/etc/passwd`文件完成，找到你的git用户的一行,例如\n```\ngit:x:1001:1001:,,,:/home/git:/bin/bash\n```\n把`/bin/bash`改为`/usr/bin/git-shell`,例如\n```\ngit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n```\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n### 克隆远程仓库\n\n```sh\ngit clone git@server:sample.git\n```\nserver是你的服务器域名或ip地址\n\n如果git仓库和web目录在同一台服务器主机上:\n```sh\ngit clone /home/git/sample.git\n```\n\n如果不是在git用户的家目录中创建的,比如`/srv/gits/sample.git`：\n```sh\ngit clone git@server:/srv/gits/sample.git\n```\n\n如果clone成功，那么你的git服务器就搭建成功了。\n\n接下来：\n\n### 自动同步钩子脚本\n\n因为我是web目录和git是同一台服务器\n\n编辑 `/home/git/sample.git/hooks/post-receive`, `post-receive`就是在git服务器收到代码推送后(`push`完成之后)执行的脚本。\n```\n#!/bin/sh\n\nwhile read oldrev newrev refname\ndo\n    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n    if [ \"master\" == \"$branch\" ]; then\n        # Do something\n        echo \"post-receive in branch master\" >> /tmp/git-sample.log\n        unset GIT_DIR\n        wwwPath=/var/www/html/sample\n        cd $wwwPath && /usr/bin/git pull origin master\n        exit 0\n    fi\ndone\n```\n从脚本内容可以看出，我们在判断当前`push`的分支是`master`时执行`git pull origin master`操作。\n\n给执行权限\n```sh\nchown -R git:git /home/git/sample.git/hooks/post-receive\nchmod +x /home/git/sample.git/hooks/post-receive\n```\n\n因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:\n```sh\ngit clone /home/git/sample.git\n```\n因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。\n\n好了，试试吧~\n","source":"_posts/2017-09-29-搭建Git服务器、编写自动部署脚本.md","raw":"---\nlayout: post\ntitle:  \"搭建Git服务器、编写自动部署脚本\"\ndate:   2017-09-29 13:51:23\nauthor: \"Heropoo\"\ncategories: \n    - Linux\n    - Git\ntags:\n    - Linux\n    - Git \nexcerpt: \"今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。\"\n---\n今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。\n\n主要参考 [廖雪峰-GIT教程-搭建Git服务器](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)\n\n现在开始吧！\n\n### 创建一个`git`用户，用来运行`git`服务\n```sh\nadduser git\n```\n\n### 创建证书登录\n收集所有需要登录的用户的公钥，就是他们自己的`id_rsa.pub`文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个。\n\n### 初始化Git仓库\n先选定一个目录作为Git仓库，假定是`/home/git/sample.git`，在`/home/git`目录下输入命令\n```sh\ngit init --bare sample.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以`.git`结尾。然后，把owner改为`git`\n```sh\nchown -R git:git sample.git\n```\n\n### 禁用git用户shell登录\n通过编辑`/etc/passwd`文件完成，找到你的git用户的一行,例如\n```\ngit:x:1001:1001:,,,:/home/git:/bin/bash\n```\n把`/bin/bash`改为`/usr/bin/git-shell`,例如\n```\ngit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n```\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n### 克隆远程仓库\n\n```sh\ngit clone git@server:sample.git\n```\nserver是你的服务器域名或ip地址\n\n如果git仓库和web目录在同一台服务器主机上:\n```sh\ngit clone /home/git/sample.git\n```\n\n如果不是在git用户的家目录中创建的,比如`/srv/gits/sample.git`：\n```sh\ngit clone git@server:/srv/gits/sample.git\n```\n\n如果clone成功，那么你的git服务器就搭建成功了。\n\n接下来：\n\n### 自动同步钩子脚本\n\n因为我是web目录和git是同一台服务器\n\n编辑 `/home/git/sample.git/hooks/post-receive`, `post-receive`就是在git服务器收到代码推送后(`push`完成之后)执行的脚本。\n```\n#!/bin/sh\n\nwhile read oldrev newrev refname\ndo\n    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n    if [ \"master\" == \"$branch\" ]; then\n        # Do something\n        echo \"post-receive in branch master\" >> /tmp/git-sample.log\n        unset GIT_DIR\n        wwwPath=/var/www/html/sample\n        cd $wwwPath && /usr/bin/git pull origin master\n        exit 0\n    fi\ndone\n```\n从脚本内容可以看出，我们在判断当前`push`的分支是`master`时执行`git pull origin master`操作。\n\n给执行权限\n```sh\nchown -R git:git /home/git/sample.git/hooks/post-receive\nchmod +x /home/git/sample.git/hooks/post-receive\n```\n\n因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:\n```sh\ngit clone /home/git/sample.git\n```\n因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。\n\n好了，试试吧~\n","slug":"2017-09-29-搭建Git服务器、编写自动部署脚本","published":1,"updated":"2019-11-01T02:16:34.410Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc3000ksm4wevmf02lj","content":"<p>今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。</p>\n<p>主要参考 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">廖雪峰-GIT教程-搭建Git服务器</a></p>\n<p>现在开始吧！</p>\n<h3 id=\"创建一个git用户，用来运行git服务\"><a href=\"#创建一个git用户，用来运行git服务\" class=\"headerlink\" title=\"创建一个git用户，用来运行git服务\"></a>创建一个<code>git</code>用户，用来运行<code>git</code>服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建证书登录\"><a href=\"#创建证书登录\" class=\"headerlink\" title=\"创建证书登录\"></a>创建证书登录</h3><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>\n<h3 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h3><p>先选定一个目录作为Git仓库，假定是<code>/home/git/sample.git</code>，在<code>/home/git</code>目录下输入命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare sample.git</span><br></pre></td></tr></table></figure>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R git:git sample.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用git用户shell登录\"><a href=\"#禁用git用户shell登录\" class=\"headerlink\" title=\"禁用git用户shell登录\"></a>禁用git用户shell登录</h3><p>通过编辑<code>/etc/passwd</code>文件完成，找到你的git用户的一行,例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure>\n<p>把<code>/bin/bash</code>改为<code>/usr/bin/git-shell</code>,例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<h3 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:sample.git</span><br></pre></td></tr></table></figure>\n<p>server是你的服务器域名或ip地址</p>\n<p>如果git仓库和web目录在同一台服务器主机上:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>如果不是在git用户的家目录中创建的,比如<code>/srv/gits/sample.git</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:/srv/gits/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>如果clone成功，那么你的git服务器就搭建成功了。</p>\n<p>接下来：</p>\n<h3 id=\"自动同步钩子脚本\"><a href=\"#自动同步钩子脚本\" class=\"headerlink\" title=\"自动同步钩子脚本\"></a>自动同步钩子脚本</h3><p>因为我是web目录和git是同一台服务器</p>\n<p>编辑 <code>/home/git/sample.git/hooks/post-receive</code>, <code>post-receive</code>就是在git服务器收到代码推送后(<code>push</code>完成之后)执行的脚本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">while read oldrev newrev refname</span><br><span class=\"line\">do</span><br><span class=\"line\">    branch=$(git rev-parse --symbolic --abbrev-ref $refname)</span><br><span class=\"line\">    if [ &quot;master&quot; == &quot;$branch&quot; ]; then</span><br><span class=\"line\">        # Do something</span><br><span class=\"line\">        echo &quot;post-receive in branch master&quot; &gt;&gt; /tmp/git-sample.log</span><br><span class=\"line\">        unset GIT_DIR</span><br><span class=\"line\">        wwwPath=/var/www/html/sample</span><br><span class=\"line\">        cd $wwwPath &amp;&amp; /usr/bin/git pull origin master</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>从脚本内容可以看出，我们在判断当前<code>push</code>的分支是<code>master</code>时执行<code>git pull origin master</code>操作。</p>\n<p>给执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R git:git /home/git/sample.git/hooks/post-receive</span><br><span class=\"line\">chmod +x /home/git/sample.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<p>因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>\n<p>因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。</p>\n<p>好了，试试吧~</p>\n","site":{"data":{}},"more":"<p>今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。</p>\n<p>主要参考 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">廖雪峰-GIT教程-搭建Git服务器</a></p>\n<p>现在开始吧！</p>\n<h3 id=\"创建一个git用户，用来运行git服务\"><a href=\"#创建一个git用户，用来运行git服务\" class=\"headerlink\" title=\"创建一个git用户，用来运行git服务\"></a>创建一个<code>git</code>用户，用来运行<code>git</code>服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建证书登录\"><a href=\"#创建证书登录\" class=\"headerlink\" title=\"创建证书登录\"></a>创建证书登录</h3><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>\n<h3 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h3><p>先选定一个目录作为Git仓库，假定是<code>/home/git/sample.git</code>，在<code>/home/git</code>目录下输入命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare sample.git</span><br></pre></td></tr></table></figure>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R git:git sample.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用git用户shell登录\"><a href=\"#禁用git用户shell登录\" class=\"headerlink\" title=\"禁用git用户shell登录\"></a>禁用git用户shell登录</h3><p>通过编辑<code>/etc/passwd</code>文件完成，找到你的git用户的一行,例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure>\n<p>把<code>/bin/bash</code>改为<code>/usr/bin/git-shell</code>,例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<h3 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:sample.git</span><br></pre></td></tr></table></figure>\n<p>server是你的服务器域名或ip地址</p>\n<p>如果git仓库和web目录在同一台服务器主机上:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>如果不是在git用户的家目录中创建的,比如<code>/srv/gits/sample.git</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:/srv/gits/sample.git</span><br></pre></td></tr></table></figure>\n\n<p>如果clone成功，那么你的git服务器就搭建成功了。</p>\n<p>接下来：</p>\n<h3 id=\"自动同步钩子脚本\"><a href=\"#自动同步钩子脚本\" class=\"headerlink\" title=\"自动同步钩子脚本\"></a>自动同步钩子脚本</h3><p>因为我是web目录和git是同一台服务器</p>\n<p>编辑 <code>/home/git/sample.git/hooks/post-receive</code>, <code>post-receive</code>就是在git服务器收到代码推送后(<code>push</code>完成之后)执行的脚本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">while read oldrev newrev refname</span><br><span class=\"line\">do</span><br><span class=\"line\">    branch=$(git rev-parse --symbolic --abbrev-ref $refname)</span><br><span class=\"line\">    if [ &quot;master&quot; == &quot;$branch&quot; ]; then</span><br><span class=\"line\">        # Do something</span><br><span class=\"line\">        echo &quot;post-receive in branch master&quot; &gt;&gt; /tmp/git-sample.log</span><br><span class=\"line\">        unset GIT_DIR</span><br><span class=\"line\">        wwwPath=/var/www/html/sample</span><br><span class=\"line\">        cd $wwwPath &amp;&amp; /usr/bin/git pull origin master</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>从脚本内容可以看出，我们在判断当前<code>push</code>的分支是<code>master</code>时执行<code>git pull origin master</code>操作。</p>\n<p>给执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R git:git /home/git/sample.git/hooks/post-receive</span><br><span class=\"line\">chmod +x /home/git/sample.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<p>因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>\n<p>因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。</p>\n<p>好了，试试吧~</p>\n"},{"layout":"post","title":"Docker基础命令","date":"2017-10-26T02:27:39.000Z","author":"Heropoo","excerpt":"最近忙里偷闲研究了下docker这个很火的东东。","_content":"最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁\n### 镜像\n\n列出镜像列表\n```sh\ndocker images\n```\n获取一个新的镜像\n```sh\ndocker pull base/archlinux\n```\n删除镜像\n```sh\ndocker rmi imageID\n```\n查找镜像\n```sh\ndocker search php\n```\n构建\n```sh\ncd /path/to/Dockerfile\ndocker build -t imageName ./\n```\n\n### 容器\n```\ndocker run  base/archlinux /bin/echo \"hello world\"\n```\n\n运行交互式的容器\n```sh\ndocker run -i -t base/archlinux /bin/bash\n```\n    * -t:在新容器内指定一个伪终端或终端。\n    * -i:允许你对容器内的标准输入 (STDIN) 进行交互。\n    \n分配端口\n```sh\ndocker run -P php7.0-app    #自动分配\ndocker run -p 5000:80       #容器内部的 80 端口映射到主机的 5000 端口上\n```\n\n查看正在运行的容器\n```sh\ndocker ps\ndocker container ls #或者\n```\n\n查看端口\n```sh\ndocker port containerID/contaienrName\n```\n\n查看日志\n```sh\ndocker logs \ndocker -f containerID/contaienrName\n```\n\n查看进程\n```sh\ndocker top containerID/contaienrName\n```\n\n查看Docker的底层信息\n```sh\ndocker inspect containerID/contaienrName\n```\n\n停止容器\n```sh\ndocker stop containerID/contaienrName\n```\n启动容器\n```sh\ndocker start containerID/contaienrName\n```\n正在运行的容器，我们可以使用 `docker restart` 命令来重启\n\n查看最后一次创建的容器\n```sh\ndocker ps -l\n```\n移除容器\n```sh\ndocker rm containerID/contaienrName\n```","source":"_posts/2017-10-26-Docker基础命令.md","raw":"---\nlayout: post\ntitle:  \"Docker基础命令\"\ndate:   2017-10-26 10:27:39\nauthor: \"Heropoo\"\ncategories: \n    - Docker\ntags:\n    - 虚拟化\n    - 容器\n    - Docker\nexcerpt: \"最近忙里偷闲研究了下docker这个很火的东东。\"\n---\n最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁\n### 镜像\n\n列出镜像列表\n```sh\ndocker images\n```\n获取一个新的镜像\n```sh\ndocker pull base/archlinux\n```\n删除镜像\n```sh\ndocker rmi imageID\n```\n查找镜像\n```sh\ndocker search php\n```\n构建\n```sh\ncd /path/to/Dockerfile\ndocker build -t imageName ./\n```\n\n### 容器\n```\ndocker run  base/archlinux /bin/echo \"hello world\"\n```\n\n运行交互式的容器\n```sh\ndocker run -i -t base/archlinux /bin/bash\n```\n    * -t:在新容器内指定一个伪终端或终端。\n    * -i:允许你对容器内的标准输入 (STDIN) 进行交互。\n    \n分配端口\n```sh\ndocker run -P php7.0-app    #自动分配\ndocker run -p 5000:80       #容器内部的 80 端口映射到主机的 5000 端口上\n```\n\n查看正在运行的容器\n```sh\ndocker ps\ndocker container ls #或者\n```\n\n查看端口\n```sh\ndocker port containerID/contaienrName\n```\n\n查看日志\n```sh\ndocker logs \ndocker -f containerID/contaienrName\n```\n\n查看进程\n```sh\ndocker top containerID/contaienrName\n```\n\n查看Docker的底层信息\n```sh\ndocker inspect containerID/contaienrName\n```\n\n停止容器\n```sh\ndocker stop containerID/contaienrName\n```\n启动容器\n```sh\ndocker start containerID/contaienrName\n```\n正在运行的容器，我们可以使用 `docker restart` 命令来重启\n\n查看最后一次创建的容器\n```sh\ndocker ps -l\n```\n移除容器\n```sh\ndocker rm containerID/contaienrName\n```","slug":"2017-10-26-Docker基础命令","published":1,"updated":"2019-11-01T02:16:34.410Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc4000msm4whnbtcflt","content":"<p>最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁</p>\n<h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>列出镜像列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>获取一个新的镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull base/archlinux</span><br></pre></td></tr></table></figure>\n<p>删除镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageID</span><br></pre></td></tr></table></figure>\n<p>查找镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search php</span><br></pre></td></tr></table></figure>\n<p>构建</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/Dockerfile</span><br><span class=\"line\">docker build -t imageName ./</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  base/archlinux /bin/echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n\n<p>运行交互式的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t base/archlinux /bin/bash</span><br></pre></td></tr></table></figure>\n<pre><code>* -t:在新容器内指定一个伪终端或终端。\n* -i:允许你对容器内的标准输入 (STDIN) 进行交互。</code></pre><p>分配端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P php7.0-app    <span class=\"comment\">#自动分配</span></span><br><span class=\"line\">docker run -p 5000:80       <span class=\"comment\">#容器内部的 80 端口映射到主机的 5000 端口上</span></span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">docker container ls <span class=\"comment\">#或者</span></span><br></pre></td></tr></table></figure>\n\n<p>查看端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs </span><br><span class=\"line\">docker -f containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看Docker的底层信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>停止容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop containerID/contaienrName</span><br></pre></td></tr></table></figure>\n<p>启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start containerID/contaienrName</span><br></pre></td></tr></table></figure>\n<p>正在运行的容器，我们可以使用 <code>docker restart</code> 命令来重启</p>\n<p>查看最后一次创建的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -l</span><br></pre></td></tr></table></figure>\n<p>移除容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm containerID/contaienrName</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p>最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁</p>\n<h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>列出镜像列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>获取一个新的镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull base/archlinux</span><br></pre></td></tr></table></figure>\n<p>删除镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageID</span><br></pre></td></tr></table></figure>\n<p>查找镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search php</span><br></pre></td></tr></table></figure>\n<p>构建</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/Dockerfile</span><br><span class=\"line\">docker build -t imageName ./</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  base/archlinux /bin/echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n\n<p>运行交互式的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t base/archlinux /bin/bash</span><br></pre></td></tr></table></figure>\n<pre><code>* -t:在新容器内指定一个伪终端或终端。\n* -i:允许你对容器内的标准输入 (STDIN) 进行交互。</code></pre><p>分配端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P php7.0-app    <span class=\"comment\">#自动分配</span></span><br><span class=\"line\">docker run -p 5000:80       <span class=\"comment\">#容器内部的 80 端口映射到主机的 5000 端口上</span></span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">docker container ls <span class=\"comment\">#或者</span></span><br></pre></td></tr></table></figure>\n\n<p>查看端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs </span><br><span class=\"line\">docker -f containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>查看Docker的底层信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect containerID/contaienrName</span><br></pre></td></tr></table></figure>\n\n<p>停止容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop containerID/contaienrName</span><br></pre></td></tr></table></figure>\n<p>启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start containerID/contaienrName</span><br></pre></td></tr></table></figure>\n<p>正在运行的容器，我们可以使用 <code>docker restart</code> 命令来重启</p>\n<p>查看最后一次创建的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -l</span><br></pre></td></tr></table></figure>\n<p>移除容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm containerID/contaienrName</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用docker玩转php开发环境","date":"2017-11-16T07:25:01.000Z","author":"Heropoo","excerpt":"还是忙里偷闲研究了下怎么用docker这个东东来整php开发。","_content":"还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁\n\n先看`Dockerfile`:\n```\n# 使用基于alpine linux 的镜像，体积小，下载快\nFROM php:7.0-cli-alpine\n\n# 使用中科大的源加快下载速度\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n\n# 安装下基本的php扩展\nRUN docker-php-ext-install pdo pdo_mysql mysqli\n```\n\n#### 构建\n```sh\ndocker build -t heropoo/php-cli-alpine .  #先切换到你的Dockerfile目录\n```\n\n#### 运行\n```sh\ndocker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80\n```\n这句好长啊，解释下各个参数：\n>-t在新容器内指定一个伪终端或终端\n>\n>-i\t允许你对容器内的标准输入 (STDIN) \n>\n>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80\n>\n>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www\t\n>\n>-w\t设置工作目录\n>\n>--rm 容器运行完之后删除\n>\n>--name\t给容器名字\n>\n>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 \n\n我系统是windows，我在浏览器访问docker的web服务：`http://ip:8080`,ip是你的docker的ip,就可以了。\n\n是不是很好玩😜","source":"_posts/2017-11-16-使用docker玩转php开发环境.md","raw":"---\nlayout: post\ntitle:  \"使用docker玩转php开发环境\"\ndate:   2017-11-16 15:25:01\nauthor: \"Heropoo\"\ncategories: \n    - Docker\n    - PHP\ntags:\n    - 虚拟化\n    - 容器\n    - Docker\n    - PHP\nexcerpt: \"还是忙里偷闲研究了下怎么用docker这个东东来整php开发。\"\n---\n还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁\n\n先看`Dockerfile`:\n```\n# 使用基于alpine linux 的镜像，体积小，下载快\nFROM php:7.0-cli-alpine\n\n# 使用中科大的源加快下载速度\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n\n# 安装下基本的php扩展\nRUN docker-php-ext-install pdo pdo_mysql mysqli\n```\n\n#### 构建\n```sh\ndocker build -t heropoo/php-cli-alpine .  #先切换到你的Dockerfile目录\n```\n\n#### 运行\n```sh\ndocker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80\n```\n这句好长啊，解释下各个参数：\n>-t在新容器内指定一个伪终端或终端\n>\n>-i\t允许你对容器内的标准输入 (STDIN) \n>\n>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80\n>\n>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www\t\n>\n>-w\t设置工作目录\n>\n>--rm 容器运行完之后删除\n>\n>--name\t给容器名字\n>\n>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 \n\n我系统是windows，我在浏览器访问docker的web服务：`http://ip:8080`,ip是你的docker的ip,就可以了。\n\n是不是很好玩😜","slug":"2017-11-16-使用docker玩转php开发环境","published":1,"updated":"2019-11-01T02:16:34.410Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc6000rsm4w88i9fjxx","content":"<p>还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁</p>\n<p>先看<code>Dockerfile</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用基于alpine linux 的镜像，体积小，下载快</span><br><span class=\"line\">FROM php:7.0-cli-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用中科大的源加快下载速度</span><br><span class=\"line\">RUN sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装下基本的php扩展</span><br><span class=\"line\">RUN docker-php-ext-install pdo pdo_mysql mysqli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t heropoo/php-cli-alpine .  <span class=\"comment\">#先切换到你的Dockerfile目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80</span><br></pre></td></tr></table></figure>\n<p>这句好长啊，解释下各个参数：</p>\n<blockquote>\n<p>-t在新容器内指定一个伪终端或终端</p>\n<p>-i    允许你对容器内的标准输入 (STDIN) </p>\n<p>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80</p>\n<p>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www    </p>\n<p>-w    设置工作目录</p>\n<p>–rm 容器运行完之后删除</p>\n<p>–name    给容器名字</p>\n<p>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 </p>\n</blockquote>\n<p>我系统是windows，我在浏览器访问docker的web服务：<code>http://ip:8080</code>,ip是你的docker的ip,就可以了。</p>\n<p>是不是很好玩😜</p>\n","site":{"data":{}},"more":"<p>还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁</p>\n<p>先看<code>Dockerfile</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用基于alpine linux 的镜像，体积小，下载快</span><br><span class=\"line\">FROM php:7.0-cli-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用中科大的源加快下载速度</span><br><span class=\"line\">RUN sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装下基本的php扩展</span><br><span class=\"line\">RUN docker-php-ext-install pdo pdo_mysql mysqli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t heropoo/php-cli-alpine .  <span class=\"comment\">#先切换到你的Dockerfile目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80</span><br></pre></td></tr></table></figure>\n<p>这句好长啊，解释下各个参数：</p>\n<blockquote>\n<p>-t在新容器内指定一个伪终端或终端</p>\n<p>-i    允许你对容器内的标准输入 (STDIN) </p>\n<p>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80</p>\n<p>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www    </p>\n<p>-w    设置工作目录</p>\n<p>–rm 容器运行完之后删除</p>\n<p>–name    给容器名字</p>\n<p>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 </p>\n</blockquote>\n<p>我系统是windows，我在浏览器访问docker的web服务：<code>http://ip:8080</code>,ip是你的docker的ip,就可以了。</p>\n<p>是不是很好玩😜</p>\n"},{"title":"百度UEditor自定义上传地址","layout":"post","date":"2017-10-26T03:03:11.000Z","author":"Heropoo","excerpt":"之前有个小朋友问我百度UEditor怎么自定义服务端上传地址。","_content":"之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。\n\n在ue实例化的时候你服务端上传的请求地址赋值给`serverUrl`\n```javascript\nvar ue;\nue = UE.getEditor('editor', {\n    toolbars: [\t\t//这个是工具栏配置，自己定义和今天主题无关\n        [\n            'fullscreen', 'source', '|', 'undo', 'redo', '|',\n            'bold', 'italic', 'underline', 'fontborder', 'strikethrough', 'superscript', 'subscript', 'removeformat', 'formatmatch', 'autotypeset', 'blockquote', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist', 'selectall', 'cleardoc', '|',\n            'rowspacingtop', 'rowspacingbottom', 'lineheight', '|',\n            'customstyle', 'paragraph', 'fontfamily', 'fontsize', '|',\n            'directionalityltr', 'directionalityrtl', 'indent', '|',\n            'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'touppercase', 'tolowercase', '|',\n            'link', 'unlink', 'anchor', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter', '|',\n            'simpleupload', '|', 'pagebreak', 'template', 'background', '|',\n            'horizontal', 'date', 'time', 'spechars', 'snapscreen', 'wordimage', '|',\n            'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols', 'charts', '|',\n            'preview'\n        ]\n    ],\n    serverUrl: 'http://your-server-address'  //这里是你服务端上传的请求地址\n});\n```\n在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：`http://your-server-address?action=config`。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中`ueditor/1.4.3.3/php/config.json`的内容就可以了。当然了具体配置你是可以自己按自己需求改动。\n\n接下来上传图片，随便上传一张图片，会发现ue的请求地址是`http://your-server-address?action=uploadimage`。这样是不是恍然大悟：\n>\taction参数是config，你就给他返回配置内容;\n>\taction参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。\n\n上传结果返回格式是这样的：\n\n失败的情况\n```json\n{\n\t\"state\": \"Failed\",\n\t\"msg\": \"error msg\"\n}\n```\n\n成功的情况\n```json\n{\n\t\"state\": \"SUCCESS\",\n\t\"msg\": \"ok\",\n\t\"original\": \"aaa.jpg\",\t//图片源文件名\n\t\"type\": \".jpg\",\t\t//图片后缀\n\t\"size\": 10240000,\t//图片大小\n\t\"title\": \"aaa\",\t\t//图片img标签上的属性title\n\t\"url\": \"/upload/fsf3r.jpg\"\t\t\t//图片上传之后的url\n}\n```\n\n好了就这样","source":"_posts/2017-10-26-百度ueditor自定义上传地址.md","raw":"---\ntitle: 百度UEditor自定义上传地址\nlayout: post\ndate:   2017-10-26 11:03:11\nauthor: \"Heropoo\"\ncategories: \n    - PHP\ntags:\n    - PHP\n    - UEditor\nexcerpt: \"之前有个小朋友问我百度UEditor怎么自定义服务端上传地址。\"\n---\n之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。\n\n在ue实例化的时候你服务端上传的请求地址赋值给`serverUrl`\n```javascript\nvar ue;\nue = UE.getEditor('editor', {\n    toolbars: [\t\t//这个是工具栏配置，自己定义和今天主题无关\n        [\n            'fullscreen', 'source', '|', 'undo', 'redo', '|',\n            'bold', 'italic', 'underline', 'fontborder', 'strikethrough', 'superscript', 'subscript', 'removeformat', 'formatmatch', 'autotypeset', 'blockquote', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist', 'selectall', 'cleardoc', '|',\n            'rowspacingtop', 'rowspacingbottom', 'lineheight', '|',\n            'customstyle', 'paragraph', 'fontfamily', 'fontsize', '|',\n            'directionalityltr', 'directionalityrtl', 'indent', '|',\n            'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'touppercase', 'tolowercase', '|',\n            'link', 'unlink', 'anchor', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter', '|',\n            'simpleupload', '|', 'pagebreak', 'template', 'background', '|',\n            'horizontal', 'date', 'time', 'spechars', 'snapscreen', 'wordimage', '|',\n            'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols', 'charts', '|',\n            'preview'\n        ]\n    ],\n    serverUrl: 'http://your-server-address'  //这里是你服务端上传的请求地址\n});\n```\n在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：`http://your-server-address?action=config`。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中`ueditor/1.4.3.3/php/config.json`的内容就可以了。当然了具体配置你是可以自己按自己需求改动。\n\n接下来上传图片，随便上传一张图片，会发现ue的请求地址是`http://your-server-address?action=uploadimage`。这样是不是恍然大悟：\n>\taction参数是config，你就给他返回配置内容;\n>\taction参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。\n\n上传结果返回格式是这样的：\n\n失败的情况\n```json\n{\n\t\"state\": \"Failed\",\n\t\"msg\": \"error msg\"\n}\n```\n\n成功的情况\n```json\n{\n\t\"state\": \"SUCCESS\",\n\t\"msg\": \"ok\",\n\t\"original\": \"aaa.jpg\",\t//图片源文件名\n\t\"type\": \".jpg\",\t\t//图片后缀\n\t\"size\": 10240000,\t//图片大小\n\t\"title\": \"aaa\",\t\t//图片img标签上的属性title\n\t\"url\": \"/upload/fsf3r.jpg\"\t\t\t//图片上传之后的url\n}\n```\n\n好了就这样","slug":"2017-10-26-百度ueditor自定义上传地址","published":1,"updated":"2019-11-01T02:16:34.410Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc6000ssm4w4tmydhun","content":"<p>之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。</p>\n<p>在ue实例化的时候你服务端上传的请求地址赋值给<code>serverUrl</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ue;</span><br><span class=\"line\">ue = UE.getEditor(<span class=\"string\">'editor'</span>, &#123;</span><br><span class=\"line\">    toolbars: [\t\t<span class=\"comment\">//这个是工具栏配置，自己定义和今天主题无关</span></span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">'fullscreen'</span>, <span class=\"string\">'source'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'undo'</span>, <span class=\"string\">'redo'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'bold'</span>, <span class=\"string\">'italic'</span>, <span class=\"string\">'underline'</span>, <span class=\"string\">'fontborder'</span>, <span class=\"string\">'strikethrough'</span>, <span class=\"string\">'superscript'</span>, <span class=\"string\">'subscript'</span>, <span class=\"string\">'removeformat'</span>, <span class=\"string\">'formatmatch'</span>, <span class=\"string\">'autotypeset'</span>, <span class=\"string\">'blockquote'</span>, <span class=\"string\">'pasteplain'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'forecolor'</span>, <span class=\"string\">'backcolor'</span>, <span class=\"string\">'insertorderedlist'</span>, <span class=\"string\">'insertunorderedlist'</span>, <span class=\"string\">'selectall'</span>, <span class=\"string\">'cleardoc'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'rowspacingtop'</span>, <span class=\"string\">'rowspacingbottom'</span>, <span class=\"string\">'lineheight'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'customstyle'</span>, <span class=\"string\">'paragraph'</span>, <span class=\"string\">'fontfamily'</span>, <span class=\"string\">'fontsize'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'directionalityltr'</span>, <span class=\"string\">'directionalityrtl'</span>, <span class=\"string\">'indent'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'justifyleft'</span>, <span class=\"string\">'justifycenter'</span>, <span class=\"string\">'justifyright'</span>, <span class=\"string\">'justifyjustify'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'touppercase'</span>, <span class=\"string\">'tolowercase'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'link'</span>, <span class=\"string\">'unlink'</span>, <span class=\"string\">'anchor'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'imagenone'</span>, <span class=\"string\">'imageleft'</span>, <span class=\"string\">'imageright'</span>, <span class=\"string\">'imagecenter'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'simpleupload'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'pagebreak'</span>, <span class=\"string\">'template'</span>, <span class=\"string\">'background'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'horizontal'</span>, <span class=\"string\">'date'</span>, <span class=\"string\">'time'</span>, <span class=\"string\">'spechars'</span>, <span class=\"string\">'snapscreen'</span>, <span class=\"string\">'wordimage'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'inserttable'</span>, <span class=\"string\">'deletetable'</span>, <span class=\"string\">'insertparagraphbeforetable'</span>, <span class=\"string\">'insertrow'</span>, <span class=\"string\">'deleterow'</span>, <span class=\"string\">'insertcol'</span>, <span class=\"string\">'deletecol'</span>, <span class=\"string\">'mergecells'</span>, <span class=\"string\">'mergeright'</span>, <span class=\"string\">'mergedown'</span>, <span class=\"string\">'splittocells'</span>, <span class=\"string\">'splittorows'</span>, <span class=\"string\">'splittocols'</span>, <span class=\"string\">'charts'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'preview'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    serverUrl: <span class=\"string\">'http://your-server-address'</span>  <span class=\"comment\">//这里是你服务端上传的请求地址</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：<code>http://your-server-address?action=config</code>。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中<code>ueditor/1.4.3.3/php/config.json</code>的内容就可以了。当然了具体配置你是可以自己按自己需求改动。</p>\n<p>接下来上传图片，随便上传一张图片，会发现ue的请求地址是<code>http://your-server-address?action=uploadimage</code>。这样是不是恍然大悟：</p>\n<blockquote>\n<p>   action参数是config，你就给他返回配置内容;<br>   action参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。</p>\n</blockquote>\n<p>上传结果返回格式是这样的：</p>\n<p>失败的情况</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"state\"</span>: <span class=\"string\">\"Failed\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"error msg\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功的情况</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"state\"</span>: <span class=\"string\">\"SUCCESS\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"original\"</span>: <span class=\"string\">\"aaa.jpg\"</span>,\t<span class=\"comment\">//图片源文件名</span></span><br><span class=\"line\">\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\".jpg\"</span>,\t\t<span class=\"comment\">//图片后缀</span></span><br><span class=\"line\">\t<span class=\"attr\">\"size\"</span>: <span class=\"number\">10240000</span>,\t<span class=\"comment\">//图片大小</span></span><br><span class=\"line\">\t<span class=\"attr\">\"title\"</span>: <span class=\"string\">\"aaa\"</span>,\t\t<span class=\"comment\">//图片img标签上的属性title</span></span><br><span class=\"line\">\t<span class=\"attr\">\"url\"</span>: <span class=\"string\">\"/upload/fsf3r.jpg\"</span>\t\t\t<span class=\"comment\">//图片上传之后的url</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了就这样</p>\n","site":{"data":{}},"more":"<p>之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。</p>\n<p>在ue实例化的时候你服务端上传的请求地址赋值给<code>serverUrl</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ue;</span><br><span class=\"line\">ue = UE.getEditor(<span class=\"string\">'editor'</span>, &#123;</span><br><span class=\"line\">    toolbars: [\t\t<span class=\"comment\">//这个是工具栏配置，自己定义和今天主题无关</span></span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">'fullscreen'</span>, <span class=\"string\">'source'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'undo'</span>, <span class=\"string\">'redo'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'bold'</span>, <span class=\"string\">'italic'</span>, <span class=\"string\">'underline'</span>, <span class=\"string\">'fontborder'</span>, <span class=\"string\">'strikethrough'</span>, <span class=\"string\">'superscript'</span>, <span class=\"string\">'subscript'</span>, <span class=\"string\">'removeformat'</span>, <span class=\"string\">'formatmatch'</span>, <span class=\"string\">'autotypeset'</span>, <span class=\"string\">'blockquote'</span>, <span class=\"string\">'pasteplain'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'forecolor'</span>, <span class=\"string\">'backcolor'</span>, <span class=\"string\">'insertorderedlist'</span>, <span class=\"string\">'insertunorderedlist'</span>, <span class=\"string\">'selectall'</span>, <span class=\"string\">'cleardoc'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'rowspacingtop'</span>, <span class=\"string\">'rowspacingbottom'</span>, <span class=\"string\">'lineheight'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'customstyle'</span>, <span class=\"string\">'paragraph'</span>, <span class=\"string\">'fontfamily'</span>, <span class=\"string\">'fontsize'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'directionalityltr'</span>, <span class=\"string\">'directionalityrtl'</span>, <span class=\"string\">'indent'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'justifyleft'</span>, <span class=\"string\">'justifycenter'</span>, <span class=\"string\">'justifyright'</span>, <span class=\"string\">'justifyjustify'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'touppercase'</span>, <span class=\"string\">'tolowercase'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'link'</span>, <span class=\"string\">'unlink'</span>, <span class=\"string\">'anchor'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'imagenone'</span>, <span class=\"string\">'imageleft'</span>, <span class=\"string\">'imageright'</span>, <span class=\"string\">'imagecenter'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'simpleupload'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'pagebreak'</span>, <span class=\"string\">'template'</span>, <span class=\"string\">'background'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'horizontal'</span>, <span class=\"string\">'date'</span>, <span class=\"string\">'time'</span>, <span class=\"string\">'spechars'</span>, <span class=\"string\">'snapscreen'</span>, <span class=\"string\">'wordimage'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'inserttable'</span>, <span class=\"string\">'deletetable'</span>, <span class=\"string\">'insertparagraphbeforetable'</span>, <span class=\"string\">'insertrow'</span>, <span class=\"string\">'deleterow'</span>, <span class=\"string\">'insertcol'</span>, <span class=\"string\">'deletecol'</span>, <span class=\"string\">'mergecells'</span>, <span class=\"string\">'mergeright'</span>, <span class=\"string\">'mergedown'</span>, <span class=\"string\">'splittocells'</span>, <span class=\"string\">'splittorows'</span>, <span class=\"string\">'splittocols'</span>, <span class=\"string\">'charts'</span>, <span class=\"string\">'|'</span>,</span><br><span class=\"line\">            <span class=\"string\">'preview'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    serverUrl: <span class=\"string\">'http://your-server-address'</span>  <span class=\"comment\">//这里是你服务端上传的请求地址</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：<code>http://your-server-address?action=config</code>。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中<code>ueditor/1.4.3.3/php/config.json</code>的内容就可以了。当然了具体配置你是可以自己按自己需求改动。</p>\n<p>接下来上传图片，随便上传一张图片，会发现ue的请求地址是<code>http://your-server-address?action=uploadimage</code>。这样是不是恍然大悟：</p>\n<blockquote>\n<p>   action参数是config，你就给他返回配置内容;<br>   action参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。</p>\n</blockquote>\n<p>上传结果返回格式是这样的：</p>\n<p>失败的情况</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"state\"</span>: <span class=\"string\">\"Failed\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"error msg\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功的情况</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"state\"</span>: <span class=\"string\">\"SUCCESS\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"original\"</span>: <span class=\"string\">\"aaa.jpg\"</span>,\t<span class=\"comment\">//图片源文件名</span></span><br><span class=\"line\">\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\".jpg\"</span>,\t\t<span class=\"comment\">//图片后缀</span></span><br><span class=\"line\">\t<span class=\"attr\">\"size\"</span>: <span class=\"number\">10240000</span>,\t<span class=\"comment\">//图片大小</span></span><br><span class=\"line\">\t<span class=\"attr\">\"title\"</span>: <span class=\"string\">\"aaa\"</span>,\t\t<span class=\"comment\">//图片img标签上的属性title</span></span><br><span class=\"line\">\t<span class=\"attr\">\"url\"</span>: <span class=\"string\">\"/upload/fsf3r.jpg\"</span>\t\t\t<span class=\"comment\">//图片上传之后的url</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了就这样</p>\n"},{"layout":"post","title":"2018,新年快乐！","date":"2017-12-31T16:17:50.000Z","author":"Heropoo","excerpt":"2018年了，新年快乐！","_content":"\n![example-pic](/assets/images/20180101000832.png)\n\n2018年了，新年快乐！\n\n加油！\n","source":"_posts/2018-01-01-2018-happy-new-year.md","raw":"---\nlayout: post\ntitle:  \"2018,新年快乐！\"\ndate:   2018-01-01 00:17:50\nauthor: \"Heropoo\"\ncategories: \n    - 岁月静好\ntags:\n    - 岁月静好\nexcerpt: \"2018年了，新年快乐！\"\n---\n\n![example-pic](/assets/images/20180101000832.png)\n\n2018年了，新年快乐！\n\n加油！\n","slug":"2018-01-01-2018-happy-new-year","published":1,"updated":"2019-11-01T02:16:34.411Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc8000wsm4w18bn3iku","content":"<p><img src=\"/assets/images/20180101000832.png\" alt=\"example-pic\"></p>\n<p>2018年了，新年快乐！</p>\n<p>加油！</p>\n","site":{"data":{}},"more":"<p><img src=\"/assets/images/20180101000832.png\" alt=\"example-pic\"></p>\n<p>2018年了，新年快乐！</p>\n<p>加油！</p>\n"},{"layout":"post","title":"整理几个常用的国内源","date":"2018-01-20T14:20:41.000Z","author":"Heropoo","excerpt":"整理几个常用的国内源","_content":"\n### Linux以及一些开源软件\n\n一些企业的：\n* 网易开源镜像站 [http://mirrors.163.com/](http://mirrors.163.com/)\n* 搜狐开源镜像站 [http://mirrors.sohu.com/](http://mirrors.sohu.com/)\n* 阿里云源镜像站 [http://mirrors.aliyun.com/](http://mirrors.aliyun.com/)\n* 首都在线 [http://mirrors.yun-idc.com/](http://mirrors.yun-idc.com/)\n\n各大高校的：\n* 中科大开源镜像站 [http://mirrors.ustc.edu.cn/](http://mirrors.ustc.edu.cn/)\n* 清华大学开源软件镜像站 [https://mirrors.tuna.tsinghua.edu.cn/](https://mirrors.tuna.tsinghua.edu.cn/)\n* 华中科技大学开源镜像站 [http://mirror.hust.edu.cn/](http://mirror.hust.edu.cn/)\n* 浙江大学开源镜像站 [http://mirrors.zju.edu.cn/](http://mirrors.zju.edu.cn/)\n* 东软信息学院开源镜像站 [http://mirrors.neusoft.edu.cn/](http://mirrors.neusoft.edu.cn/)\n* 北京理工大学开源软件镜像 [http://mirror.bit.edu.cn/](http://mirror.bit.edu.cn/)\n* 北京交通大学自由与开源软件镜像站 [https://mirror.bjtu.edu.cn/](https://mirror.bjtu.edu.cn/)\n* 兰州大学开源社区镜像站 [http://mirror.lzu.edu.cn/](http://mirror.lzu.edu.cn/)\n* 上海交通大学 [http://ftp.sjtu.edu.cn/](http://ftp.sjtu.edu.cn/)\n* 东北大学 [http://mirror.neu.edu.cn/](http://mirror.neu.edu.cn/)\n\n### js npm\n* 淘宝NPM镜像 [http://npm.taobao.org/](http://npm.taobao.org/)\n\n### php composer\n* Composer中文网 [http://www.phpcomposer.com/](http://www.phpcomposer.com/)\n* LaravelChina社区提供的镜像地址： https://packagist.laravel-china.org\n\n### Docker\n* DaoCloud [http://a42abd64.m.daocloud.io](http://a42abd64.m.daocloud.io)\n* 阿里云 要注册独立分配 [传送门](https://yq.aliyun.com/articles/29941)\n\n大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~","source":"_posts/2018-01-20-cn-mirrors.md","raw":"---\nlayout: post\ntitle:  \"整理几个常用的国内源\"\ndate:   2018-01-20 22:20:41\nauthor: \"Heropoo\"\ncategories: \n    - 资源\ntags:\n    - Linux\n    - JavaScript\n    - PHP\n    - Docker\nexcerpt: \"整理几个常用的国内源\"\n---\n\n### Linux以及一些开源软件\n\n一些企业的：\n* 网易开源镜像站 [http://mirrors.163.com/](http://mirrors.163.com/)\n* 搜狐开源镜像站 [http://mirrors.sohu.com/](http://mirrors.sohu.com/)\n* 阿里云源镜像站 [http://mirrors.aliyun.com/](http://mirrors.aliyun.com/)\n* 首都在线 [http://mirrors.yun-idc.com/](http://mirrors.yun-idc.com/)\n\n各大高校的：\n* 中科大开源镜像站 [http://mirrors.ustc.edu.cn/](http://mirrors.ustc.edu.cn/)\n* 清华大学开源软件镜像站 [https://mirrors.tuna.tsinghua.edu.cn/](https://mirrors.tuna.tsinghua.edu.cn/)\n* 华中科技大学开源镜像站 [http://mirror.hust.edu.cn/](http://mirror.hust.edu.cn/)\n* 浙江大学开源镜像站 [http://mirrors.zju.edu.cn/](http://mirrors.zju.edu.cn/)\n* 东软信息学院开源镜像站 [http://mirrors.neusoft.edu.cn/](http://mirrors.neusoft.edu.cn/)\n* 北京理工大学开源软件镜像 [http://mirror.bit.edu.cn/](http://mirror.bit.edu.cn/)\n* 北京交通大学自由与开源软件镜像站 [https://mirror.bjtu.edu.cn/](https://mirror.bjtu.edu.cn/)\n* 兰州大学开源社区镜像站 [http://mirror.lzu.edu.cn/](http://mirror.lzu.edu.cn/)\n* 上海交通大学 [http://ftp.sjtu.edu.cn/](http://ftp.sjtu.edu.cn/)\n* 东北大学 [http://mirror.neu.edu.cn/](http://mirror.neu.edu.cn/)\n\n### js npm\n* 淘宝NPM镜像 [http://npm.taobao.org/](http://npm.taobao.org/)\n\n### php composer\n* Composer中文网 [http://www.phpcomposer.com/](http://www.phpcomposer.com/)\n* LaravelChina社区提供的镜像地址： https://packagist.laravel-china.org\n\n### Docker\n* DaoCloud [http://a42abd64.m.daocloud.io](http://a42abd64.m.daocloud.io)\n* 阿里云 要注册独立分配 [传送门](https://yq.aliyun.com/articles/29941)\n\n大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~","slug":"2018-01-20-cn-mirrors","published":1,"updated":"2019-11-01T02:16:34.411Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsc9000ysm4wfj7xfm8y","content":"<h3 id=\"Linux以及一些开源软件\"><a href=\"#Linux以及一些开源软件\" class=\"headerlink\" title=\"Linux以及一些开源软件\"></a>Linux以及一些开源软件</h3><p>一些企业的：</p>\n<ul>\n<li>网易开源镜像站 <a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/</a></li>\n<li>搜狐开源镜像站 <a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.sohu.com/</a></li>\n<li>阿里云源镜像站 <a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/</a></li>\n<li>首都在线 <a href=\"http://mirrors.yun-idc.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.yun-idc.com/</a></li>\n</ul>\n<p>各大高校的：</p>\n<ul>\n<li>中科大开源镜像站 <a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.ustc.edu.cn/</a></li>\n<li>清华大学开源软件镜像站 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/</a></li>\n<li>华中科技大学开源镜像站 <a href=\"http://mirror.hust.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.hust.edu.cn/</a></li>\n<li>浙江大学开源镜像站 <a href=\"http://mirrors.zju.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.zju.edu.cn/</a></li>\n<li>东软信息学院开源镜像站 <a href=\"http://mirrors.neusoft.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.neusoft.edu.cn/</a></li>\n<li>北京理工大学开源软件镜像 <a href=\"http://mirror.bit.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.bit.edu.cn/</a></li>\n<li>北京交通大学自由与开源软件镜像站 <a href=\"https://mirror.bjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirror.bjtu.edu.cn/</a></li>\n<li>兰州大学开源社区镜像站 <a href=\"http://mirror.lzu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.lzu.edu.cn/</a></li>\n<li>上海交通大学 <a href=\"http://ftp.sjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://ftp.sjtu.edu.cn/</a></li>\n<li>东北大学 <a href=\"http://mirror.neu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.neu.edu.cn/</a></li>\n</ul>\n<h3 id=\"js-npm\"><a href=\"#js-npm\" class=\"headerlink\" title=\"js npm\"></a>js npm</h3><ul>\n<li>淘宝NPM镜像 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"php-composer\"><a href=\"#php-composer\" class=\"headerlink\" title=\"php composer\"></a>php composer</h3><ul>\n<li>Composer中文网 <a href=\"http://www.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">http://www.phpcomposer.com/</a></li>\n<li>LaravelChina社区提供的镜像地址： <a href=\"https://packagist.laravel-china.org\" target=\"_blank\" rel=\"noopener\">https://packagist.laravel-china.org</a></li>\n</ul>\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><ul>\n<li>DaoCloud <a href=\"http://a42abd64.m.daocloud.io\" target=\"_blank\" rel=\"noopener\">http://a42abd64.m.daocloud.io</a></li>\n<li>阿里云 要注册独立分配 <a href=\"https://yq.aliyun.com/articles/29941\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n</ul>\n<p>大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~</p>\n","site":{"data":{}},"more":"<h3 id=\"Linux以及一些开源软件\"><a href=\"#Linux以及一些开源软件\" class=\"headerlink\" title=\"Linux以及一些开源软件\"></a>Linux以及一些开源软件</h3><p>一些企业的：</p>\n<ul>\n<li>网易开源镜像站 <a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/</a></li>\n<li>搜狐开源镜像站 <a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.sohu.com/</a></li>\n<li>阿里云源镜像站 <a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/</a></li>\n<li>首都在线 <a href=\"http://mirrors.yun-idc.com/\" target=\"_blank\" rel=\"noopener\">http://mirrors.yun-idc.com/</a></li>\n</ul>\n<p>各大高校的：</p>\n<ul>\n<li>中科大开源镜像站 <a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.ustc.edu.cn/</a></li>\n<li>清华大学开源软件镜像站 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/</a></li>\n<li>华中科技大学开源镜像站 <a href=\"http://mirror.hust.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.hust.edu.cn/</a></li>\n<li>浙江大学开源镜像站 <a href=\"http://mirrors.zju.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.zju.edu.cn/</a></li>\n<li>东软信息学院开源镜像站 <a href=\"http://mirrors.neusoft.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirrors.neusoft.edu.cn/</a></li>\n<li>北京理工大学开源软件镜像 <a href=\"http://mirror.bit.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.bit.edu.cn/</a></li>\n<li>北京交通大学自由与开源软件镜像站 <a href=\"https://mirror.bjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://mirror.bjtu.edu.cn/</a></li>\n<li>兰州大学开源社区镜像站 <a href=\"http://mirror.lzu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.lzu.edu.cn/</a></li>\n<li>上海交通大学 <a href=\"http://ftp.sjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://ftp.sjtu.edu.cn/</a></li>\n<li>东北大学 <a href=\"http://mirror.neu.edu.cn/\" target=\"_blank\" rel=\"noopener\">http://mirror.neu.edu.cn/</a></li>\n</ul>\n<h3 id=\"js-npm\"><a href=\"#js-npm\" class=\"headerlink\" title=\"js npm\"></a>js npm</h3><ul>\n<li>淘宝NPM镜像 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"php-composer\"><a href=\"#php-composer\" class=\"headerlink\" title=\"php composer\"></a>php composer</h3><ul>\n<li>Composer中文网 <a href=\"http://www.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">http://www.phpcomposer.com/</a></li>\n<li>LaravelChina社区提供的镜像地址： <a href=\"https://packagist.laravel-china.org\" target=\"_blank\" rel=\"noopener\">https://packagist.laravel-china.org</a></li>\n</ul>\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><ul>\n<li>DaoCloud <a href=\"http://a42abd64.m.daocloud.io\" target=\"_blank\" rel=\"noopener\">http://a42abd64.m.daocloud.io</a></li>\n<li>阿里云 要注册独立分配 <a href=\"https://yq.aliyun.com/articles/29941\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n</ul>\n<p>大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~</p>\n"},{"layout":"post","title":"如果编程语言是一种武器(转自互联网)","date":"2018-01-23T06:58:10.000Z","author":"Heropoo","excerpt":"对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己","_content":"\n对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己\n\n![pic](/assets/images/uuaMZv.png)\n\nC语言是M1式加兰德步枪，很老但可靠。\n\n![pic](/assets/images/mE3eaiv.png)\n\nC++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。\n\n![pic](/assets/images/yuMVfu.png)\n\nPerl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。\n\n![pic](/assets/images/UvUNJz.png)\n\nJava是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。\n\n![pic](/assets/images/veQb227.png)\n\nScala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。\n\n![pic](/assets/images/3yYZVj2.png)\n\nJavaScript是一把宝剑，但没有剑柄。\n\n![pic](/assets/images/3qIb6rU.png)\n\nGo语言是一种自制的\"if err != nil\"发令枪，每一次发射后，你都必须要检查它是否真的发射了。\n\n![pic](/assets/images/AFZBvy2.png)\n\nRust语言是一种3D打印出的枪。将来也许真的能派上用场。\n\n![pic](/assets/images/2URZfy.png)\n\nbash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。\n\n![pic](/assets/images/v2U3qef.png)\n\nPython是一种\"v2/v3\"双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。\n\n![pic](/assets/images/7VZvMn.png)\n\nRuby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。\n\n![pic](/assets/images/iUFzqi.png)\n\nPHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。\n\n![pic](/assets/images/eAj6Nra.png)\n\nMathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。\n\n![pic](/assets/images/7v6jei.png)\n\nC#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。\n\n![pic](/assets/images/jUR7be.png)\n\nProlog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。\n\n![pic](/assets/images/bM3aaab.png)\n\nLisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。\n\n","source":"_posts/2018-01-23-If-the-programming-language-is-a-weapon.md","raw":"---\nlayout: post\ntitle:  \"如果编程语言是一种武器(转自互联网)\"\ndate:   2018-01-23 14:58:10\nauthor: \"Heropoo\"\ncategories: \n    - 互联网\ntags:\n    - 互联网\nexcerpt: \"对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己\"\n---\n\n对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己\n\n![pic](/assets/images/uuaMZv.png)\n\nC语言是M1式加兰德步枪，很老但可靠。\n\n![pic](/assets/images/mE3eaiv.png)\n\nC++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。\n\n![pic](/assets/images/yuMVfu.png)\n\nPerl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。\n\n![pic](/assets/images/UvUNJz.png)\n\nJava是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。\n\n![pic](/assets/images/veQb227.png)\n\nScala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。\n\n![pic](/assets/images/3yYZVj2.png)\n\nJavaScript是一把宝剑，但没有剑柄。\n\n![pic](/assets/images/3qIb6rU.png)\n\nGo语言是一种自制的\"if err != nil\"发令枪，每一次发射后，你都必须要检查它是否真的发射了。\n\n![pic](/assets/images/AFZBvy2.png)\n\nRust语言是一种3D打印出的枪。将来也许真的能派上用场。\n\n![pic](/assets/images/2URZfy.png)\n\nbash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。\n\n![pic](/assets/images/v2U3qef.png)\n\nPython是一种\"v2/v3\"双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。\n\n![pic](/assets/images/7VZvMn.png)\n\nRuby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。\n\n![pic](/assets/images/iUFzqi.png)\n\nPHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。\n\n![pic](/assets/images/eAj6Nra.png)\n\nMathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。\n\n![pic](/assets/images/7v6jei.png)\n\nC#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。\n\n![pic](/assets/images/jUR7be.png)\n\nProlog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。\n\n![pic](/assets/images/bM3aaab.png)\n\nLisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。\n\n","slug":"2018-01-23-If-the-programming-language-is-a-weapon","published":1,"updated":"2019-11-01T02:16:34.411Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsca0012sm4wezsz0vvk","content":"<p>对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己</p>\n<p><img src=\"/assets/images/uuaMZv.png\" alt=\"pic\"></p>\n<p>C语言是M1式加兰德步枪，很老但可靠。</p>\n<p><img src=\"/assets/images/mE3eaiv.png\" alt=\"pic\"></p>\n<p>C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。</p>\n<p><img src=\"/assets/images/yuMVfu.png\" alt=\"pic\"></p>\n<p>Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。</p>\n<p><img src=\"/assets/images/UvUNJz.png\" alt=\"pic\"></p>\n<p>Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。</p>\n<p><img src=\"/assets/images/veQb227.png\" alt=\"pic\"></p>\n<p>Scala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。</p>\n<p><img src=\"/assets/images/3yYZVj2.png\" alt=\"pic\"></p>\n<p>JavaScript是一把宝剑，但没有剑柄。</p>\n<p><img src=\"/assets/images/3qIb6rU.png\" alt=\"pic\"></p>\n<p>Go语言是一种自制的”if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了。</p>\n<p><img src=\"/assets/images/AFZBvy2.png\" alt=\"pic\"></p>\n<p>Rust语言是一种3D打印出的枪。将来也许真的能派上用场。</p>\n<p><img src=\"/assets/images/2URZfy.png\" alt=\"pic\"></p>\n<p>bash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。</p>\n<p><img src=\"/assets/images/v2U3qef.png\" alt=\"pic\"></p>\n<p>Python是一种”v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。</p>\n<p><img src=\"/assets/images/7VZvMn.png\" alt=\"pic\"></p>\n<p>Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。</p>\n<p><img src=\"/assets/images/iUFzqi.png\" alt=\"pic\"></p>\n<p>PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。</p>\n<p><img src=\"/assets/images/eAj6Nra.png\" alt=\"pic\"></p>\n<p>Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。</p>\n<p><img src=\"/assets/images/7v6jei.png\" alt=\"pic\"></p>\n<p>C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。</p>\n<p><img src=\"/assets/images/jUR7be.png\" alt=\"pic\"></p>\n<p>Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。</p>\n<p><img src=\"/assets/images/bM3aaab.png\" alt=\"pic\"></p>\n<p>Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。</p>\n","site":{"data":{}},"more":"<p>对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己</p>\n<p><img src=\"/assets/images/uuaMZv.png\" alt=\"pic\"></p>\n<p>C语言是M1式加兰德步枪，很老但可靠。</p>\n<p><img src=\"/assets/images/mE3eaiv.png\" alt=\"pic\"></p>\n<p>C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。</p>\n<p><img src=\"/assets/images/yuMVfu.png\" alt=\"pic\"></p>\n<p>Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。</p>\n<p><img src=\"/assets/images/UvUNJz.png\" alt=\"pic\"></p>\n<p>Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。</p>\n<p><img src=\"/assets/images/veQb227.png\" alt=\"pic\"></p>\n<p>Scala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。</p>\n<p><img src=\"/assets/images/3yYZVj2.png\" alt=\"pic\"></p>\n<p>JavaScript是一把宝剑，但没有剑柄。</p>\n<p><img src=\"/assets/images/3qIb6rU.png\" alt=\"pic\"></p>\n<p>Go语言是一种自制的”if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了。</p>\n<p><img src=\"/assets/images/AFZBvy2.png\" alt=\"pic\"></p>\n<p>Rust语言是一种3D打印出的枪。将来也许真的能派上用场。</p>\n<p><img src=\"/assets/images/2URZfy.png\" alt=\"pic\"></p>\n<p>bash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。</p>\n<p><img src=\"/assets/images/v2U3qef.png\" alt=\"pic\"></p>\n<p>Python是一种”v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。</p>\n<p><img src=\"/assets/images/7VZvMn.png\" alt=\"pic\"></p>\n<p>Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。</p>\n<p><img src=\"/assets/images/iUFzqi.png\" alt=\"pic\"></p>\n<p>PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。</p>\n<p><img src=\"/assets/images/eAj6Nra.png\" alt=\"pic\"></p>\n<p>Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。</p>\n<p><img src=\"/assets/images/7v6jei.png\" alt=\"pic\"></p>\n<p>C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。</p>\n<p><img src=\"/assets/images/jUR7be.png\" alt=\"pic\"></p>\n<p>Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。</p>\n<p><img src=\"/assets/images/bM3aaab.png\" alt=\"pic\"></p>\n<p>Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。</p>\n"},{"layout":"post","title":"Git的一些基本操作【持续更新】","date":"2018-03-31T13:47:05.000Z","author":"Heropoo","excerpt":"经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。","_content":"经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。\n\n### 分支操作\n\n* 查看分支\n```sh\ngit branch  #只显示本地分支\ngit branch -a #显示本地分支和远程分支\n```\n\n* 创建分支\n```sh\ngit checkout -b branch_name\n#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name\n```\n\n* 推送远程分支\n```sh\ngit push origin branch_name\n```\n\n* 删除分支\n```sh\ngit branch -d branch_name\n# 删除本地分支后并删除远程分支\ngit push --delete origin branch_name\n```\n\n### tag 标签操作\n* 查看tag列表\n```sh\ngit tag\n```\n\n* 新增tag\n```sh\ngit tag tag_name # 比如v1.0\n```\n\n* 推送本地指定tag到远程\n```sh\ngit push origin tag_name \n```\n\n* 推送全部本地tag到远程\n```sh\ngit push --tags \n```\n\n* 删除tag\n```sh\ngit tag -d \n# 删除tag后并删除远程tag\ngit push --delete origin tag_name\n```\n\n### github中fork的项目与原作者同步\n\n假如一个项目`Evil-S0ul/write-doc`地址: [https://github.com/Evil-S0ul/write-doc](https://github.com/Evil-S0ul/write-doc)\n\n我fork之后的项目是`heropoo/write-doc`地址: [https://github.com/heropoo/write-doc](https://github.com/heropoo/write-doc)\n\n接下来开始操作：\n\n1. 切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中\n```sh\ncd write-doc\ngit remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc\n```\n2. fetch刚添加的源分支到本地\n```sh\ngit fetch Evil-S0ul\n```\n3. 合并两个版本的代码\n```sh\ngit merge Evil-S0ul/master\n```\n4. 最后把合并后的代码push到你的Github项目上去就ok啦\n```sh\ngit push origin master\n```\n\n### 检出远程的某个分支或者tag\n```sh\ngit fetch\ngit checkout branch_name\n#或者\ngit checkout tag_name\n```\n\n### 同步且merge其他远程分支到当前本地分支\n```\ngit pull origin other_branch_name\n```\n\n### Git无法pull仓库refusing to merge unrelated histories\n有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报`refusing to merge unrelated histories`的错。解决方法是加一个参数`--allow-unrelated-histories`。\n\n假如我们的分支是master\n```sh\ngit pull origin master --allow-unrelated-histories\n```\n\n最后更新： 2018-11-18 17:59:06","source":"_posts/2018-03-31-git.md","raw":"---\nlayout: post\ntitle:  \"Git的一些基本操作【持续更新】\"\ndate:   2018-03-31 21:47:05\nauthor: \"Heropoo\"\ncategories: \n    - Git\ntags:\n    - Git\nexcerpt: \"经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。\"\n---\n经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。\n\n### 分支操作\n\n* 查看分支\n```sh\ngit branch  #只显示本地分支\ngit branch -a #显示本地分支和远程分支\n```\n\n* 创建分支\n```sh\ngit checkout -b branch_name\n#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name\n```\n\n* 推送远程分支\n```sh\ngit push origin branch_name\n```\n\n* 删除分支\n```sh\ngit branch -d branch_name\n# 删除本地分支后并删除远程分支\ngit push --delete origin branch_name\n```\n\n### tag 标签操作\n* 查看tag列表\n```sh\ngit tag\n```\n\n* 新增tag\n```sh\ngit tag tag_name # 比如v1.0\n```\n\n* 推送本地指定tag到远程\n```sh\ngit push origin tag_name \n```\n\n* 推送全部本地tag到远程\n```sh\ngit push --tags \n```\n\n* 删除tag\n```sh\ngit tag -d \n# 删除tag后并删除远程tag\ngit push --delete origin tag_name\n```\n\n### github中fork的项目与原作者同步\n\n假如一个项目`Evil-S0ul/write-doc`地址: [https://github.com/Evil-S0ul/write-doc](https://github.com/Evil-S0ul/write-doc)\n\n我fork之后的项目是`heropoo/write-doc`地址: [https://github.com/heropoo/write-doc](https://github.com/heropoo/write-doc)\n\n接下来开始操作：\n\n1. 切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中\n```sh\ncd write-doc\ngit remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc\n```\n2. fetch刚添加的源分支到本地\n```sh\ngit fetch Evil-S0ul\n```\n3. 合并两个版本的代码\n```sh\ngit merge Evil-S0ul/master\n```\n4. 最后把合并后的代码push到你的Github项目上去就ok啦\n```sh\ngit push origin master\n```\n\n### 检出远程的某个分支或者tag\n```sh\ngit fetch\ngit checkout branch_name\n#或者\ngit checkout tag_name\n```\n\n### 同步且merge其他远程分支到当前本地分支\n```\ngit pull origin other_branch_name\n```\n\n### Git无法pull仓库refusing to merge unrelated histories\n有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报`refusing to merge unrelated histories`的错。解决方法是加一个参数`--allow-unrelated-histories`。\n\n假如我们的分支是master\n```sh\ngit pull origin master --allow-unrelated-histories\n```\n\n最后更新： 2018-11-18 17:59:06","slug":"2018-03-31-git","published":1,"updated":"2019-11-01T02:16:34.412Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscc0016sm4w795t8gyp","content":"<p>经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。</p>\n<h3 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h3><ul>\n<li><p>查看分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\">#只显示本地分支</span></span><br><span class=\"line\">git branch -a <span class=\"comment\">#显示本地分支和远程分支</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name</span><br><span class=\"line\"><span class=\"comment\">#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送远程分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br><span class=\"line\"><span class=\"comment\"># 删除本地分支后并删除远程分支</span></span><br><span class=\"line\">git push --delete origin branch_name</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"tag-标签操作\"><a href=\"#tag-标签操作\" class=\"headerlink\" title=\"tag 标签操作\"></a>tag 标签操作</h3><ul>\n<li><p>查看tag列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag tag_name <span class=\"comment\"># 比如v1.0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送本地指定tag到远程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin tag_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送全部本地tag到远程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d </span><br><span class=\"line\"><span class=\"comment\"># 删除tag后并删除远程tag</span></span><br><span class=\"line\">git push --delete origin tag_name</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"github中fork的项目与原作者同步\"><a href=\"#github中fork的项目与原作者同步\" class=\"headerlink\" title=\"github中fork的项目与原作者同步\"></a>github中fork的项目与原作者同步</h3><p>假如一个项目<code>Evil-S0ul/write-doc</code>地址: <a href=\"https://github.com/Evil-S0ul/write-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/Evil-S0ul/write-doc</a></p>\n<p>我fork之后的项目是<code>heropoo/write-doc</code>地址: <a href=\"https://github.com/heropoo/write-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/heropoo/write-doc</a></p>\n<p>接下来开始操作：</p>\n<ol>\n<li>切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> write-doc</span><br><span class=\"line\">git remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc</span><br></pre></td></tr></table></figure></li>\n<li>fetch刚添加的源分支到本地<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch Evil-S0ul</span><br></pre></td></tr></table></figure></li>\n<li>合并两个版本的代码<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge Evil-S0ul/master</span><br></pre></td></tr></table></figure></li>\n<li>最后把合并后的代码push到你的Github项目上去就ok啦<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"检出远程的某个分支或者tag\"><a href=\"#检出远程的某个分支或者tag\" class=\"headerlink\" title=\"检出远程的某个分支或者tag\"></a>检出远程的某个分支或者tag</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br><span class=\"line\">git checkout branch_name</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\">git checkout tag_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步且merge其他远程分支到当前本地分支\"><a href=\"#同步且merge其他远程分支到当前本地分支\" class=\"headerlink\" title=\"同步且merge其他远程分支到当前本地分支\"></a>同步且merge其他远程分支到当前本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin other_branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git无法pull仓库refusing-to-merge-unrelated-histories\"><a href=\"#Git无法pull仓库refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"Git无法pull仓库refusing to merge unrelated histories\"></a>Git无法pull仓库refusing to merge unrelated histories</h3><p>有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报<code>refusing to merge unrelated histories</code>的错。解决方法是加一个参数<code>--allow-unrelated-histories</code>。</p>\n<p>假如我们的分支是master</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<p>最后更新： 2018-11-18 17:59:06</p>\n","site":{"data":{}},"more":"<p>经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。</p>\n<h3 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h3><ul>\n<li><p>查看分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\">#只显示本地分支</span></span><br><span class=\"line\">git branch -a <span class=\"comment\">#显示本地分支和远程分支</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name</span><br><span class=\"line\"><span class=\"comment\">#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送远程分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br><span class=\"line\"><span class=\"comment\"># 删除本地分支后并删除远程分支</span></span><br><span class=\"line\">git push --delete origin branch_name</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"tag-标签操作\"><a href=\"#tag-标签操作\" class=\"headerlink\" title=\"tag 标签操作\"></a>tag 标签操作</h3><ul>\n<li><p>查看tag列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag tag_name <span class=\"comment\"># 比如v1.0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送本地指定tag到远程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin tag_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送全部本地tag到远程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d </span><br><span class=\"line\"><span class=\"comment\"># 删除tag后并删除远程tag</span></span><br><span class=\"line\">git push --delete origin tag_name</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"github中fork的项目与原作者同步\"><a href=\"#github中fork的项目与原作者同步\" class=\"headerlink\" title=\"github中fork的项目与原作者同步\"></a>github中fork的项目与原作者同步</h3><p>假如一个项目<code>Evil-S0ul/write-doc</code>地址: <a href=\"https://github.com/Evil-S0ul/write-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/Evil-S0ul/write-doc</a></p>\n<p>我fork之后的项目是<code>heropoo/write-doc</code>地址: <a href=\"https://github.com/heropoo/write-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/heropoo/write-doc</a></p>\n<p>接下来开始操作：</p>\n<ol>\n<li>切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> write-doc</span><br><span class=\"line\">git remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc</span><br></pre></td></tr></table></figure></li>\n<li>fetch刚添加的源分支到本地<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch Evil-S0ul</span><br></pre></td></tr></table></figure></li>\n<li>合并两个版本的代码<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge Evil-S0ul/master</span><br></pre></td></tr></table></figure></li>\n<li>最后把合并后的代码push到你的Github项目上去就ok啦<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"检出远程的某个分支或者tag\"><a href=\"#检出远程的某个分支或者tag\" class=\"headerlink\" title=\"检出远程的某个分支或者tag\"></a>检出远程的某个分支或者tag</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br><span class=\"line\">git checkout branch_name</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\">git checkout tag_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步且merge其他远程分支到当前本地分支\"><a href=\"#同步且merge其他远程分支到当前本地分支\" class=\"headerlink\" title=\"同步且merge其他远程分支到当前本地分支\"></a>同步且merge其他远程分支到当前本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin other_branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git无法pull仓库refusing-to-merge-unrelated-histories\"><a href=\"#Git无法pull仓库refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"Git无法pull仓库refusing to merge unrelated histories\"></a>Git无法pull仓库refusing to merge unrelated histories</h3><p>有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报<code>refusing to merge unrelated histories</code>的错。解决方法是加一个参数<code>--allow-unrelated-histories</code>。</p>\n<p>假如我们的分支是master</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<p>最后更新： 2018-11-18 17:59:06</p>\n"},{"layout":"post","title":"Rust更换国内源","date":"2018-01-24T15:25:36.000Z","author":"Heropoo","excerpt":"今天学cargo这节，cargo build 时安装外部依赖真的慢啊。果断找国内源","_content":"今天学cargo这节，`cargo build`时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~\\*)\n\n教程开始：\n\n设置两个环境变量\n```sh\nexport RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static\nexport RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup\n```\n或者直接写入`~/.bashrc`\n\n使用ustcu的源下载安装rust\n```sh\ncurl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh\n```\n编辑`~/.cargo/config`写入\n```\n[registry]\nindex = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n[source.ustc]\nregistry = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n```\n现在cargo安装外部依赖是不是贼溜~😉","source":"_posts/2018-01-24-change-rust-mirrors.md","raw":"---\nlayout: post\ntitle:  \"Rust更换国内源\"\ndate:   2018-01-24 23:25:36\nauthor: \"Heropoo\"\ncategories: \n    - Rust\ntags:\n    - Rust\nexcerpt: \"今天学cargo这节，cargo build 时安装外部依赖真的慢啊。果断找国内源\"\n---\n今天学cargo这节，`cargo build`时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~\\*)\n\n教程开始：\n\n设置两个环境变量\n```sh\nexport RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static\nexport RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup\n```\n或者直接写入`~/.bashrc`\n\n使用ustcu的源下载安装rust\n```sh\ncurl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh\n```\n编辑`~/.cargo/config`写入\n```\n[registry]\nindex = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n[source.ustc]\nregistry = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n```\n现在cargo安装外部依赖是不是贼溜~😉","slug":"2018-01-24-change-rust-mirrors","published":1,"updated":"2019-11-01T02:16:34.412Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscd0018sm4wfxap0hsi","content":"<p>今天学cargo这节，<code>cargo build</code>时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大<del>(￣▽￣)</del>*)</p>\n<p>教程开始：</p>\n<p>设置两个环境变量</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class=\"line\"><span class=\"built_in\">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure>\n<p>或者直接写入<code>~/.bashrc</code></p>\n<p>使用ustcu的源下载安装rust</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh</span><br></pre></td></tr></table></figure>\n<p>编辑<code>~/.cargo/config</code>写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[registry]</span><br><span class=\"line\">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class=\"line\">replace-with = &apos;ustc&apos;</span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure>\n<p>现在cargo安装外部依赖是不是贼溜~😉</p>\n","site":{"data":{}},"more":"<p>今天学cargo这节，<code>cargo build</code>时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大<del>(￣▽￣)</del>*)</p>\n<p>教程开始：</p>\n<p>设置两个环境变量</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class=\"line\"><span class=\"built_in\">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure>\n<p>或者直接写入<code>~/.bashrc</code></p>\n<p>使用ustcu的源下载安装rust</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh</span><br></pre></td></tr></table></figure>\n<p>编辑<code>~/.cargo/config</code>写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[registry]</span><br><span class=\"line\">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class=\"line\">replace-with = &apos;ustc&apos;</span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure>\n<p>现在cargo安装外部依赖是不是贼溜~😉</p>\n"},{"layout":"post","title":"使用PHP写Git的自动部署webhook脚本","date":"2018-05-01T02:16:43.000Z","author":"Heropoo","excerpt":"现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本","_content":"现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。\n\n### 最简单的流程\n比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是`git pull origin master`。\n\n### 最简单的实现\n* 编写`webhook.php`\n\n```php\n<?php\n\n// todo 在此可以写校验权限密码之类的代码\n\n\n$path = dirname(__DIR__);\n$log_file = $path.'/runtime/logs/webhook-pull-error-output.log';\t//错误日志文件的路径\n\n$descriptorspec = array(\n    0 => array(\"pipe\", \"r\"),  // 标准输入，子进程从此管道中读取数据\n    1 => array(\"pipe\", \"w\"),  // 标准输出，子进程向此管道中写入数据\n    2 => array(\"file\", $log_file, \"a\") // 标准错误，写入到一个文件\n);\n\n$cwd = $path;\n$env = array('PATH' => $_SERVER['PATH']);\n\n$process = proc_open('sudo git pull origin master', $descriptorspec, $pipes, $cwd, $env);\n\necho '<pre>';\nif (is_resource($process)) {\n    // $pipes 现在看起来是这样的：\n    // 0 => 可以向子进程标准输入写入的句柄\n    // 1 => 可以从子进程标准输出读取的句柄\n    // 错误输出将被追加到文件 /tmp/error-output.txt\n\n    echo stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    // 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。\n    $return_value = proc_close($process);\n\n    echo PHP_EOL.\"command returned $return_value\\n\";\n}\n```\n\n* 添加php脚本的执行用户sudoers中\n\n比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data\n```sh\nvisudo\n--------------------------------\n...\n#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git\n```\n\n* push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　\n","source":"_posts/2018-05-01-git-webhook.md","raw":"---\nlayout: post\ntitle:  \"使用PHP写Git的自动部署webhook脚本\"\ndate:   2018-05-01 10:16:43\nauthor: \"Heropoo\"\ncategories: \n    - Git\n    - PHP\ntags:\n    - Git\n    - PHP\n    - Webhook\nexcerpt: \"现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本\"\n---\n现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。\n\n### 最简单的流程\n比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是`git pull origin master`。\n\n### 最简单的实现\n* 编写`webhook.php`\n\n```php\n<?php\n\n// todo 在此可以写校验权限密码之类的代码\n\n\n$path = dirname(__DIR__);\n$log_file = $path.'/runtime/logs/webhook-pull-error-output.log';\t//错误日志文件的路径\n\n$descriptorspec = array(\n    0 => array(\"pipe\", \"r\"),  // 标准输入，子进程从此管道中读取数据\n    1 => array(\"pipe\", \"w\"),  // 标准输出，子进程向此管道中写入数据\n    2 => array(\"file\", $log_file, \"a\") // 标准错误，写入到一个文件\n);\n\n$cwd = $path;\n$env = array('PATH' => $_SERVER['PATH']);\n\n$process = proc_open('sudo git pull origin master', $descriptorspec, $pipes, $cwd, $env);\n\necho '<pre>';\nif (is_resource($process)) {\n    // $pipes 现在看起来是这样的：\n    // 0 => 可以向子进程标准输入写入的句柄\n    // 1 => 可以从子进程标准输出读取的句柄\n    // 错误输出将被追加到文件 /tmp/error-output.txt\n\n    echo stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    // 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。\n    $return_value = proc_close($process);\n\n    echo PHP_EOL.\"command returned $return_value\\n\";\n}\n```\n\n* 添加php脚本的执行用户sudoers中\n\n比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data\n```sh\nvisudo\n--------------------------------\n...\n#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git\n```\n\n* push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　\n","slug":"2018-05-01-git-webhook","published":1,"updated":"2019-11-01T02:16:34.412Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsce001bsm4w8xxhe4dh","content":"<p>现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。</p>\n<h3 id=\"最简单的流程\"><a href=\"#最简单的流程\" class=\"headerlink\" title=\"最简单的流程\"></a>最简单的流程</h3><p>比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是<code>git pull origin master</code>。</p>\n<h3 id=\"最简单的实现\"><a href=\"#最简单的实现\" class=\"headerlink\" title=\"最简单的实现\"></a>最简单的实现</h3><ul>\n<li>编写<code>webhook.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 在此可以写校验权限密码之类的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$path = dirname(<span class=\"keyword\">__DIR__</span>);</span><br><span class=\"line\">$log_file = $path.<span class=\"string\">'/runtime/logs/webhook-pull-error-output.log'</span>;\t<span class=\"comment\">//错误日志文件的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">$descriptorspec = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"pipe\"</span>, <span class=\"string\">\"r\"</span>),  <span class=\"comment\">// 标准输入，子进程从此管道中读取数据</span></span><br><span class=\"line\">    <span class=\"number\">1</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"pipe\"</span>, <span class=\"string\">\"w\"</span>),  <span class=\"comment\">// 标准输出，子进程向此管道中写入数据</span></span><br><span class=\"line\">    <span class=\"number\">2</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"file\"</span>, $log_file, <span class=\"string\">\"a\"</span>) <span class=\"comment\">// 标准错误，写入到一个文件</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">$cwd = $path;</span><br><span class=\"line\">$env = <span class=\"keyword\">array</span>(<span class=\"string\">'PATH'</span> =&gt; $_SERVER[<span class=\"string\">'PATH'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$process = proc_open(<span class=\"string\">'sudo git pull origin master'</span>, $descriptorspec, $pipes, $cwd, $env);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_resource($process)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// $pipes 现在看起来是这样的：</span></span><br><span class=\"line\">    <span class=\"comment\">// 0 =&gt; 可以向子进程标准输入写入的句柄</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 =&gt; 可以从子进程标准输出读取的句柄</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误输出将被追加到文件 /tmp/error-output.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> stream_get_contents($pipes[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    fclose($pipes[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span></span><br><span class=\"line\">    $return_value = proc_close($process);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL.<span class=\"string\">\"command returned $return_value\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加php脚本的执行用户sudoers中</li>\n</ul>\n<p>比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的</span></span><br><span class=\"line\">www-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　</li>\n</ul>\n","site":{"data":{}},"more":"<p>现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。</p>\n<h3 id=\"最简单的流程\"><a href=\"#最简单的流程\" class=\"headerlink\" title=\"最简单的流程\"></a>最简单的流程</h3><p>比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是<code>git pull origin master</code>。</p>\n<h3 id=\"最简单的实现\"><a href=\"#最简单的实现\" class=\"headerlink\" title=\"最简单的实现\"></a>最简单的实现</h3><ul>\n<li>编写<code>webhook.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 在此可以写校验权限密码之类的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$path = dirname(<span class=\"keyword\">__DIR__</span>);</span><br><span class=\"line\">$log_file = $path.<span class=\"string\">'/runtime/logs/webhook-pull-error-output.log'</span>;\t<span class=\"comment\">//错误日志文件的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">$descriptorspec = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"pipe\"</span>, <span class=\"string\">\"r\"</span>),  <span class=\"comment\">// 标准输入，子进程从此管道中读取数据</span></span><br><span class=\"line\">    <span class=\"number\">1</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"pipe\"</span>, <span class=\"string\">\"w\"</span>),  <span class=\"comment\">// 标准输出，子进程向此管道中写入数据</span></span><br><span class=\"line\">    <span class=\"number\">2</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">\"file\"</span>, $log_file, <span class=\"string\">\"a\"</span>) <span class=\"comment\">// 标准错误，写入到一个文件</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">$cwd = $path;</span><br><span class=\"line\">$env = <span class=\"keyword\">array</span>(<span class=\"string\">'PATH'</span> =&gt; $_SERVER[<span class=\"string\">'PATH'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$process = proc_open(<span class=\"string\">'sudo git pull origin master'</span>, $descriptorspec, $pipes, $cwd, $env);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_resource($process)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// $pipes 现在看起来是这样的：</span></span><br><span class=\"line\">    <span class=\"comment\">// 0 =&gt; 可以向子进程标准输入写入的句柄</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 =&gt; 可以从子进程标准输出读取的句柄</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误输出将被追加到文件 /tmp/error-output.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> stream_get_contents($pipes[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    fclose($pipes[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span></span><br><span class=\"line\">    $return_value = proc_close($process);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL.<span class=\"string\">\"command returned $return_value\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加php脚本的执行用户sudoers中</li>\n</ul>\n<p>比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的</span></span><br><span class=\"line\">www-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　</li>\n</ul>\n"},{"layout":"post","title":"Composer官方镜像太慢或者被墙无法使用时的几种解决方案","date":"2018-08-02T04:11:06.000Z","author":"Heropoo","excerpt":"Composer官方镜像太慢或者被墙无法使用时的几种解决方案","_content":"Composer官方镜像太慢或者被墙无法使用时的几种解决方案\n\n### 使用代理\n被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量`http_proxy`和`https_proxy`就可以使用了。\n\nMac OS / Linux 终端\n```bash\nexport http_proxy=127.0.0.1:1080\nexport https_proxy=127.0.0.1:1080\n```\nwindows cmd命令行\n```cmd\nset http_proxy=127.0.0.1:1080\nset https_proxy=127.0.0.1:1080\n```\n\n这样就可以了，愉快的下载各种包吧~\n\n### 使用国内镜像地址\n> * cnpkg提供的镜像地址： https://php.cnpkg.org\n> * LaravelChina社区提供的镜像地址： https://packagist.laravel-china.org\n> * Composer中文网提供的镜像地址： https://packagist.phpcomposer.com\n\n镜像使用方法:\n\n全局配置（推荐）:\n```\ncomposer config -g repo.packagist composer https://php.cnpkg.org\n```\n\n单独项目使用：\n```\ncomposer config repo.packagist composer https://php.cnpkg.org\n```\n\n取消镜像：\n```\ncomposer config -g --unset repos.packagist\n```\n\n---- 最后更新时间： 2019-03-18 15:09:53\n\n","source":"_posts/2018-08-22-composer-mirrors.md","raw":"---\nlayout: post\ntitle:  \"Composer官方镜像太慢或者被墙无法使用时的几种解决方案\"\ndate:   2018-08-2 12:11:06\nauthor: \"Heropoo\"\ncategories: \n    - PHP\ntags:\n    - Composer\n    - PHP\nexcerpt: \"Composer官方镜像太慢或者被墙无法使用时的几种解决方案\"\n---\nComposer官方镜像太慢或者被墙无法使用时的几种解决方案\n\n### 使用代理\n被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量`http_proxy`和`https_proxy`就可以使用了。\n\nMac OS / Linux 终端\n```bash\nexport http_proxy=127.0.0.1:1080\nexport https_proxy=127.0.0.1:1080\n```\nwindows cmd命令行\n```cmd\nset http_proxy=127.0.0.1:1080\nset https_proxy=127.0.0.1:1080\n```\n\n这样就可以了，愉快的下载各种包吧~\n\n### 使用国内镜像地址\n> * cnpkg提供的镜像地址： https://php.cnpkg.org\n> * LaravelChina社区提供的镜像地址： https://packagist.laravel-china.org\n> * Composer中文网提供的镜像地址： https://packagist.phpcomposer.com\n\n镜像使用方法:\n\n全局配置（推荐）:\n```\ncomposer config -g repo.packagist composer https://php.cnpkg.org\n```\n\n单独项目使用：\n```\ncomposer config repo.packagist composer https://php.cnpkg.org\n```\n\n取消镜像：\n```\ncomposer config -g --unset repos.packagist\n```\n\n---- 最后更新时间： 2019-03-18 15:09:53\n\n","slug":"2018-08-22-composer-mirrors","published":1,"updated":"2019-11-01T02:34:16.313Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscf001csm4waycdbu1y","content":"<p>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</p>\n<h3 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理</h3><p>被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量<code>http_proxy</code>和<code>https_proxy</code>就可以使用了。</p>\n<p>Mac OS / Linux 终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=127.0.0.1:1080</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p>windows cmd命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">1080</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">1080</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就可以了，愉快的下载各种包吧~</p>\n<h3 id=\"使用国内镜像地址\"><a href=\"#使用国内镜像地址\" class=\"headerlink\" title=\"使用国内镜像地址\"></a>使用国内镜像地址</h3><blockquote>\n<ul>\n<li>cnpkg提供的镜像地址： <a href=\"https://php.cnpkg.org\" target=\"_blank\" rel=\"noopener\">https://php.cnpkg.org</a></li>\n<li>LaravelChina社区提供的镜像地址： <a href=\"https://packagist.laravel-china.org\" target=\"_blank\" rel=\"noopener\">https://packagist.laravel-china.org</a></li>\n<li>Composer中文网提供的镜像地址： <a href=\"https://packagist.phpcomposer.com\" target=\"_blank\" rel=\"noopener\">https://packagist.phpcomposer.com</a></li>\n</ul>\n</blockquote>\n<p>镜像使用方法:</p>\n<p>全局配置（推荐）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure>\n\n<p>单独项目使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure>\n\n<p>取消镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p>—- 最后更新时间： 2019-03-18 15:09:53</p>\n","site":{"data":{}},"more":"<p>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</p>\n<h3 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理</h3><p>被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量<code>http_proxy</code>和<code>https_proxy</code>就可以使用了。</p>\n<p>Mac OS / Linux 终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=127.0.0.1:1080</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p>windows cmd命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">1080</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">1080</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就可以了，愉快的下载各种包吧~</p>\n<h3 id=\"使用国内镜像地址\"><a href=\"#使用国内镜像地址\" class=\"headerlink\" title=\"使用国内镜像地址\"></a>使用国内镜像地址</h3><blockquote>\n<ul>\n<li>cnpkg提供的镜像地址： <a href=\"https://php.cnpkg.org\" target=\"_blank\" rel=\"noopener\">https://php.cnpkg.org</a></li>\n<li>LaravelChina社区提供的镜像地址： <a href=\"https://packagist.laravel-china.org\" target=\"_blank\" rel=\"noopener\">https://packagist.laravel-china.org</a></li>\n<li>Composer中文网提供的镜像地址： <a href=\"https://packagist.phpcomposer.com\" target=\"_blank\" rel=\"noopener\">https://packagist.phpcomposer.com</a></li>\n</ul>\n</blockquote>\n<p>镜像使用方法:</p>\n<p>全局配置（推荐）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure>\n\n<p>单独项目使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure>\n\n<p>取消镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p>—- 最后更新时间： 2019-03-18 15:09:53</p>\n"},{"layout":"post","title":"使用Bing搜索引擎做站内搜索","date":"2018-09-15T12:14:05.000Z","author":"Heropoo","excerpt":"使用Bing搜索引擎做站内搜索","_content":"因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。\n\n\n大概是这样的效果\n![example-pic](/assets/images/20180916201818.png)\n\n\n观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字`git site:www.ioio.pw`提交之后的url是`https://bing.com/search?q=git+site%3Awww.ioio.pw`\n\n所以开始写个简单的form表单就好了，代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>bing search</title>\n</head>\n<body>\n\t<h1>Bing Search</h1>\n\t<form action=\"https://bing.com/search\" id=\"searchForm\">\n\t\t<input type=\"text\" name=\"q\" value=\"\" required>\n\t\t<input type=\"hidden\" name=\"site\" value=\"www.ioio.pw\">\n\t\t<input type=\"submit\" value=\"Search\">\n\t</form>\n<script>\n\tvar searchForm = document.getElementById('searchForm');\n\tsearchForm.onsubmit = function(){\n\t\tvar url = this.action;\n\t\tvar q = this.children['q'].value;\n\t\tvar site = this.children['site'].value;\n\t\tvar url = url + '?q='+q+' site:'+ site;\n\t\twindow.open(url);\n\t\treturn false;\n\t};\n</script>\n</body>\n</html>\n```\n\n好了，搞定~\n","source":"_posts/2018-09-16-bing-site-search.md","raw":"---\nlayout: post\ntitle:  \"使用Bing搜索引擎做站内搜索\"\ndate:   2018-09-15 20:14:05\nauthor: \"Heropoo\"\ncategories: \n    - 搜索引擎\ntags:\n    - 搜索引擎\n    - 站内搜索\nexcerpt: \"使用Bing搜索引擎做站内搜索\"\n---\n因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。\n\n\n大概是这样的效果\n![example-pic](/assets/images/20180916201818.png)\n\n\n观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字`git site:www.ioio.pw`提交之后的url是`https://bing.com/search?q=git+site%3Awww.ioio.pw`\n\n所以开始写个简单的form表单就好了，代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>bing search</title>\n</head>\n<body>\n\t<h1>Bing Search</h1>\n\t<form action=\"https://bing.com/search\" id=\"searchForm\">\n\t\t<input type=\"text\" name=\"q\" value=\"\" required>\n\t\t<input type=\"hidden\" name=\"site\" value=\"www.ioio.pw\">\n\t\t<input type=\"submit\" value=\"Search\">\n\t</form>\n<script>\n\tvar searchForm = document.getElementById('searchForm');\n\tsearchForm.onsubmit = function(){\n\t\tvar url = this.action;\n\t\tvar q = this.children['q'].value;\n\t\tvar site = this.children['site'].value;\n\t\tvar url = url + '?q='+q+' site:'+ site;\n\t\twindow.open(url);\n\t\treturn false;\n\t};\n</script>\n</body>\n</html>\n```\n\n好了，搞定~\n","slug":"2018-09-16-bing-site-search","published":1,"updated":"2019-11-01T02:16:34.413Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscg001gsm4wfhdqa2bj","content":"<p>因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。</p>\n<p>大概是这样的效果<br><img src=\"/assets/images/20180916201818.png\" alt=\"example-pic\"></p>\n<p>观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字<code>git site:www.ioio.pw</code>提交之后的url是<code>https://bing.com/search?q=git+site%3Awww.ioio.pw</code></p>\n<p>所以开始写个简单的form表单就好了，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>bing search<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bing Search<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://bing.com/search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchForm\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"q\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"site\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"www.ioio.pw\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Search\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> searchForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'searchForm'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\tsearchForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> url = <span class=\"keyword\">this</span>.action;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> q = <span class=\"keyword\">this</span>.children[<span class=\"string\">'q'</span>].value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> site = <span class=\"keyword\">this</span>.children[<span class=\"string\">'site'</span>].value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> url = url + <span class=\"string\">'?q='</span>+q+<span class=\"string\">' site:'</span>+ site;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">window</span>.open(url);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，搞定~</p>\n","site":{"data":{}},"more":"<p>因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。</p>\n<p>大概是这样的效果<br><img src=\"/assets/images/20180916201818.png\" alt=\"example-pic\"></p>\n<p>观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字<code>git site:www.ioio.pw</code>提交之后的url是<code>https://bing.com/search?q=git+site%3Awww.ioio.pw</code></p>\n<p>所以开始写个简单的form表单就好了，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>bing search<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bing Search<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://bing.com/search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchForm\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"q\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"site\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"www.ioio.pw\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Search\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> searchForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'searchForm'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\tsearchForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> url = <span class=\"keyword\">this</span>.action;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> q = <span class=\"keyword\">this</span>.children[<span class=\"string\">'q'</span>].value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> site = <span class=\"keyword\">this</span>.children[<span class=\"string\">'site'</span>].value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> url = url + <span class=\"string\">'?q='</span>+q+<span class=\"string\">' site:'</span>+ site;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">window</span>.open(url);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，搞定~</p>\n"},{"layout":"post","title":"盗将行(转)","date":"2018-09-18T10:10:52.000Z","author":"一个人的兵荒馬乱","from":{"name":"简书","link":"https://www.jianshu.com/p/7aa6bfbb0df1"},"excerpt":"庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。","_content":"野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……\n\n野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……\n\n公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”\n\n“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”\n\n“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……\n\n作者：一个人的兵荒馬乱\n链接：https://www.jianshu.com/p/7aa6bfbb0df1\n來源：简书","source":"_posts/2018-09-18-盗将行.md","raw":"---\nlayout: post\ntitle:  \"盗将行(转)\"\ndate:   2018-09-18 18:10:52\nauthor: \"一个人的兵荒馬乱\"\nfrom: \n    name: \"简书\"\n    link: \"https://www.jianshu.com/p/7aa6bfbb0df1\"\ncategories: \n    - 听风雨\ntags: \n    - 听风雨\n\nexcerpt: \"庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。\"\n---\n野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……\n\n野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……\n\n公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”\n\n“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”\n\n“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……\n\n作者：一个人的兵荒馬乱\n链接：https://www.jianshu.com/p/7aa6bfbb0df1\n來源：简书","slug":"2018-09-18-盗将行","published":1,"updated":"2019-11-01T02:16:34.413Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsch001ism4wgzqcgfs6","content":"<p>野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……</p>\n<p>野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……</p>\n<p>公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”</p>\n<p>“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”</p>\n<p>“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……</p>\n<p>作者：一个人的兵荒馬乱<br>链接：<a href=\"https://www.jianshu.com/p/7aa6bfbb0df1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7aa6bfbb0df1</a><br>來源：简书</p>\n","site":{"data":{}},"more":"<p>野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……</p>\n<p>野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……</p>\n<p>公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”</p>\n<p>“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”</p>\n<p>“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……</p>\n<p>作者：一个人的兵荒馬乱<br>链接：<a href=\"https://www.jianshu.com/p/7aa6bfbb0df1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7aa6bfbb0df1</a><br>來源：简书</p>\n"},{"layout":"post","title":"Docker容器动态添加端口","date":"2018-09-16T15:40:33.000Z","author":"Heropoo","excerpt":"给一个已经在运行的docker容器添加端口","_content":"突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。\n\n参考：\n* [怎么给运行中的docker容器添加新的端口](https://blog.csdn.net/zuoshenglo/article/details/78402772)\n* [修改docker容器端口映射的方法](https://blog.csdn.net/wesleyflagon/article/details/78961990)\n* [iptable规则查看，添加，删除和修改](https://blog.csdn.net/xfks55/article/details/50148389)\n\n## 方法1 修改iptables端口映射\n> docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。\n\n比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：\n```sh\nsudo iptables -t nat -vnL\n```\n\n在结果中有一条：\n```\nChain DOCKER\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80\n```\n我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3\n\n也可以通过inspect命令查看容器ip\n```sh\ndocker inspect containerId |grep IPAddress\n```\n\n我们想再增加一个端口映射，比如`8081->81`，就在这个链条是再加一条规则：\n```sh\nsudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81\n```\n\n如果加错了或者想修改：\n\n先显示行号查看\n```sh\nsudo iptables -t nat -vnL DOCKER --line-number\n```\n\n删除规则3\n```sh\nsudo iptables -t nat -D DOCKER 3\n```\n\n## 方法2 修改容器配置文件\n容器的配置文件`/var/lib/docker/containers/[containerId]`目录下，`hostconfig.json`和`config.v2.json`\n修改好之后，重启容器服务。\n\n## 方法3 把运行中的容器生成新的镜像，然后运行新的镜像\n\n1. 提交一个运行中的容器为镜像\n```sh\ndocker commit containerid heropoo/example\n```\n\n2. 运行`heropoo/example`镜像并添加8080映射容器80端口\n```sh\ndocker run -d -p 8000:80  heropoo/example /bin/sh\n```\n\n试试吧~😎","source":"_posts/2018-09-16-docker-container-port.md","raw":"---\nlayout: post\ntitle:  \"Docker容器动态添加端口\"\ndate:   2018-09-16 23:40:33\nauthor: \"Heropoo\"\ncategories: \n    - Docker\ntags:\n    - 虚拟化\n    - 容器\n    - Docker\nexcerpt: \"给一个已经在运行的docker容器添加端口\"\n---\n突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。\n\n参考：\n* [怎么给运行中的docker容器添加新的端口](https://blog.csdn.net/zuoshenglo/article/details/78402772)\n* [修改docker容器端口映射的方法](https://blog.csdn.net/wesleyflagon/article/details/78961990)\n* [iptable规则查看，添加，删除和修改](https://blog.csdn.net/xfks55/article/details/50148389)\n\n## 方法1 修改iptables端口映射\n> docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。\n\n比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：\n```sh\nsudo iptables -t nat -vnL\n```\n\n在结果中有一条：\n```\nChain DOCKER\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80\n```\n我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3\n\n也可以通过inspect命令查看容器ip\n```sh\ndocker inspect containerId |grep IPAddress\n```\n\n我们想再增加一个端口映射，比如`8081->81`，就在这个链条是再加一条规则：\n```sh\nsudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81\n```\n\n如果加错了或者想修改：\n\n先显示行号查看\n```sh\nsudo iptables -t nat -vnL DOCKER --line-number\n```\n\n删除规则3\n```sh\nsudo iptables -t nat -D DOCKER 3\n```\n\n## 方法2 修改容器配置文件\n容器的配置文件`/var/lib/docker/containers/[containerId]`目录下，`hostconfig.json`和`config.v2.json`\n修改好之后，重启容器服务。\n\n## 方法3 把运行中的容器生成新的镜像，然后运行新的镜像\n\n1. 提交一个运行中的容器为镜像\n```sh\ndocker commit containerid heropoo/example\n```\n\n2. 运行`heropoo/example`镜像并添加8080映射容器80端口\n```sh\ndocker run -d -p 8000:80  heropoo/example /bin/sh\n```\n\n试试吧~😎","slug":"2018-09-16-docker-container-port","published":1,"updated":"2019-11-01T02:16:34.413Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsci001nsm4w58d3bjjx","content":"<p>突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/zuoshenglo/article/details/78402772\" target=\"_blank\" rel=\"noopener\">怎么给运行中的docker容器添加新的端口</a></li>\n<li><a href=\"https://blog.csdn.net/wesleyflagon/article/details/78961990\" target=\"_blank\" rel=\"noopener\">修改docker容器端口映射的方法</a></li>\n<li><a href=\"https://blog.csdn.net/xfks55/article/details/50148389\" target=\"_blank\" rel=\"noopener\">iptable规则查看，添加，删除和修改</a></li>\n</ul>\n<h2 id=\"方法1-修改iptables端口映射\"><a href=\"#方法1-修改iptables端口映射\" class=\"headerlink\" title=\"方法1 修改iptables端口映射\"></a>方法1 修改iptables端口映射</h2><blockquote>\n<p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p>\n</blockquote>\n<p>比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -vnL</span><br></pre></td></tr></table></figure>\n\n<p>在结果中有一条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain DOCKER</span><br><span class=\"line\">target     prot opt source               destination</span><br><span class=\"line\">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80</span><br></pre></td></tr></table></figure>\n<p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3</p>\n<p>也可以通过inspect命令查看容器ip</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect containerId |grep IPAddress</span><br></pre></td></tr></table></figure>\n\n<p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81</span><br></pre></td></tr></table></figure>\n\n<p>如果加错了或者想修改：</p>\n<p>先显示行号查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -vnL DOCKER --line-number</span><br></pre></td></tr></table></figure>\n\n<p>删除规则3</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法2-修改容器配置文件\"><a href=\"#方法2-修改容器配置文件\" class=\"headerlink\" title=\"方法2 修改容器配置文件\"></a>方法2 修改容器配置文件</h2><p>容器的配置文件<code>/var/lib/docker/containers/[containerId]</code>目录下，<code>hostconfig.json</code>和<code>config.v2.json</code><br>修改好之后，重启容器服务。</p>\n<h2 id=\"方法3-把运行中的容器生成新的镜像，然后运行新的镜像\"><a href=\"#方法3-把运行中的容器生成新的镜像，然后运行新的镜像\" class=\"headerlink\" title=\"方法3 把运行中的容器生成新的镜像，然后运行新的镜像\"></a>方法3 把运行中的容器生成新的镜像，然后运行新的镜像</h2><ol>\n<li><p>提交一个运行中的容器为镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit containerid heropoo/example</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<code>heropoo/example</code>镜像并添加8080映射容器80端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8000:80  heropoo/example /bin/sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>试试吧~😎</p>\n","site":{"data":{}},"more":"<p>突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/zuoshenglo/article/details/78402772\" target=\"_blank\" rel=\"noopener\">怎么给运行中的docker容器添加新的端口</a></li>\n<li><a href=\"https://blog.csdn.net/wesleyflagon/article/details/78961990\" target=\"_blank\" rel=\"noopener\">修改docker容器端口映射的方法</a></li>\n<li><a href=\"https://blog.csdn.net/xfks55/article/details/50148389\" target=\"_blank\" rel=\"noopener\">iptable规则查看，添加，删除和修改</a></li>\n</ul>\n<h2 id=\"方法1-修改iptables端口映射\"><a href=\"#方法1-修改iptables端口映射\" class=\"headerlink\" title=\"方法1 修改iptables端口映射\"></a>方法1 修改iptables端口映射</h2><blockquote>\n<p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p>\n</blockquote>\n<p>比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -vnL</span><br></pre></td></tr></table></figure>\n\n<p>在结果中有一条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain DOCKER</span><br><span class=\"line\">target     prot opt source               destination</span><br><span class=\"line\">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80</span><br></pre></td></tr></table></figure>\n<p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3</p>\n<p>也可以通过inspect命令查看容器ip</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect containerId |grep IPAddress</span><br></pre></td></tr></table></figure>\n\n<p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81</span><br></pre></td></tr></table></figure>\n\n<p>如果加错了或者想修改：</p>\n<p>先显示行号查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -vnL DOCKER --line-number</span><br></pre></td></tr></table></figure>\n\n<p>删除规则3</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法2-修改容器配置文件\"><a href=\"#方法2-修改容器配置文件\" class=\"headerlink\" title=\"方法2 修改容器配置文件\"></a>方法2 修改容器配置文件</h2><p>容器的配置文件<code>/var/lib/docker/containers/[containerId]</code>目录下，<code>hostconfig.json</code>和<code>config.v2.json</code><br>修改好之后，重启容器服务。</p>\n<h2 id=\"方法3-把运行中的容器生成新的镜像，然后运行新的镜像\"><a href=\"#方法3-把运行中的容器生成新的镜像，然后运行新的镜像\" class=\"headerlink\" title=\"方法3 把运行中的容器生成新的镜像，然后运行新的镜像\"></a>方法3 把运行中的容器生成新的镜像，然后运行新的镜像</h2><ol>\n<li><p>提交一个运行中的容器为镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit containerid heropoo/example</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行<code>heropoo/example</code>镜像并添加8080映射容器80端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8000:80  heropoo/example /bin/sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>试试吧~😎</p>\n"},{"layout":"post","title":"关于Yii2查询数据对象ActiveRecord的json序列化问题","date":"2018-10-16T09:53:45.000Z","author":"heropoo","excerpt":"关于Yii2查询数据对象ActiveRecord的json序列化问题","_content":"今天在使用`json_encode`函数序列化Yii2查询得到的数据模型对象（通常继承`ActiveRecord`类）时，发现返回结果是`{}`,而不是预期的数据库字段键值对这种形式：`{\"name\"： \"xxx\", \"sex\": 1}`\n\n后来赶时间就直接在手动处理了下，改动了下模型对象让它接入`JsonSerializable`接口，并实现其接口方法，类似这样；\n```php\n//...\n\nclass User extends ActiveRecord implements \\JsonSerializable{\n\n\t//... 其他代码\n\n\tpublic function jsonSerialize (){\n\t\treturn $this->toArray();\n\t}\n}\n```\n然后完美的解决了。 \n\n但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： `\\yii\\helpers\\BaseJson::encode($user)`。然后翻了翻源代码，部分代码是这样的：\n```php\n//from \\yii\\helpers\\BaseJson::processData\nif (is_object($data)) {\n    if ($data instanceof JsExpression) {\n        $token = \"!{[$expPrefix=\" . count($expressions) . ']}!';\n        $expressions['\"' . $token . '\"'] = $data->expression;\n\n        return $token;\n    } elseif ($data instanceof \\JsonSerializable) {\n        $data = $data->jsonSerialize();\n    } elseif ($data instanceof Arrayable) { // <---here\n        $data = $data->toArray();\n    } elseif ($data instanceof \\SimpleXMLElement) {\n        $data = (array) $data;\n    } else {\n        $result = [];\n        foreach ($data as $name => $value) {\n            $result[$name] = $value;\n        }\n        $data = $result;\n    }\n\n    if ($data === []) {\n        return new \\stdClass();\n    }\n}\n```\n作者在处理数据的时候做了判断，`ActiveRecord`类接了`Arrayable`接口，然后作者也是使用`toArray()`方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。\n","source":"_posts/2018-10-16-yii2-activerecord-to-json.md","raw":"---\nlayout: post\ntitle:  \"关于Yii2查询数据对象ActiveRecord的json序列化问题\"\ndate:   2018-10-16 17:53:45\nauthor: \"heropoo\"\ncategories: \n    - PHP\ntags: \n    - PHP\n    - Yii2\n\nexcerpt: \"关于Yii2查询数据对象ActiveRecord的json序列化问题\"\n---\n今天在使用`json_encode`函数序列化Yii2查询得到的数据模型对象（通常继承`ActiveRecord`类）时，发现返回结果是`{}`,而不是预期的数据库字段键值对这种形式：`{\"name\"： \"xxx\", \"sex\": 1}`\n\n后来赶时间就直接在手动处理了下，改动了下模型对象让它接入`JsonSerializable`接口，并实现其接口方法，类似这样；\n```php\n//...\n\nclass User extends ActiveRecord implements \\JsonSerializable{\n\n\t//... 其他代码\n\n\tpublic function jsonSerialize (){\n\t\treturn $this->toArray();\n\t}\n}\n```\n然后完美的解决了。 \n\n但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： `\\yii\\helpers\\BaseJson::encode($user)`。然后翻了翻源代码，部分代码是这样的：\n```php\n//from \\yii\\helpers\\BaseJson::processData\nif (is_object($data)) {\n    if ($data instanceof JsExpression) {\n        $token = \"!{[$expPrefix=\" . count($expressions) . ']}!';\n        $expressions['\"' . $token . '\"'] = $data->expression;\n\n        return $token;\n    } elseif ($data instanceof \\JsonSerializable) {\n        $data = $data->jsonSerialize();\n    } elseif ($data instanceof Arrayable) { // <---here\n        $data = $data->toArray();\n    } elseif ($data instanceof \\SimpleXMLElement) {\n        $data = (array) $data;\n    } else {\n        $result = [];\n        foreach ($data as $name => $value) {\n            $result[$name] = $value;\n        }\n        $data = $result;\n    }\n\n    if ($data === []) {\n        return new \\stdClass();\n    }\n}\n```\n作者在处理数据的时候做了判断，`ActiveRecord`类接了`Arrayable`接口，然后作者也是使用`toArray()`方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。\n","slug":"2018-10-16-yii2-activerecord-to-json","published":1,"updated":"2019-11-01T02:16:34.414Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscj001qsm4wdzfc40se","content":"<p>今天在使用<code>json_encode</code>函数序列化Yii2查询得到的数据模型对象（通常继承<code>ActiveRecord</code>类）时，发现返回结果是<code>{}</code>,而不是预期的数据库字段键值对这种形式：<code>{&quot;name&quot;： &quot;xxx&quot;, &quot;sex&quot;: 1}</code></p>\n<p>后来赶时间就直接在手动处理了下，改动了下模型对象让它接入<code>JsonSerializable</code>接口，并实现其接口方法，类似这样；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActiveRecord</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">JsonSerializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//... 其他代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonSerialize</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;toArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后完美的解决了。 </p>\n<p>但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： <code>\\yii\\helpers\\BaseJson::encode($user)</code>。然后翻了翻源代码，部分代码是这样的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//from \\yii\\helpers\\BaseJson::processData</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_object($data)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data <span class=\"keyword\">instanceof</span> JsExpression) &#123;</span><br><span class=\"line\">        $token = <span class=\"string\">\"!&#123;[$expPrefix=\"</span> . count($expressions) . <span class=\"string\">']&#125;!'</span>;</span><br><span class=\"line\">        $expressions[<span class=\"string\">'\"'</span> . $token . <span class=\"string\">'\"'</span>] = $data-&gt;expression;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $token;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> \\JsonSerializable) &#123;</span><br><span class=\"line\">        $data = $data-&gt;jsonSerialize();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> Arrayable) &#123; <span class=\"comment\">// &lt;---here</span></span><br><span class=\"line\">        $data = $data-&gt;toArray();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> \\SimpleXMLElement) &#123;</span><br><span class=\"line\">        $data = (<span class=\"keyword\">array</span>) $data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $result = [];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> $name =&gt; $value) &#123;</span><br><span class=\"line\">            $result[$name] = $value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $data = $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data === []) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\stdClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者在处理数据的时候做了判断，<code>ActiveRecord</code>类接了<code>Arrayable</code>接口，然后作者也是使用<code>toArray()</code>方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。</p>\n","site":{"data":{}},"more":"<p>今天在使用<code>json_encode</code>函数序列化Yii2查询得到的数据模型对象（通常继承<code>ActiveRecord</code>类）时，发现返回结果是<code>{}</code>,而不是预期的数据库字段键值对这种形式：<code>{&quot;name&quot;： &quot;xxx&quot;, &quot;sex&quot;: 1}</code></p>\n<p>后来赶时间就直接在手动处理了下，改动了下模型对象让它接入<code>JsonSerializable</code>接口，并实现其接口方法，类似这样；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActiveRecord</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">JsonSerializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//... 其他代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonSerialize</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;toArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后完美的解决了。 </p>\n<p>但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： <code>\\yii\\helpers\\BaseJson::encode($user)</code>。然后翻了翻源代码，部分代码是这样的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//from \\yii\\helpers\\BaseJson::processData</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_object($data)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data <span class=\"keyword\">instanceof</span> JsExpression) &#123;</span><br><span class=\"line\">        $token = <span class=\"string\">\"!&#123;[$expPrefix=\"</span> . count($expressions) . <span class=\"string\">']&#125;!'</span>;</span><br><span class=\"line\">        $expressions[<span class=\"string\">'\"'</span> . $token . <span class=\"string\">'\"'</span>] = $data-&gt;expression;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $token;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> \\JsonSerializable) &#123;</span><br><span class=\"line\">        $data = $data-&gt;jsonSerialize();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> Arrayable) &#123; <span class=\"comment\">// &lt;---here</span></span><br><span class=\"line\">        $data = $data-&gt;toArray();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($data <span class=\"keyword\">instanceof</span> \\SimpleXMLElement) &#123;</span><br><span class=\"line\">        $data = (<span class=\"keyword\">array</span>) $data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $result = [];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> $name =&gt; $value) &#123;</span><br><span class=\"line\">            $result[$name] = $value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $data = $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data === []) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\stdClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者在处理数据的时候做了判断，<code>ActiveRecord</code>类接了<code>Arrayable</code>接口，然后作者也是使用<code>toArray()</code>方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。</p>\n"},{"layout":"post","title":"安装Jupyter笔记本","date":"2018-11-02T11:07:09.000Z","author":"heropoo","excerpt":"安装Jupyter笔记本，做个笔记","_content":"安装Jupyter笔记本，做个笔记\n\n通过pip安装\n```sh\nsudo pip3 install jupyter\n```\n\n创建Jupyter默认配置文件\n```sh\njupyter notebook --generate-config\n```\n生成SHA1加密的密钥，如'sha1:XXXXXX'\n```sh\nipython\n--------------------------------------\nfrom notebook.auth import passwd\npasswd()\n```\n\n修改配置文件\n```sh\nvim .jupyter/jupyter_notebook_config.py\n--------------------------------------\nc.NotebookApp.password = u'sha1:XXXXXX'\n```\n\n运行jupyter\n```sh\njupyter notebook\n```\n\n可选的运行参数\n```sh\njupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n打开浏览器输入 http://localhost:8888","source":"_posts/2018-11-02-jupyter.md","raw":"---\nlayout: post\ntitle:  \"安装Jupyter笔记本\"\ndate:   2018-11-02 19:07:09\nauthor: \"heropoo\"\ncategories: \n    - python\ntags: \n    - jupyter\n    - python\n\nexcerpt: \"安装Jupyter笔记本，做个笔记\"\n---\n安装Jupyter笔记本，做个笔记\n\n通过pip安装\n```sh\nsudo pip3 install jupyter\n```\n\n创建Jupyter默认配置文件\n```sh\njupyter notebook --generate-config\n```\n生成SHA1加密的密钥，如'sha1:XXXXXX'\n```sh\nipython\n--------------------------------------\nfrom notebook.auth import passwd\npasswd()\n```\n\n修改配置文件\n```sh\nvim .jupyter/jupyter_notebook_config.py\n--------------------------------------\nc.NotebookApp.password = u'sha1:XXXXXX'\n```\n\n运行jupyter\n```sh\njupyter notebook\n```\n\n可选的运行参数\n```sh\njupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n打开浏览器输入 http://localhost:8888","slug":"2018-11-02-jupyter","published":1,"updated":"2019-11-01T02:16:34.414Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsck001usm4wbd5qbm9c","content":"<p>安装Jupyter笔记本，做个笔记</p>\n<p>通过pip安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install jupyter</span><br></pre></td></tr></table></figure>\n\n<p>创建Jupyter默认配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n<p>生成SHA1加密的密钥，如’sha1:XXXXXX’</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipython</span><br><span class=\"line\">--------------------------------------</span><br><span class=\"line\">from notebook.auth import passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .jupyter/jupyter_notebook_config.py</span><br><span class=\"line\">--------------------------------------</span><br><span class=\"line\">c.NotebookApp.password = u<span class=\"string\">'sha1:XXXXXX'</span></span><br></pre></td></tr></table></figure>\n\n<p>运行jupyter</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<p>可选的运行参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器输入 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a></p>\n","site":{"data":{}},"more":"<p>安装Jupyter笔记本，做个笔记</p>\n<p>通过pip安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install jupyter</span><br></pre></td></tr></table></figure>\n\n<p>创建Jupyter默认配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n<p>生成SHA1加密的密钥，如’sha1:XXXXXX’</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipython</span><br><span class=\"line\">--------------------------------------</span><br><span class=\"line\">from notebook.auth import passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .jupyter/jupyter_notebook_config.py</span><br><span class=\"line\">--------------------------------------</span><br><span class=\"line\">c.NotebookApp.password = u<span class=\"string\">'sha1:XXXXXX'</span></span><br></pre></td></tr></table></figure>\n\n<p>运行jupyter</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<p>可选的运行参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器输入 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a></p>\n"},{"layout":"post","title":"修复gitment评论","date":"2018-10-27T08:17:34.000Z","author":"heropoo","excerpt":"最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧","_content":"最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。\n\n从我开始用gitment的评论系统，总共出现过两次问题：\n\n## 1. github-issue label的字符长度限制\n这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：\n```js\nvar page_date = '{{ page.date }}';\nvar id = window.location.href;\nif(page_date > '2018-04-31 00:00:00 +0000'){\n    id = page_date;\n}\nvar gitment = new Gitment({\n    id: id, // 可选。默认为 location.href\n    owner: 'heropoo',\n    repo: 'heropoo.github.io',\n    oauth: {\n        client_id: 'cccc',\n        client_secret: 'xxxx',\n    },\n});\ngitment.render('container');\n```\n\n## 2. gitment 作者提供的oauth授权服务不可用\n这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。\n\n## 3. 升级https\n现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ\n但是还得修嘛。后来仔细观察了下，原来作者是使用`gitment`和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。\n```js\nvar page_date = '{{ page.date }}';\n//var id = window.location.href;\n//if(page_date > '2018-04-31 00:00:00 +0000'){\nvar id = page_date;\n//}\nvar gitment = new Gitment({\n    id: id, // 可选。默认为 location.href\n    owner: 'heropoo',\n    repo: 'heropoo.github.io',\n    oauth: {\n        client_id: 'cccc',\n        client_secret: 'xxxx',\n    },\n});\ngitment.render('container');\n```\n\n好了，搞完收工。","source":"_posts/2018-10-27-fix-gitment.md","raw":"---\nlayout: post\ntitle:  \"修复gitment评论\"\ndate:   2018-10-27 16:17:34\nauthor: \"heropoo\"\ncategories: \n    - github-issue\ntags: \n    - github-issue\n    - gitment\n\nexcerpt: \"最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧\"\n---\n最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。\n\n从我开始用gitment的评论系统，总共出现过两次问题：\n\n## 1. github-issue label的字符长度限制\n这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：\n```js\nvar page_date = '{{ page.date }}';\nvar id = window.location.href;\nif(page_date > '2018-04-31 00:00:00 +0000'){\n    id = page_date;\n}\nvar gitment = new Gitment({\n    id: id, // 可选。默认为 location.href\n    owner: 'heropoo',\n    repo: 'heropoo.github.io',\n    oauth: {\n        client_id: 'cccc',\n        client_secret: 'xxxx',\n    },\n});\ngitment.render('container');\n```\n\n## 2. gitment 作者提供的oauth授权服务不可用\n这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。\n\n## 3. 升级https\n现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ\n但是还得修嘛。后来仔细观察了下，原来作者是使用`gitment`和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。\n```js\nvar page_date = '{{ page.date }}';\n//var id = window.location.href;\n//if(page_date > '2018-04-31 00:00:00 +0000'){\nvar id = page_date;\n//}\nvar gitment = new Gitment({\n    id: id, // 可选。默认为 location.href\n    owner: 'heropoo',\n    repo: 'heropoo.github.io',\n    oauth: {\n        client_id: 'cccc',\n        client_secret: 'xxxx',\n    },\n});\ngitment.render('container');\n```\n\n好了，搞完收工。","slug":"2018-10-27-fix-gitment","published":1,"updated":"2019-11-01T02:16:34.414Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscm001wsm4w2pn557sb","content":"<p>最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。</p>\n<p>从我开始用gitment的评论系统，总共出现过两次问题：</p>\n<h2 id=\"1-github-issue-label的字符长度限制\"><a href=\"#1-github-issue-label的字符长度限制\" class=\"headerlink\" title=\"1. github-issue label的字符长度限制\"></a>1. github-issue label的字符长度限制</h2><p>这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page_date = <span class=\"string\">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(page_date &gt; <span class=\"string\">'2018-04-31 00:00:00 +0000'</span>)&#123;</span><br><span class=\"line\">    id = page_date;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">    id: id, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">    owner: <span class=\"string\">'heropoo'</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">'heropoo.github.io'</span>,</span><br><span class=\"line\">    oauth: &#123;</span><br><span class=\"line\">        client_id: <span class=\"string\">'cccc'</span>,</span><br><span class=\"line\">        client_secret: <span class=\"string\">'xxxx'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-gitment-作者提供的oauth授权服务不可用\"><a href=\"#2-gitment-作者提供的oauth授权服务不可用\" class=\"headerlink\" title=\"2. gitment 作者提供的oauth授权服务不可用\"></a>2. gitment 作者提供的oauth授权服务不可用</h2><p>这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。</p>\n<h2 id=\"3-升级https\"><a href=\"#3-升级https\" class=\"headerlink\" title=\"3. 升级https\"></a>3. 升级https</h2><p>现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ<br>但是还得修嘛。后来仔细观察了下，原来作者是使用<code>gitment</code>和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page_date = <span class=\"string\">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class=\"line\"><span class=\"comment\">//var id = window.location.href;</span></span><br><span class=\"line\"><span class=\"comment\">//if(page_date &gt; '2018-04-31 00:00:00 +0000')&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id = page_date;</span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">    id: id, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">    owner: <span class=\"string\">'heropoo'</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">'heropoo.github.io'</span>,</span><br><span class=\"line\">    oauth: &#123;</span><br><span class=\"line\">        client_id: <span class=\"string\">'cccc'</span>,</span><br><span class=\"line\">        client_secret: <span class=\"string\">'xxxx'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>好了，搞完收工。</p>\n","site":{"data":{}},"more":"<p>最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。</p>\n<p>从我开始用gitment的评论系统，总共出现过两次问题：</p>\n<h2 id=\"1-github-issue-label的字符长度限制\"><a href=\"#1-github-issue-label的字符长度限制\" class=\"headerlink\" title=\"1. github-issue label的字符长度限制\"></a>1. github-issue label的字符长度限制</h2><p>这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page_date = <span class=\"string\">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(page_date &gt; <span class=\"string\">'2018-04-31 00:00:00 +0000'</span>)&#123;</span><br><span class=\"line\">    id = page_date;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">    id: id, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">    owner: <span class=\"string\">'heropoo'</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">'heropoo.github.io'</span>,</span><br><span class=\"line\">    oauth: &#123;</span><br><span class=\"line\">        client_id: <span class=\"string\">'cccc'</span>,</span><br><span class=\"line\">        client_secret: <span class=\"string\">'xxxx'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-gitment-作者提供的oauth授权服务不可用\"><a href=\"#2-gitment-作者提供的oauth授权服务不可用\" class=\"headerlink\" title=\"2. gitment 作者提供的oauth授权服务不可用\"></a>2. gitment 作者提供的oauth授权服务不可用</h2><p>这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。</p>\n<h2 id=\"3-升级https\"><a href=\"#3-升级https\" class=\"headerlink\" title=\"3. 升级https\"></a>3. 升级https</h2><p>现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ<br>但是还得修嘛。后来仔细观察了下，原来作者是使用<code>gitment</code>和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page_date = <span class=\"string\">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class=\"line\"><span class=\"comment\">//var id = window.location.href;</span></span><br><span class=\"line\"><span class=\"comment\">//if(page_date &gt; '2018-04-31 00:00:00 +0000')&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id = page_date;</span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">    id: id, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">    owner: <span class=\"string\">'heropoo'</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">'heropoo.github.io'</span>,</span><br><span class=\"line\">    oauth: &#123;</span><br><span class=\"line\">        client_id: <span class=\"string\">'cccc'</span>,</span><br><span class=\"line\">        client_secret: <span class=\"string\">'xxxx'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>好了，搞完收工。</p>\n"},{"layout":"post","title":"从SSH私钥中重新生成公钥","date":"2018-11-19T15:59:52.000Z","author":"heropoo","excerpt":"从SSH私钥中重新生成公钥","_content":"从SSH私钥中重新生成公钥\n\n假如我们的私钥是`id_rsa`\n```sh\nssh-keygen -y -f id_rsa\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3\n```\n\n可以直接重定向到文件\n```sh\nssh-keygen -y -f id_rsa > id_rsa.pub\n```","source":"_posts/2018-11-19-get-ssh-public-key-from-private-key.md","raw":"---\nlayout: post\ntitle:  \"从SSH私钥中重新生成公钥\"\ndate:   2018-11-19 23:59:52\nauthor: \"heropoo\"\ncategories: \n    - SSH\ntags: \n    - SSH\n\nexcerpt: \"从SSH私钥中重新生成公钥\"\n---\n从SSH私钥中重新生成公钥\n\n假如我们的私钥是`id_rsa`\n```sh\nssh-keygen -y -f id_rsa\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3\n```\n\n可以直接重定向到文件\n```sh\nssh-keygen -y -f id_rsa > id_rsa.pub\n```","slug":"2018-11-19-get-ssh-public-key-from-private-key","published":1,"updated":"2019-11-01T02:16:34.415Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscn001ysm4w3v0xbxmb","content":"<p>从SSH私钥中重新生成公钥</p>\n<p>假如我们的私钥是<code>id_rsa</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -y -f id_rsa</span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3</span><br></pre></td></tr></table></figure>\n\n<p>可以直接重定向到文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -y -f id_rsa &gt; id_rsa.pub</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p>从SSH私钥中重新生成公钥</p>\n<p>假如我们的私钥是<code>id_rsa</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -y -f id_rsa</span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3</span><br></pre></td></tr></table></figure>\n\n<p>可以直接重定向到文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -y -f id_rsa &gt; id_rsa.pub</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"MySQL5.7的JSON基本操作","date":"2018-11-18T10:11:06.000Z","author":"heropoo","excerpt":"MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的","_content":"MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。\n\n### 建表\n在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：\n```\nmysql> CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);\n```\njson类型字段可以为NULL\n\n### 插入数据：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaoming','{\"sex\": 1, \"age\": 18, \"nick_name\": \"小萌\"}');\n```\njson类型的字段必须时一个有效的json字符串\n\n\n可以使用JSON_OBJECT()函数构造json对象：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaohua', JSON_OBJECT(\"sex\", 0, \"age\", 17));\n```\n\n使用JSON_ARRAY()函数构造json数组：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaozhang', JSON_OBJECT(\"sex\", 1, \"age\", 19, \"tag\", JSON_ARRAY(3,5,90)));\n```\n\n现在查看`test_user`表中的数据：\n```\nmysql> select * from test_user;\n+----+-----------+--------------------------------------------+\n| id | name      | info                                       |\n+----+-----------+--------------------------------------------+\n|  1 | xiaoming  | {\"age\": 18, \"sex\": 1, \"nick_name\": \"小萌\"} |\n|  2 | xiaohua   | {\"age\": 17, \"sex\": 0}                      |\n|  3 | xiaozhang | {\"age\": 19, \"sex\": 1, \"tag\": [3, 5, 90]}   |\n+----+-----------+--------------------------------------------+\n3 rows in set (0.04 sec)\n```\n\n### 查询\n表达式： 对象为`json列->'$.键'`, 数组为`json列->'$.键[index]'`\n```\nmysql> select name, info->'$.nick_name', info->'$.sex', info->'$.tag[0]' from test_user;\n+-----------+---------------------+---------------+------------------+\n| name      | info->'$.nick_name' | info->'$.sex' | info->'$.tag[0]' |\n+-----------+---------------------+---------------+------------------+\n| xiaoming  | \"小萌\"              | 1             | NULL             |\n| xiaohua   | NULL                | 0             | NULL             |\n| xiaozhang | NULL                | 1             | 3                |\n+-----------+---------------------+---------------+------------------+\n3 rows in set (0.04 sec)\n```\n\n等价于：对象为`JSON_EXTRACT(json列 , '$.键')`，数组为`JSON_EXTRACT(json列 , '$.键[index]')`\n```\nmysql> select name, JSON_EXTRACT(info, '$.nick_name'), JSON_EXTRACT(info, '$.sex'), JSON_EXTRACT(info, '$.tag[0]')  from test_user;\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n| name      | JSON_EXTRACT(info, '$.nick_name') | JSON_EXTRACT(info, '$.sex') | JSON_EXTRACT(info, '$.tag[0]') |\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n| xiaoming  | \"小萌\"                            | 1                           | NULL                           |\n| xiaohua   | NULL                              | 0                           | NULL                           |\n| xiaozhang | NULL                              | 1                           | 3                              |\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n3 rows in set (0.04 sec)\n```\n\n不过看到上面`\"小萌\"`是带双引号的，这不是我们想要的，可以用`JSON_UNQUOTE`函数将双引号去掉\n```\nmysql> select name, JSON_UNQUOTE(info->'$.nick_name') from test_user where name='xiaoming';\n+----------+-----------------------------------+\n| name     | JSON_UNQUOTE(info->'$.nick_name') |\n+----------+-----------------------------------+\n| xiaoming | 小萌                              |\n+----------+-----------------------------------+\n1 row in set (0.05 sec)\n```\n\n也可以直接使用操作符`->>`\n```\nmysql> select name, info->>'$.nick_name' from test_user where name='xiaoming';\n+----------+----------------------+\n| name     | info->>'$.nick_name' |\n+----------+----------------------+\n| xiaoming | 小萌                 |\n+----------+----------------------+\n1 row in set (0.06 sec)\n```\n\n当然属性也可以作为查询条件\n```\nmysql> select name, info->>'$.nick_name' from test_user where info->'$.nick_name'='小萌';\n+----------+----------------------+\n| name     | info->>'$.nick_name' |\n+----------+----------------------+\n| xiaoming | 小萌                 |\n+----------+----------------------+\n1 row in set (0.05 sec)\n```\n\n值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。\n\n创建虚拟列:\n```\nmysql> ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info->>'$.nick_name') VIRTUAL;\n```\n注意用操作符`->>`\n\n使用时和普通类型的列查询是一样:\n```\nmysql> select name,nick_name from test_user where nick_name='小萌';\n+----------+-----------+\n| name     | nick_name |\n+----------+-----------+\n| xiaoming | 小萌      |\n+----------+-----------+\n1 row in set (0.05 sec)\n```\n\n### 更新\n使用`JSON_INSERT()`插入新值，但不会覆盖已经存在的值\n```\nmysql> UPDATE test_user SET info = JSON_INSERT(info, '$.sex', 1, '$.nick_name', '小花') where id=2;\n```\n看下结果\n```\nmysql> select * from test_user where id=2;\n+----+---------+--------------------------------------------+-----------+\n| id | name    | info                                       | nick_name |\n+----+---------+--------------------------------------------+-----------+\n|  2 | xiaohua | {\"age\": 17, \"sex\": 0, \"nick_name\": \"小花\"} | 小花      |\n+----+---------+--------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n\n使用`JSON_SET()`插入新值，并覆盖已经存在的值\n```\nmysql> UPDATE test_user SET info = JSON_SET(info, '$.sex', 0, '$.nick_name', '小张') where id=3;\n```\n看下结果\n```\nmysql> select * from test_user where id=3;\n+----+-----------+---------------------------------------------------------------+-----------+\n| id | name      | info                                                          | nick_name |\n+----+-----------+---------------------------------------------------------------+-----------+\n|  3 | xiaozhang | {\"age\": 19, \"sex\": 1, \"tag\": [3, 5, 90], \"nick_name\": \"小张\"} | 小张      |\n+----+-----------+---------------------------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n\n使用`JSON_REPLACE()`只替换存在的值\n```\nmysql> UPDATE test_user SET info = JSON_REPLACE(info, '$.sex', 1, '$.tag', '[1,2,3]') where id=2;\n```\n看下结果\n```\nmysql> select * from test_user where id=2;\n+----+---------+--------------------------------------------+-----------+\n| id | name    | info                                       | nick_name |\n+----+---------+--------------------------------------------+-----------+\n|  2 | xiaohua | {\"age\": 17, \"sex\": 1, \"nick_name\": \"小花\"} | 小花      |\n+----+---------+--------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n可以看到tag没有更新进去\n\n### 删除\n使用`JSON_REMOVE()`删除JSON元素\n```\nmysql> UPDATE test_user SET info = JSON_REMOVE(info, '$.sex', '$.tag') where id=1;\n```\n看下结果\n```\nmysql> select * from test_user where id=1;\n+----+----------+----------------------------------+-----------+\n| id | name     | info                             | nick_name |\n+----+----------+----------------------------------+-----------+\n|  1 | xiaoming | {\"age\": 18, \"nick_name\": \"小萌\"} | 小萌      |\n+----+----------+----------------------------------+-----------+\n1 row in set (0.05 sec)\n```\n\n最后从MySQL的官方网站查看帮助文档：http://dev.mysql.com/doc/refman/5.7/en/json.html\n\n😎","source":"_posts/2018-11-18-mysql-json.md","raw":"---\nlayout: post\ntitle:  \"MySQL5.7的JSON基本操作\"\ndate:   2018-11-18 18:11:06\nauthor: \"heropoo\"\ncategories: \n    - MySQL\ntags: \n    - MySQL\n    - JSON\n\nexcerpt: \"MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的\"\n---\nMySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。\n\n### 建表\n在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：\n```\nmysql> CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);\n```\njson类型字段可以为NULL\n\n### 插入数据：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaoming','{\"sex\": 1, \"age\": 18, \"nick_name\": \"小萌\"}');\n```\njson类型的字段必须时一个有效的json字符串\n\n\n可以使用JSON_OBJECT()函数构造json对象：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaohua', JSON_OBJECT(\"sex\", 0, \"age\", 17));\n```\n\n使用JSON_ARRAY()函数构造json数组：\n```\nmysql> INSERT INTO test_user(`name`, `info`) VALUES('xiaozhang', JSON_OBJECT(\"sex\", 1, \"age\", 19, \"tag\", JSON_ARRAY(3,5,90)));\n```\n\n现在查看`test_user`表中的数据：\n```\nmysql> select * from test_user;\n+----+-----------+--------------------------------------------+\n| id | name      | info                                       |\n+----+-----------+--------------------------------------------+\n|  1 | xiaoming  | {\"age\": 18, \"sex\": 1, \"nick_name\": \"小萌\"} |\n|  2 | xiaohua   | {\"age\": 17, \"sex\": 0}                      |\n|  3 | xiaozhang | {\"age\": 19, \"sex\": 1, \"tag\": [3, 5, 90]}   |\n+----+-----------+--------------------------------------------+\n3 rows in set (0.04 sec)\n```\n\n### 查询\n表达式： 对象为`json列->'$.键'`, 数组为`json列->'$.键[index]'`\n```\nmysql> select name, info->'$.nick_name', info->'$.sex', info->'$.tag[0]' from test_user;\n+-----------+---------------------+---------------+------------------+\n| name      | info->'$.nick_name' | info->'$.sex' | info->'$.tag[0]' |\n+-----------+---------------------+---------------+------------------+\n| xiaoming  | \"小萌\"              | 1             | NULL             |\n| xiaohua   | NULL                | 0             | NULL             |\n| xiaozhang | NULL                | 1             | 3                |\n+-----------+---------------------+---------------+------------------+\n3 rows in set (0.04 sec)\n```\n\n等价于：对象为`JSON_EXTRACT(json列 , '$.键')`，数组为`JSON_EXTRACT(json列 , '$.键[index]')`\n```\nmysql> select name, JSON_EXTRACT(info, '$.nick_name'), JSON_EXTRACT(info, '$.sex'), JSON_EXTRACT(info, '$.tag[0]')  from test_user;\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n| name      | JSON_EXTRACT(info, '$.nick_name') | JSON_EXTRACT(info, '$.sex') | JSON_EXTRACT(info, '$.tag[0]') |\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n| xiaoming  | \"小萌\"                            | 1                           | NULL                           |\n| xiaohua   | NULL                              | 0                           | NULL                           |\n| xiaozhang | NULL                              | 1                           | 3                              |\n+-----------+-----------------------------------+-----------------------------+--------------------------------+\n3 rows in set (0.04 sec)\n```\n\n不过看到上面`\"小萌\"`是带双引号的，这不是我们想要的，可以用`JSON_UNQUOTE`函数将双引号去掉\n```\nmysql> select name, JSON_UNQUOTE(info->'$.nick_name') from test_user where name='xiaoming';\n+----------+-----------------------------------+\n| name     | JSON_UNQUOTE(info->'$.nick_name') |\n+----------+-----------------------------------+\n| xiaoming | 小萌                              |\n+----------+-----------------------------------+\n1 row in set (0.05 sec)\n```\n\n也可以直接使用操作符`->>`\n```\nmysql> select name, info->>'$.nick_name' from test_user where name='xiaoming';\n+----------+----------------------+\n| name     | info->>'$.nick_name' |\n+----------+----------------------+\n| xiaoming | 小萌                 |\n+----------+----------------------+\n1 row in set (0.06 sec)\n```\n\n当然属性也可以作为查询条件\n```\nmysql> select name, info->>'$.nick_name' from test_user where info->'$.nick_name'='小萌';\n+----------+----------------------+\n| name     | info->>'$.nick_name' |\n+----------+----------------------+\n| xiaoming | 小萌                 |\n+----------+----------------------+\n1 row in set (0.05 sec)\n```\n\n值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。\n\n创建虚拟列:\n```\nmysql> ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info->>'$.nick_name') VIRTUAL;\n```\n注意用操作符`->>`\n\n使用时和普通类型的列查询是一样:\n```\nmysql> select name,nick_name from test_user where nick_name='小萌';\n+----------+-----------+\n| name     | nick_name |\n+----------+-----------+\n| xiaoming | 小萌      |\n+----------+-----------+\n1 row in set (0.05 sec)\n```\n\n### 更新\n使用`JSON_INSERT()`插入新值，但不会覆盖已经存在的值\n```\nmysql> UPDATE test_user SET info = JSON_INSERT(info, '$.sex', 1, '$.nick_name', '小花') where id=2;\n```\n看下结果\n```\nmysql> select * from test_user where id=2;\n+----+---------+--------------------------------------------+-----------+\n| id | name    | info                                       | nick_name |\n+----+---------+--------------------------------------------+-----------+\n|  2 | xiaohua | {\"age\": 17, \"sex\": 0, \"nick_name\": \"小花\"} | 小花      |\n+----+---------+--------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n\n使用`JSON_SET()`插入新值，并覆盖已经存在的值\n```\nmysql> UPDATE test_user SET info = JSON_SET(info, '$.sex', 0, '$.nick_name', '小张') where id=3;\n```\n看下结果\n```\nmysql> select * from test_user where id=3;\n+----+-----------+---------------------------------------------------------------+-----------+\n| id | name      | info                                                          | nick_name |\n+----+-----------+---------------------------------------------------------------+-----------+\n|  3 | xiaozhang | {\"age\": 19, \"sex\": 1, \"tag\": [3, 5, 90], \"nick_name\": \"小张\"} | 小张      |\n+----+-----------+---------------------------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n\n使用`JSON_REPLACE()`只替换存在的值\n```\nmysql> UPDATE test_user SET info = JSON_REPLACE(info, '$.sex', 1, '$.tag', '[1,2,3]') where id=2;\n```\n看下结果\n```\nmysql> select * from test_user where id=2;\n+----+---------+--------------------------------------------+-----------+\n| id | name    | info                                       | nick_name |\n+----+---------+--------------------------------------------+-----------+\n|  2 | xiaohua | {\"age\": 17, \"sex\": 1, \"nick_name\": \"小花\"} | 小花      |\n+----+---------+--------------------------------------------+-----------+\n1 row in set (0.06 sec)\n```\n可以看到tag没有更新进去\n\n### 删除\n使用`JSON_REMOVE()`删除JSON元素\n```\nmysql> UPDATE test_user SET info = JSON_REMOVE(info, '$.sex', '$.tag') where id=1;\n```\n看下结果\n```\nmysql> select * from test_user where id=1;\n+----+----------+----------------------------------+-----------+\n| id | name     | info                             | nick_name |\n+----+----------+----------------------------------+-----------+\n|  1 | xiaoming | {\"age\": 18, \"nick_name\": \"小萌\"} | 小萌      |\n+----+----------+----------------------------------+-----------+\n1 row in set (0.05 sec)\n```\n\n最后从MySQL的官方网站查看帮助文档：http://dev.mysql.com/doc/refman/5.7/en/json.html\n\n😎","slug":"2018-11-18-mysql-json","published":1,"updated":"2019-11-01T02:16:34.414Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsco0022sm4w0jp61b39","content":"<p>MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。</p>\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><p>在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);</span><br></pre></td></tr></table></figure>\n<p>json类型字段可以为NULL</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaoming&apos;,&apos;&#123;&quot;sex&quot;: 1, &quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125;&apos;);</span><br></pre></td></tr></table></figure>\n<p>json类型的字段必须时一个有效的json字符串</p>\n<p>可以使用JSON_OBJECT()函数构造json对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaohua&apos;, JSON_OBJECT(&quot;sex&quot;, 0, &quot;age&quot;, 17));</span><br></pre></td></tr></table></figure>\n\n<p>使用JSON_ARRAY()函数构造json数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaozhang&apos;, JSON_OBJECT(&quot;sex&quot;, 1, &quot;age&quot;, 19, &quot;tag&quot;, JSON_ARRAY(3,5,90)));</span><br></pre></td></tr></table></figure>\n\n<p>现在查看<code>test_user</code>表中的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user;</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">| id | name      | info                                       |</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">|  1 | xiaoming  | &#123;&quot;age&quot;: 18, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小萌&quot;&#125; |</span><br><span class=\"line\">|  2 | xiaohua   | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0&#125;                      |</span><br><span class=\"line\">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90]&#125;   |</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>表达式： 对象为<code>json列-&gt;&#39;$.键&#39;</code>, 数组为<code>json列-&gt;&#39;$.键[index]&#39;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&apos;$.nick_name&apos;, info-&gt;&apos;$.sex&apos;, info-&gt;&apos;$.tag[0]&apos; from test_user;</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">| name      | info-&gt;&apos;$.nick_name&apos; | info-&gt;&apos;$.sex&apos; | info-&gt;&apos;$.tag[0]&apos; |</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">| xiaoming  | &quot;小萌&quot;              | 1             | NULL             |</span><br><span class=\"line\">| xiaohua   | NULL                | 0             | NULL             |</span><br><span class=\"line\">| xiaozhang | NULL                | 1             | 3                |</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<p>等价于：对象为<code>JSON_EXTRACT(json列 , &#39;$.键&#39;)</code>，数组为<code>JSON_EXTRACT(json列 , &#39;$.键[index]&#39;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, JSON_EXTRACT(info, &apos;$.nick_name&apos;), JSON_EXTRACT(info, &apos;$.sex&apos;), JSON_EXTRACT(info, &apos;$.tag[0]&apos;)  from test_user;</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">| name      | JSON_EXTRACT(info, &apos;$.nick_name&apos;) | JSON_EXTRACT(info, &apos;$.sex&apos;) | JSON_EXTRACT(info, &apos;$.tag[0]&apos;) |</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">| xiaoming  | &quot;小萌&quot;                            | 1                           | NULL                           |</span><br><span class=\"line\">| xiaohua   | NULL                              | 0                           | NULL                           |</span><br><span class=\"line\">| xiaozhang | NULL                              | 1                           | 3                              |</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<p>不过看到上面<code>&quot;小萌&quot;</code>是带双引号的，这不是我们想要的，可以用<code>JSON_UNQUOTE</code>函数将双引号去掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) from test_user where name=&apos;xiaoming&apos;;</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">| name     | JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) |</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">| xiaoming | 小萌                              |</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接使用操作符<code>-&gt;&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where name=&apos;xiaoming&apos;;</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| xiaoming | 小萌                 |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当然属性也可以作为查询条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where info-&gt;&apos;$.nick_name&apos;=&apos;小萌&apos;;</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| xiaoming | 小萌                 |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。</p>\n<p>创建虚拟列:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info-&gt;&gt;&apos;$.nick_name&apos;) VIRTUAL;</span><br></pre></td></tr></table></figure>\n<p>注意用操作符<code>-&gt;&gt;</code></p>\n<p>使用时和普通类型的列查询是一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,nick_name from test_user where nick_name=&apos;小萌&apos;;</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| name     | nick_name |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| xiaoming | 小萌      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>使用<code>JSON_INSERT()</code>插入新值，但不会覆盖已经存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &apos;$.sex&apos;, 1, &apos;$.nick_name&apos;, &apos;小花&apos;) where id=2;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=2;</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">| id | name    | info                                       | nick_name |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>JSON_SET()</code>插入新值，并覆盖已经存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_SET(info, &apos;$.sex&apos;, 0, &apos;$.nick_name&apos;, &apos;小张&apos;) where id=3;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=3;</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">| id | name      | info                                                          | nick_name |</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90], &quot;nick_name&quot;: &quot;小张&quot;&#125; | 小张      |</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>JSON_REPLACE()</code>只替换存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_REPLACE(info, &apos;$.sex&apos;, 1, &apos;$.tag&apos;, &apos;[1,2,3]&apos;) where id=2;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=2;</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">| id | name    | info                                       | nick_name |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到tag没有更新进去</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>使用<code>JSON_REMOVE()</code>删除JSON元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_REMOVE(info, &apos;$.sex&apos;, &apos;$.tag&apos;) where id=1;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=1;</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">| id | name     | info                             | nick_name |</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">|  1 | xiaoming | &#123;&quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125; | 小萌      |</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>最后从MySQL的官方网站查看帮助文档：<a href=\"http://dev.mysql.com/doc/refman/5.7/en/json.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.7/en/json.html</a></p>\n<p>😎</p>\n","site":{"data":{}},"more":"<p>MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。</p>\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><p>在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);</span><br></pre></td></tr></table></figure>\n<p>json类型字段可以为NULL</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaoming&apos;,&apos;&#123;&quot;sex&quot;: 1, &quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125;&apos;);</span><br></pre></td></tr></table></figure>\n<p>json类型的字段必须时一个有效的json字符串</p>\n<p>可以使用JSON_OBJECT()函数构造json对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaohua&apos;, JSON_OBJECT(&quot;sex&quot;, 0, &quot;age&quot;, 17));</span><br></pre></td></tr></table></figure>\n\n<p>使用JSON_ARRAY()函数构造json数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaozhang&apos;, JSON_OBJECT(&quot;sex&quot;, 1, &quot;age&quot;, 19, &quot;tag&quot;, JSON_ARRAY(3,5,90)));</span><br></pre></td></tr></table></figure>\n\n<p>现在查看<code>test_user</code>表中的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user;</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">| id | name      | info                                       |</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">|  1 | xiaoming  | &#123;&quot;age&quot;: 18, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小萌&quot;&#125; |</span><br><span class=\"line\">|  2 | xiaohua   | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0&#125;                      |</span><br><span class=\"line\">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90]&#125;   |</span><br><span class=\"line\">+----+-----------+--------------------------------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>表达式： 对象为<code>json列-&gt;&#39;$.键&#39;</code>, 数组为<code>json列-&gt;&#39;$.键[index]&#39;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&apos;$.nick_name&apos;, info-&gt;&apos;$.sex&apos;, info-&gt;&apos;$.tag[0]&apos; from test_user;</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">| name      | info-&gt;&apos;$.nick_name&apos; | info-&gt;&apos;$.sex&apos; | info-&gt;&apos;$.tag[0]&apos; |</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">| xiaoming  | &quot;小萌&quot;              | 1             | NULL             |</span><br><span class=\"line\">| xiaohua   | NULL                | 0             | NULL             |</span><br><span class=\"line\">| xiaozhang | NULL                | 1             | 3                |</span><br><span class=\"line\">+-----------+---------------------+---------------+------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<p>等价于：对象为<code>JSON_EXTRACT(json列 , &#39;$.键&#39;)</code>，数组为<code>JSON_EXTRACT(json列 , &#39;$.键[index]&#39;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, JSON_EXTRACT(info, &apos;$.nick_name&apos;), JSON_EXTRACT(info, &apos;$.sex&apos;), JSON_EXTRACT(info, &apos;$.tag[0]&apos;)  from test_user;</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">| name      | JSON_EXTRACT(info, &apos;$.nick_name&apos;) | JSON_EXTRACT(info, &apos;$.sex&apos;) | JSON_EXTRACT(info, &apos;$.tag[0]&apos;) |</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">| xiaoming  | &quot;小萌&quot;                            | 1                           | NULL                           |</span><br><span class=\"line\">| xiaohua   | NULL                              | 0                           | NULL                           |</span><br><span class=\"line\">| xiaozhang | NULL                              | 1                           | 3                              |</span><br><span class=\"line\">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class=\"line\">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<p>不过看到上面<code>&quot;小萌&quot;</code>是带双引号的，这不是我们想要的，可以用<code>JSON_UNQUOTE</code>函数将双引号去掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) from test_user where name=&apos;xiaoming&apos;;</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">| name     | JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) |</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">| xiaoming | 小萌                              |</span><br><span class=\"line\">+----------+-----------------------------------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接使用操作符<code>-&gt;&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where name=&apos;xiaoming&apos;;</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| xiaoming | 小萌                 |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当然属性也可以作为查询条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where info-&gt;&apos;$.nick_name&apos;=&apos;小萌&apos;;</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">| xiaoming | 小萌                 |</span><br><span class=\"line\">+----------+----------------------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。</p>\n<p>创建虚拟列:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info-&gt;&gt;&apos;$.nick_name&apos;) VIRTUAL;</span><br></pre></td></tr></table></figure>\n<p>注意用操作符<code>-&gt;&gt;</code></p>\n<p>使用时和普通类型的列查询是一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,nick_name from test_user where nick_name=&apos;小萌&apos;;</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| name     | nick_name |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| xiaoming | 小萌      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>使用<code>JSON_INSERT()</code>插入新值，但不会覆盖已经存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &apos;$.sex&apos;, 1, &apos;$.nick_name&apos;, &apos;小花&apos;) where id=2;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=2;</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">| id | name    | info                                       | nick_name |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>JSON_SET()</code>插入新值，并覆盖已经存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_SET(info, &apos;$.sex&apos;, 0, &apos;$.nick_name&apos;, &apos;小张&apos;) where id=3;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=3;</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">| id | name      | info                                                          | nick_name |</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90], &quot;nick_name&quot;: &quot;小张&quot;&#125; | 小张      |</span><br><span class=\"line\">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>JSON_REPLACE()</code>只替换存在的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_REPLACE(info, &apos;$.sex&apos;, 1, &apos;$.tag&apos;, &apos;[1,2,3]&apos;) where id=2;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=2;</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">| id | name    | info                                       | nick_name |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class=\"line\">+----+---------+--------------------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到tag没有更新进去</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>使用<code>JSON_REMOVE()</code>删除JSON元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE test_user SET info = JSON_REMOVE(info, &apos;$.sex&apos;, &apos;$.tag&apos;) where id=1;</span><br></pre></td></tr></table></figure>\n<p>看下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test_user where id=1;</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">| id | name     | info                             | nick_name |</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">|  1 | xiaoming | &#123;&quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125; | 小萌      |</span><br><span class=\"line\">+----+----------+----------------------------------+-----------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n\n<p>最后从MySQL的官方网站查看帮助文档：<a href=\"http://dev.mysql.com/doc/refman/5.7/en/json.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.7/en/json.html</a></p>\n<p>😎</p>\n"},{"layout":"post","title":"关于PHP Composer 版本号前置~与^符号的区别(转)","date":"2018-12-29T07:14:57.000Z","author":"heropoo","excerpt":"关于PHP Composer 版本号前置~与^符号的区别","_content":"`~`和`^`的意思很接近，在`x.y`的情况下是一样的，都是代表`x.y <= 版本号 < (x+1).0`。但是在版本号是`x.y.z`的情况下有区别，举个例子：\n\n* `~1.2.3` 代表 `1.2.3 <= 版本号 < 1.3.0`\n\n* `^1.2.3` 代表 `1.2.3 <= 版本号 < 2.0.0`\n\n原文链接： https://www.cnblogs.com/hcpzhe/p/7909651.html\n","source":"_posts/2018-12-29-php-composer-version.md","raw":"---\nlayout: post\ntitle:  \"关于PHP Composer 版本号前置~与^符号的区别(转)\"\ndate:   2018-12-29 15:14:57\nauthor: \"heropoo\"\ncategories: \n    - PHP\ntags: \n    - PHP\n    - Composer\n\nexcerpt: \"关于PHP Composer 版本号前置~与^符号的区别\"\n---\n`~`和`^`的意思很接近，在`x.y`的情况下是一样的，都是代表`x.y <= 版本号 < (x+1).0`。但是在版本号是`x.y.z`的情况下有区别，举个例子：\n\n* `~1.2.3` 代表 `1.2.3 <= 版本号 < 1.3.0`\n\n* `^1.2.3` 代表 `1.2.3 <= 版本号 < 2.0.0`\n\n原文链接： https://www.cnblogs.com/hcpzhe/p/7909651.html\n","slug":"2018-12-29-php-composer-version","published":1,"updated":"2019-11-01T02:16:34.415Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsco0026sm4w5vr866oq","content":"<p><code>~</code>和<code>^</code>的意思很接近，在<code>x.y</code>的情况下是一样的，都是代表<code>x.y &lt;= 版本号 &lt; (x+1).0</code>。但是在版本号是<code>x.y.z</code>的情况下有区别，举个例子：</p>\n<ul>\n<li><p><code>~1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 1.3.0</code></p>\n</li>\n<li><p><code>^1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 2.0.0</code></p>\n</li>\n</ul>\n<p>原文链接： <a href=\"https://www.cnblogs.com/hcpzhe/p/7909651.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hcpzhe/p/7909651.html</a></p>\n","site":{"data":{}},"more":"<p><code>~</code>和<code>^</code>的意思很接近，在<code>x.y</code>的情况下是一样的，都是代表<code>x.y &lt;= 版本号 &lt; (x+1).0</code>。但是在版本号是<code>x.y.z</code>的情况下有区别，举个例子：</p>\n<ul>\n<li><p><code>~1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 1.3.0</code></p>\n</li>\n<li><p><code>^1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 2.0.0</code></p>\n</li>\n</ul>\n<p>原文链接： <a href=\"https://www.cnblogs.com/hcpzhe/p/7909651.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hcpzhe/p/7909651.html</a></p>\n"},{"layout":"post","title":"PHP多进程之pcntl扩展的使用","date":"2019-01-02T02:48:08.000Z","author":"heropoo","excerpt":"PHP多进程之pcntl扩展的使用","_content":"PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。\n\n## 安装\n可以直接使用`pecl install pcntl`，或者去`https://pecl.php.net/`下载源码包手动编译安装。\n\n## 使用\n\n先举个官方的栗子：\n```php\n<?php\n\n$pid = pcntl_fork();\n//父进程和子进程都会执行下面代码\nif ($pid == -1) {\n    //错误处理：创建子进程失败时返回-1.\n     die('could not fork');\n} else if ($pid) {\n     //父进程会得到子进程号，所以这里是父进程执行的逻辑\n     pcntl_wait($status); //等待子进程中断，防止子进程成为僵尸进程。\n} else {\n     //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。\n}\n```\n\n使用到的函数:\n* [pcntl_fork](https://secure.php.net/manual/zh/function.pcntl-fork.php)在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。\n\n* [pcntl_wait](https://secure.php.net/manual/zh/function.pcntl-wait.php) 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。\n\n再来个经典栗子：\n```php\n<?php\n$children = []; //定义一个数组用来存储子进程的pid\n$m = 10;    //fork 10次\nfor ($x = 0; $x < $m; $x++) {\n    $pid = pcntl_fork();\n    if ($pid == -1) {\n        die('could not fork '.$x);\n    } else if ($pid) {    //父进程执行的代码块\n        $children[] = $pid;\n        printf(\"Parent get child %d 's pid: %d\\n\", $x, $pid);\n    } else {    //子进程执行的代码块\n        $my_pid = posix_getpid();    //子进程获取自己的pid\n        //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。\n        echo \"Child $my_pid running...\\n\";\n        sleep(10);        //子进程干点啥 这里是睡10秒\n        \n        echo \"...Child $my_pid done\\n\";\n        exit(0);        //子进程执行结束exit\n    }\n}\n\nwhile(count($children) > 0) {\n    foreach($children as $key => $pid) {\n        $res = pcntl_waitpid($pid, $status, WNOHANG);    //获取返回指定pid的返回状态加了第二个参数非阻塞\n        if($res == -1 || $res > 0){\n            echo \"Parent get child $pid 's status: $status\\n\";\n            unset($children[$key]);\n        }\n    }\n    sleep(1);        //每一秒去轮询没有退出的子进程状态\n}\n```\n\n---- 最后更新于 2019-03-27 19:04:55\n\n","source":"_posts/2019-01-02-php-pcntl.md","raw":"---\nlayout: post\ntitle:  \"PHP多进程之pcntl扩展的使用\"\ndate:   2019-01-02 10:48:08\nauthor: \"heropoo\"\ncategories: \n    - PHP\ntags: \n    - PHP\n    - pcntl\n\nexcerpt: \"PHP多进程之pcntl扩展的使用\"\n---\nPHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。\n\n## 安装\n可以直接使用`pecl install pcntl`，或者去`https://pecl.php.net/`下载源码包手动编译安装。\n\n## 使用\n\n先举个官方的栗子：\n```php\n<?php\n\n$pid = pcntl_fork();\n//父进程和子进程都会执行下面代码\nif ($pid == -1) {\n    //错误处理：创建子进程失败时返回-1.\n     die('could not fork');\n} else if ($pid) {\n     //父进程会得到子进程号，所以这里是父进程执行的逻辑\n     pcntl_wait($status); //等待子进程中断，防止子进程成为僵尸进程。\n} else {\n     //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。\n}\n```\n\n使用到的函数:\n* [pcntl_fork](https://secure.php.net/manual/zh/function.pcntl-fork.php)在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。\n\n* [pcntl_wait](https://secure.php.net/manual/zh/function.pcntl-wait.php) 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。\n\n再来个经典栗子：\n```php\n<?php\n$children = []; //定义一个数组用来存储子进程的pid\n$m = 10;    //fork 10次\nfor ($x = 0; $x < $m; $x++) {\n    $pid = pcntl_fork();\n    if ($pid == -1) {\n        die('could not fork '.$x);\n    } else if ($pid) {    //父进程执行的代码块\n        $children[] = $pid;\n        printf(\"Parent get child %d 's pid: %d\\n\", $x, $pid);\n    } else {    //子进程执行的代码块\n        $my_pid = posix_getpid();    //子进程获取自己的pid\n        //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。\n        echo \"Child $my_pid running...\\n\";\n        sleep(10);        //子进程干点啥 这里是睡10秒\n        \n        echo \"...Child $my_pid done\\n\";\n        exit(0);        //子进程执行结束exit\n    }\n}\n\nwhile(count($children) > 0) {\n    foreach($children as $key => $pid) {\n        $res = pcntl_waitpid($pid, $status, WNOHANG);    //获取返回指定pid的返回状态加了第二个参数非阻塞\n        if($res == -1 || $res > 0){\n            echo \"Parent get child $pid 's status: $status\\n\";\n            unset($children[$key]);\n        }\n    }\n    sleep(1);        //每一秒去轮询没有退出的子进程状态\n}\n```\n\n---- 最后更新于 2019-03-27 19:04:55\n\n","slug":"2019-01-02-php-pcntl","published":1,"updated":"2019-11-01T02:16:34.415Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscp0029sm4w0tdp8pje","content":"<p>PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>可以直接使用<code>pecl install pcntl</code>，或者去<code>https://pecl.php.net/</code>下载源码包手动编译安装。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>先举个官方的栗子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$pid = pcntl_fork();</span><br><span class=\"line\"><span class=\"comment\">//父进程和子进程都会执行下面代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//错误处理：创建子进程失败时返回-1.</span></span><br><span class=\"line\">     <span class=\"keyword\">die</span>(<span class=\"string\">'could not fork'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($pid) &#123;</span><br><span class=\"line\">     <span class=\"comment\">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span></span><br><span class=\"line\">     pcntl_wait($status); <span class=\"comment\">//等待子进程中断，防止子进程成为僵尸进程。</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用到的函数:</p>\n<ul>\n<li><p><a href=\"https://secure.php.net/manual/zh/function.pcntl-fork.php\" target=\"_blank\" rel=\"noopener\">pcntl_fork</a>在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。</p>\n</li>\n<li><p><a href=\"https://secure.php.net/manual/zh/function.pcntl-wait.php\" target=\"_blank\" rel=\"noopener\">pcntl_wait</a> 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。</p>\n</li>\n</ul>\n<p>再来个经典栗子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$children = []; <span class=\"comment\">//定义一个数组用来存储子进程的pid</span></span><br><span class=\"line\">$m = <span class=\"number\">10</span>;    <span class=\"comment\">//fork 10次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($x = <span class=\"number\">0</span>; $x &lt; $m; $x++) &#123;</span><br><span class=\"line\">    $pid = pcntl_fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'could not fork '</span>.$x);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($pid) &#123;    <span class=\"comment\">//父进程执行的代码块</span></span><br><span class=\"line\">        $children[] = $pid;</span><br><span class=\"line\">        printf(<span class=\"string\">\"Parent get child %d 's pid: %d\\n\"</span>, $x, $pid);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">//子进程执行的代码块</span></span><br><span class=\"line\">        $my_pid = posix_getpid();    <span class=\"comment\">//子进程获取自己的pid</span></span><br><span class=\"line\">        <span class=\"comment\">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Child $my_pid running...\\n\"</span>;</span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);        <span class=\"comment\">//子进程干点啥 这里是睡10秒</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"...Child $my_pid done\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"number\">0</span>);        <span class=\"comment\">//子进程执行结束exit</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(count($children) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($children <span class=\"keyword\">as</span> $key =&gt; $pid) &#123;</span><br><span class=\"line\">        $res = pcntl_waitpid($pid, $status, WNOHANG);    <span class=\"comment\">//获取返回指定pid的返回状态加了第二个参数非阻塞</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>($res == <span class=\"number\">-1</span> || $res &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Parent get child $pid 's status: $status\\n\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>($children[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);        <span class=\"comment\">//每一秒去轮询没有退出的子进程状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>—- 最后更新于 2019-03-27 19:04:55</p>\n","site":{"data":{}},"more":"<p>PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>可以直接使用<code>pecl install pcntl</code>，或者去<code>https://pecl.php.net/</code>下载源码包手动编译安装。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>先举个官方的栗子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$pid = pcntl_fork();</span><br><span class=\"line\"><span class=\"comment\">//父进程和子进程都会执行下面代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//错误处理：创建子进程失败时返回-1.</span></span><br><span class=\"line\">     <span class=\"keyword\">die</span>(<span class=\"string\">'could not fork'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($pid) &#123;</span><br><span class=\"line\">     <span class=\"comment\">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span></span><br><span class=\"line\">     pcntl_wait($status); <span class=\"comment\">//等待子进程中断，防止子进程成为僵尸进程。</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用到的函数:</p>\n<ul>\n<li><p><a href=\"https://secure.php.net/manual/zh/function.pcntl-fork.php\" target=\"_blank\" rel=\"noopener\">pcntl_fork</a>在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。</p>\n</li>\n<li><p><a href=\"https://secure.php.net/manual/zh/function.pcntl-wait.php\" target=\"_blank\" rel=\"noopener\">pcntl_wait</a> 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。</p>\n</li>\n</ul>\n<p>再来个经典栗子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$children = []; <span class=\"comment\">//定义一个数组用来存储子进程的pid</span></span><br><span class=\"line\">$m = <span class=\"number\">10</span>;    <span class=\"comment\">//fork 10次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($x = <span class=\"number\">0</span>; $x &lt; $m; $x++) &#123;</span><br><span class=\"line\">    $pid = pcntl_fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'could not fork '</span>.$x);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($pid) &#123;    <span class=\"comment\">//父进程执行的代码块</span></span><br><span class=\"line\">        $children[] = $pid;</span><br><span class=\"line\">        printf(<span class=\"string\">\"Parent get child %d 's pid: %d\\n\"</span>, $x, $pid);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">//子进程执行的代码块</span></span><br><span class=\"line\">        $my_pid = posix_getpid();    <span class=\"comment\">//子进程获取自己的pid</span></span><br><span class=\"line\">        <span class=\"comment\">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Child $my_pid running...\\n\"</span>;</span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);        <span class=\"comment\">//子进程干点啥 这里是睡10秒</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"...Child $my_pid done\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"number\">0</span>);        <span class=\"comment\">//子进程执行结束exit</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(count($children) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($children <span class=\"keyword\">as</span> $key =&gt; $pid) &#123;</span><br><span class=\"line\">        $res = pcntl_waitpid($pid, $status, WNOHANG);    <span class=\"comment\">//获取返回指定pid的返回状态加了第二个参数非阻塞</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>($res == <span class=\"number\">-1</span> || $res &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Parent get child $pid 's status: $status\\n\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>($children[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);        <span class=\"comment\">//每一秒去轮询没有退出的子进程状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>—- 最后更新于 2019-03-27 19:04:55</p>\n"},{"layout":"post","title":"容器的宠儿AlpineLinux的基本使用","date":"2019-01-17T06:48:41.000Z","author":"heropoo","excerpt":"容器的宠儿AlpineLinux的基本使用","_content":"现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！\n\n哈哈~废话不多说了，说说这个系统的基本使用吧\n\n## 软件包管理\n\n更新软件包索引文件\n```\napk update\n```\n\n如果感觉网速很慢，那可以先换个中国的源\n```\n#中科大的源 速度杠杠的\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n```\n\n下面我们以安装nginx为例\n\n安装软件包\n```\napk add nginx\n```\n\n安装软件包到最新\n```\napk add --update nginx\n```\n\n查找软件包\n```\napk search nginx \n```\n\n卸载软件包\n```\napk del nginx\n```\n\n## 服务管理\n\n启动Nginx\n```\n/etc/init.d/nginx start\n```\n\n添加nginx到启动服务中，下次开机自动运行\n```\nrc-update add nginx\n```\n\n把nginx从启动服务中移除，下次开机不会自动运行\n```\nrc-update del nginx\n```\n\n## 一些网络工具所在软件包\n```\ntelnet  =>  busybox-extras\n```  ","source":"_posts/2019-01-17-alpinelinux.md","raw":"---\nlayout: post\ntitle:  \"容器的宠儿AlpineLinux的基本使用\"\ndate:   2019-01-17 14:48:41\nauthor: \"heropoo\"\ncategories: \n    - Linux\ntags: \n    - Linux\n    - AlpineLinux\n\nexcerpt: \"容器的宠儿AlpineLinux的基本使用\"\n---\n现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！\n\n哈哈~废话不多说了，说说这个系统的基本使用吧\n\n## 软件包管理\n\n更新软件包索引文件\n```\napk update\n```\n\n如果感觉网速很慢，那可以先换个中国的源\n```\n#中科大的源 速度杠杠的\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n```\n\n下面我们以安装nginx为例\n\n安装软件包\n```\napk add nginx\n```\n\n安装软件包到最新\n```\napk add --update nginx\n```\n\n查找软件包\n```\napk search nginx \n```\n\n卸载软件包\n```\napk del nginx\n```\n\n## 服务管理\n\n启动Nginx\n```\n/etc/init.d/nginx start\n```\n\n添加nginx到启动服务中，下次开机自动运行\n```\nrc-update add nginx\n```\n\n把nginx从启动服务中移除，下次开机不会自动运行\n```\nrc-update del nginx\n```\n\n## 一些网络工具所在软件包\n```\ntelnet  =>  busybox-extras\n```  ","slug":"2019-01-17-alpinelinux","published":1,"updated":"2019-11-01T02:16:34.415Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscq002bsm4wcx3mc6eu","content":"<p>现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！</p>\n<p>哈哈~废话不多说了，说说这个系统的基本使用吧</p>\n<h2 id=\"软件包管理\"><a href=\"#软件包管理\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h2><p>更新软件包索引文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk update</span><br></pre></td></tr></table></figure>\n\n<p>如果感觉网速很慢，那可以先换个中国的源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#中科大的源 速度杠杠的</span><br><span class=\"line\">sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br></pre></td></tr></table></figure>\n\n<p>下面我们以安装nginx为例</p>\n<p>安装软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装软件包到最新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add --update nginx</span><br></pre></td></tr></table></figure>\n\n<p>查找软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk search nginx</span><br></pre></td></tr></table></figure>\n\n<p>卸载软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk del nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h2><p>启动Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>\n\n<p>添加nginx到启动服务中，下次开机自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc-update add nginx</span><br></pre></td></tr></table></figure>\n\n<p>把nginx从启动服务中移除，下次开机不会自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc-update del nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些网络工具所在软件包\"><a href=\"#一些网络工具所在软件包\" class=\"headerlink\" title=\"一些网络工具所在软件包\"></a>一些网络工具所在软件包</h2><pre><code>telnet  =&gt;  busybox-extras</code></pre>","site":{"data":{}},"more":"<p>现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！</p>\n<p>哈哈~废话不多说了，说说这个系统的基本使用吧</p>\n<h2 id=\"软件包管理\"><a href=\"#软件包管理\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h2><p>更新软件包索引文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk update</span><br></pre></td></tr></table></figure>\n\n<p>如果感觉网速很慢，那可以先换个中国的源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#中科大的源 速度杠杠的</span><br><span class=\"line\">sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br></pre></td></tr></table></figure>\n\n<p>下面我们以安装nginx为例</p>\n<p>安装软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装软件包到最新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add --update nginx</span><br></pre></td></tr></table></figure>\n\n<p>查找软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk search nginx</span><br></pre></td></tr></table></figure>\n\n<p>卸载软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk del nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h2><p>启动Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>\n\n<p>添加nginx到启动服务中，下次开机自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc-update add nginx</span><br></pre></td></tr></table></figure>\n\n<p>把nginx从启动服务中移除，下次开机不会自动运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc-update del nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些网络工具所在软件包\"><a href=\"#一些网络工具所在软件包\" class=\"headerlink\" title=\"一些网络工具所在软件包\"></a>一些网络工具所在软件包</h2><pre><code>telnet  =&gt;  busybox-extras</code></pre>"},{"layout":"post","title":"用Redis实现PHP异步队列","date":"2019-03-29T07:40:41.000Z","author":"Heropoo","excerpt":"最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。","_content":"最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。\n\n下面引用百度百科的对[队列](https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481)的解释：\n> 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n> 简单点讲就是：先进先出\n\n要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。\n\n简单实现，大概代码是这样子的：\n```php\nclass Queue{\n    protected $items = [];\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     */\n    public function push($key, $value){\n        isset($this->items[$key]) or $this->items[$key] = [];\n        return array_push($this->items[$key], $value);\n    }\n\n    /**\n     * 从队列头部取出数据\n     * @param string $key 对列名称\n     * return mixed $value 数据\n     */\n    public function pop($key){\n        isset($this->items[$key]) or $this->items[$key] = [];\n        return array_shift($this->items[$key]);\n    }\n}\n```\n\n测试：\n```php\n$queue = new Queue();\n\nvar_dump($queue->pop('list_1'));    //输出 NULL\n\n$queue->push('list_1', '1');\n$queue->push('list_1', '2');\n$queue->push('list_1', '3');\n\nvar_dump($queue->pop('list_1'));    //输出 string(1) \"1\"\nvar_dump($queue->pop('list_1'));    //输出 string(1) \"2\"\n```\n上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。\n\n这里我们使用redis，用到redis的有序列表（list）\n```php\nclass RedisQueue{\n    protected $client;  //这里使用了predis这个库连接redis\n    public function __construct(\\Predis\\Client $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     */\n    public function push($key, $value){\n        return $this->client->rpush($key, $value);  //从右边入队\n    }\n\n    /**\n     * 从队列头部取出数据\n     * @param string $key 对列名称\n     * @return mixed $value 数据\n     */\n    public function pop($key){\n        return $this->client->lpop($key);   //从左边取\n    }\n}\n```\n你还是可以使用上面的例子测试下。\n\n当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist\n\n最终代码如下：\n```php\nclass RedisQueue{\n\n    protected  $client;\n    public function __construct(\\Predis\\Client $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     * @param int $delay 延迟多少秒\n     * @return mixed $value 数据\n     */\n    public function push($key, $value, $delay = null){\n        if(is_null($delay)){    //不使用延迟的时候还是使用以前的rpush入队\n            return $this->client->rpush($key, $value);\n        }\n        $time = time() + $delay;\n        if($time > time()){     //还未到该入队的时间时\n            $hash_key = md5($this->randString(16).'_'.time().'_'.$value);       //生成一个唯一key\n            return $this->client->transaction(function($tx) use ($key, $time, $hash_key, $value){   //使用reids事务\n                /** @var \\Predis\\Client $tx */\n                $tx->zadd($key.':zset', [   \n                    $hash_key=>$time    //这里以生成的唯一key做 对象member 以time做分数score\n                ]);\n                $tx->hset($key.':hlist', $hash_key, $value);    //并且保存唯一key和值的映射\n                $tx->expire($key.':zset', 7*86400);     //有效期7天\n                $tx->expire($key.':hlist', 7*86400);\n            });\n        }\n    }\n\n    /**\n     * 取出数据\n     * @param string $key 对列名称\n     */\n    public function receive($key){\n        if($this->getLock($key.':lock')){   //使用锁保证线程安全\n            $keys = $this->client->zrangebyscore($key.':zset',0, time());   //按当前时间取分数小于等于当前时间的集合元素\n            if(!empty($keys)) {\n                $message_datas = $this->client->hmget($key.':hlist', $keys);    //通过这些key拿到值\n                $this->client->transaction(function($tx) use ($key, $keys, $message_datas){ //继续使用redis事务保证数据完整\n                    /** @var \\Predis\\Client $tx */\n                    foreach ($message_datas as $i => $message_data){\n                        $tx->rpush($key, $message_data); //这时候才是真正的入队\n                        $hash_key = $keys[$i];\n                        $tx->hdel($key.':hlist', $hash_key);    //从hash列表删除元素\n                        $tx->zrem($key.':zset', $hash_key); //从集合删除元素\n                    }\n                });\n            }\n            $this->releaseLock($key.':lock');//释放锁\n        }\n        return $this->client->lpop($key); //出队\n    }\n\n    public function getLock($key){\n        $ret = true;\n        if($this->client->incr($key) != 1){\n            $ret = false;\n        }\n        $ttl = $this->client->ttl($key);\n        if($ttl == -1) {    //forever\n            $this->client->expire($key, 60);\n        }\n        return $ret;\n    }\n\n    public function releaseLock($key){\n        $this->client->del($key);\n    }\n    \n    protected function randString($length){\n        $str = '';\n        $strPol = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\";\n        $max = strlen($strPol) - 1;\n\n        for ($i = 0; $i < $length; $i++) {\n            $str .= $strPol[mt_rand(0, $max)];\n        }\n        return $str;\n    }\n}\n```\n主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。\n\n\n\n\n\n","source":"_posts/2019-03-29-php-queue.md","raw":"---\nlayout: post\ntitle:  \"用Redis实现PHP异步队列\"\ndate:   2019-03-29 15:40:41\nauthor: \"Heropoo\"\ncategories: \n    - Queue\n    - PHP\ntags:\n    - Queue\n    - PHP\n    - Redis\nexcerpt: \"最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。\"\n---\n最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。\n\n下面引用百度百科的对[队列](https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481)的解释：\n> 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n> 简单点讲就是：先进先出\n\n要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。\n\n简单实现，大概代码是这样子的：\n```php\nclass Queue{\n    protected $items = [];\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     */\n    public function push($key, $value){\n        isset($this->items[$key]) or $this->items[$key] = [];\n        return array_push($this->items[$key], $value);\n    }\n\n    /**\n     * 从队列头部取出数据\n     * @param string $key 对列名称\n     * return mixed $value 数据\n     */\n    public function pop($key){\n        isset($this->items[$key]) or $this->items[$key] = [];\n        return array_shift($this->items[$key]);\n    }\n}\n```\n\n测试：\n```php\n$queue = new Queue();\n\nvar_dump($queue->pop('list_1'));    //输出 NULL\n\n$queue->push('list_1', '1');\n$queue->push('list_1', '2');\n$queue->push('list_1', '3');\n\nvar_dump($queue->pop('list_1'));    //输出 string(1) \"1\"\nvar_dump($queue->pop('list_1'));    //输出 string(1) \"2\"\n```\n上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。\n\n这里我们使用redis，用到redis的有序列表（list）\n```php\nclass RedisQueue{\n    protected $client;  //这里使用了predis这个库连接redis\n    public function __construct(\\Predis\\Client $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     */\n    public function push($key, $value){\n        return $this->client->rpush($key, $value);  //从右边入队\n    }\n\n    /**\n     * 从队列头部取出数据\n     * @param string $key 对列名称\n     * @return mixed $value 数据\n     */\n    public function pop($key){\n        return $this->client->lpop($key);   //从左边取\n    }\n}\n```\n你还是可以使用上面的例子测试下。\n\n当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist\n\n最终代码如下：\n```php\nclass RedisQueue{\n\n    protected  $client;\n    public function __construct(\\Predis\\Client $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * 从队列尾部插入数据\n     * @param string $key 对列名称\n     * @param int $delay 延迟多少秒\n     * @return mixed $value 数据\n     */\n    public function push($key, $value, $delay = null){\n        if(is_null($delay)){    //不使用延迟的时候还是使用以前的rpush入队\n            return $this->client->rpush($key, $value);\n        }\n        $time = time() + $delay;\n        if($time > time()){     //还未到该入队的时间时\n            $hash_key = md5($this->randString(16).'_'.time().'_'.$value);       //生成一个唯一key\n            return $this->client->transaction(function($tx) use ($key, $time, $hash_key, $value){   //使用reids事务\n                /** @var \\Predis\\Client $tx */\n                $tx->zadd($key.':zset', [   \n                    $hash_key=>$time    //这里以生成的唯一key做 对象member 以time做分数score\n                ]);\n                $tx->hset($key.':hlist', $hash_key, $value);    //并且保存唯一key和值的映射\n                $tx->expire($key.':zset', 7*86400);     //有效期7天\n                $tx->expire($key.':hlist', 7*86400);\n            });\n        }\n    }\n\n    /**\n     * 取出数据\n     * @param string $key 对列名称\n     */\n    public function receive($key){\n        if($this->getLock($key.':lock')){   //使用锁保证线程安全\n            $keys = $this->client->zrangebyscore($key.':zset',0, time());   //按当前时间取分数小于等于当前时间的集合元素\n            if(!empty($keys)) {\n                $message_datas = $this->client->hmget($key.':hlist', $keys);    //通过这些key拿到值\n                $this->client->transaction(function($tx) use ($key, $keys, $message_datas){ //继续使用redis事务保证数据完整\n                    /** @var \\Predis\\Client $tx */\n                    foreach ($message_datas as $i => $message_data){\n                        $tx->rpush($key, $message_data); //这时候才是真正的入队\n                        $hash_key = $keys[$i];\n                        $tx->hdel($key.':hlist', $hash_key);    //从hash列表删除元素\n                        $tx->zrem($key.':zset', $hash_key); //从集合删除元素\n                    }\n                });\n            }\n            $this->releaseLock($key.':lock');//释放锁\n        }\n        return $this->client->lpop($key); //出队\n    }\n\n    public function getLock($key){\n        $ret = true;\n        if($this->client->incr($key) != 1){\n            $ret = false;\n        }\n        $ttl = $this->client->ttl($key);\n        if($ttl == -1) {    //forever\n            $this->client->expire($key, 60);\n        }\n        return $ret;\n    }\n\n    public function releaseLock($key){\n        $this->client->del($key);\n    }\n    \n    protected function randString($length){\n        $str = '';\n        $strPol = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\";\n        $max = strlen($strPol) - 1;\n\n        for ($i = 0; $i < $length; $i++) {\n            $str .= $strPol[mt_rand(0, $max)];\n        }\n        return $str;\n    }\n}\n```\n主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。\n\n\n\n\n\n","slug":"2019-03-29-php-queue","published":1,"updated":"2019-11-01T02:16:34.416Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscr002dsm4wh6flfwof","content":"<p>最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。</p>\n<p>下面引用百度百科的对<a href=\"https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481\" target=\"_blank\" rel=\"noopener\">队列</a>的解释：</p>\n<blockquote>\n<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>简单点讲就是：先进先出</p>\n</blockquote>\n<p>要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。</p>\n<p>简单实现，大概代码是这样子的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $items = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;items[$key]) <span class=\"keyword\">or</span> <span class=\"keyword\">$this</span>-&gt;items[$key] = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_push(<span class=\"keyword\">$this</span>-&gt;items[$key], $value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列头部取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * return mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;items[$key]) <span class=\"keyword\">or</span> <span class=\"keyword\">$this</span>-&gt;items[$key] = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_shift(<span class=\"keyword\">$this</span>-&gt;items[$key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$queue = <span class=\"keyword\">new</span> Queue();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'1'</span>);</span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'2'</span>);</span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 string(1) \"1\"</span></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 string(1) \"2\"</span></span><br></pre></td></tr></table></figure>\n<p>上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。</p>\n<p>这里我们使用redis，用到redis的有序列表（list）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisQueue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $client;  <span class=\"comment\">//这里使用了predis这个库连接redis</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(\\Predis\\Client $client)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client = $client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;rpush($key, $value);  <span class=\"comment\">//从右边入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列头部取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;lpop($key);   <span class=\"comment\">//从左边取</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你还是可以使用上面的例子测试下。</p>\n<p>当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisQueue</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  $client;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(\\Predis\\Client $client)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client = $client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $delay 延迟多少秒</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value, $delay = null)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_null($delay))&#123;    <span class=\"comment\">//不使用延迟的时候还是使用以前的rpush入队</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;rpush($key, $value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $time = time() + $delay;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($time &gt; time())&#123;     <span class=\"comment\">//还未到该入队的时间时</span></span><br><span class=\"line\">            $hash_key = md5(<span class=\"keyword\">$this</span>-&gt;randString(<span class=\"number\">16</span>).<span class=\"string\">'_'</span>.time().<span class=\"string\">'_'</span>.$value);       <span class=\"comment\">//生成一个唯一key</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;transaction(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($tx)</span> <span class=\"title\">use</span> <span class=\"params\">($key, $time, $hash_key, $value)</span></span>&#123;   <span class=\"comment\">//使用reids事务</span></span><br><span class=\"line\">                <span class=\"comment\">/** <span class=\"doctag\">@var</span> \\Predis\\Client $tx */</span></span><br><span class=\"line\">                $tx-&gt;zadd($key.<span class=\"string\">':zset'</span>, [   </span><br><span class=\"line\">                    $hash_key=&gt;$time    <span class=\"comment\">//这里以生成的唯一key做 对象member 以time做分数score</span></span><br><span class=\"line\">                ]);</span><br><span class=\"line\">                $tx-&gt;hset($key.<span class=\"string\">':hlist'</span>, $hash_key, $value);    <span class=\"comment\">//并且保存唯一key和值的映射</span></span><br><span class=\"line\">                $tx-&gt;expire($key.<span class=\"string\">':zset'</span>, <span class=\"number\">7</span>*<span class=\"number\">86400</span>);     <span class=\"comment\">//有效期7天</span></span><br><span class=\"line\">                $tx-&gt;expire($key.<span class=\"string\">':hlist'</span>, <span class=\"number\">7</span>*<span class=\"number\">86400</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receive</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;getLock($key.<span class=\"string\">':lock'</span>))&#123;   <span class=\"comment\">//使用锁保证线程安全</span></span><br><span class=\"line\">            $keys = <span class=\"keyword\">$this</span>-&gt;client-&gt;zrangebyscore($key.<span class=\"string\">':zset'</span>,<span class=\"number\">0</span>, time());   <span class=\"comment\">//按当前时间取分数小于等于当前时间的集合元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>($keys)) &#123;</span><br><span class=\"line\">                $message_datas = <span class=\"keyword\">$this</span>-&gt;client-&gt;hmget($key.<span class=\"string\">':hlist'</span>, $keys);    <span class=\"comment\">//通过这些key拿到值</span></span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;client-&gt;transaction(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($tx)</span> <span class=\"title\">use</span> <span class=\"params\">($key, $keys, $message_datas)</span></span>&#123; <span class=\"comment\">//继续使用redis事务保证数据完整</span></span><br><span class=\"line\">                    <span class=\"comment\">/** <span class=\"doctag\">@var</span> \\Predis\\Client $tx */</span></span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> ($message_datas <span class=\"keyword\">as</span> $i =&gt; $message_data)&#123;</span><br><span class=\"line\">                        $tx-&gt;rpush($key, $message_data); <span class=\"comment\">//这时候才是真正的入队</span></span><br><span class=\"line\">                        $hash_key = $keys[$i];</span><br><span class=\"line\">                        $tx-&gt;hdel($key.<span class=\"string\">':hlist'</span>, $hash_key);    <span class=\"comment\">//从hash列表删除元素</span></span><br><span class=\"line\">                        $tx-&gt;zrem($key.<span class=\"string\">':zset'</span>, $hash_key); <span class=\"comment\">//从集合删除元素</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;releaseLock($key.<span class=\"string\">':lock'</span>);<span class=\"comment\">//释放锁</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;lpop($key); <span class=\"comment\">//出队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLock</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        $ret = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;client-&gt;incr($key) != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            $ret = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $ttl = <span class=\"keyword\">$this</span>-&gt;client-&gt;ttl($key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($ttl == <span class=\"number\">-1</span>) &#123;    <span class=\"comment\">//forever</span></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;client-&gt;expire($key, <span class=\"number\">60</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">releaseLock</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client-&gt;del($key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randString</span><span class=\"params\">($length)</span></span>&#123;</span><br><span class=\"line\">        $str = <span class=\"string\">''</span>;</span><br><span class=\"line\">        $strPol = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"</span>;</span><br><span class=\"line\">        $max = strlen($strPol) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">            $str .= $strPol[mt_rand(<span class=\"number\">0</span>, $max)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。</p>\n","site":{"data":{}},"more":"<p>最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。</p>\n<p>下面引用百度百科的对<a href=\"https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481\" target=\"_blank\" rel=\"noopener\">队列</a>的解释：</p>\n<blockquote>\n<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>简单点讲就是：先进先出</p>\n</blockquote>\n<p>要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。</p>\n<p>简单实现，大概代码是这样子的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $items = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;items[$key]) <span class=\"keyword\">or</span> <span class=\"keyword\">$this</span>-&gt;items[$key] = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_push(<span class=\"keyword\">$this</span>-&gt;items[$key], $value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列头部取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * return mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;items[$key]) <span class=\"keyword\">or</span> <span class=\"keyword\">$this</span>-&gt;items[$key] = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_shift(<span class=\"keyword\">$this</span>-&gt;items[$key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$queue = <span class=\"keyword\">new</span> Queue();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'1'</span>);</span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'2'</span>);</span><br><span class=\"line\">$queue-&gt;push(<span class=\"string\">'list_1'</span>, <span class=\"string\">'3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 string(1) \"1\"</span></span><br><span class=\"line\">var_dump($queue-&gt;pop(<span class=\"string\">'list_1'</span>));    <span class=\"comment\">//输出 string(1) \"2\"</span></span><br></pre></td></tr></table></figure>\n<p>上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。</p>\n<p>这里我们使用redis，用到redis的有序列表（list）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisQueue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $client;  <span class=\"comment\">//这里使用了predis这个库连接redis</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(\\Predis\\Client $client)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client = $client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;rpush($key, $value);  <span class=\"comment\">//从右边入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列头部取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;lpop($key);   <span class=\"comment\">//从左边取</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你还是可以使用上面的例子测试下。</p>\n<p>当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisQueue</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  $client;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(\\Predis\\Client $client)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client = $client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从队列尾部插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $delay 延迟多少秒</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed $value 数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span><span class=\"params\">($key, $value, $delay = null)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_null($delay))&#123;    <span class=\"comment\">//不使用延迟的时候还是使用以前的rpush入队</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;rpush($key, $value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $time = time() + $delay;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($time &gt; time())&#123;     <span class=\"comment\">//还未到该入队的时间时</span></span><br><span class=\"line\">            $hash_key = md5(<span class=\"keyword\">$this</span>-&gt;randString(<span class=\"number\">16</span>).<span class=\"string\">'_'</span>.time().<span class=\"string\">'_'</span>.$value);       <span class=\"comment\">//生成一个唯一key</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;transaction(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($tx)</span> <span class=\"title\">use</span> <span class=\"params\">($key, $time, $hash_key, $value)</span></span>&#123;   <span class=\"comment\">//使用reids事务</span></span><br><span class=\"line\">                <span class=\"comment\">/** <span class=\"doctag\">@var</span> \\Predis\\Client $tx */</span></span><br><span class=\"line\">                $tx-&gt;zadd($key.<span class=\"string\">':zset'</span>, [   </span><br><span class=\"line\">                    $hash_key=&gt;$time    <span class=\"comment\">//这里以生成的唯一key做 对象member 以time做分数score</span></span><br><span class=\"line\">                ]);</span><br><span class=\"line\">                $tx-&gt;hset($key.<span class=\"string\">':hlist'</span>, $hash_key, $value);    <span class=\"comment\">//并且保存唯一key和值的映射</span></span><br><span class=\"line\">                $tx-&gt;expire($key.<span class=\"string\">':zset'</span>, <span class=\"number\">7</span>*<span class=\"number\">86400</span>);     <span class=\"comment\">//有效期7天</span></span><br><span class=\"line\">                $tx-&gt;expire($key.<span class=\"string\">':hlist'</span>, <span class=\"number\">7</span>*<span class=\"number\">86400</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取出数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key 对列名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receive</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;getLock($key.<span class=\"string\">':lock'</span>))&#123;   <span class=\"comment\">//使用锁保证线程安全</span></span><br><span class=\"line\">            $keys = <span class=\"keyword\">$this</span>-&gt;client-&gt;zrangebyscore($key.<span class=\"string\">':zset'</span>,<span class=\"number\">0</span>, time());   <span class=\"comment\">//按当前时间取分数小于等于当前时间的集合元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>($keys)) &#123;</span><br><span class=\"line\">                $message_datas = <span class=\"keyword\">$this</span>-&gt;client-&gt;hmget($key.<span class=\"string\">':hlist'</span>, $keys);    <span class=\"comment\">//通过这些key拿到值</span></span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;client-&gt;transaction(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($tx)</span> <span class=\"title\">use</span> <span class=\"params\">($key, $keys, $message_datas)</span></span>&#123; <span class=\"comment\">//继续使用redis事务保证数据完整</span></span><br><span class=\"line\">                    <span class=\"comment\">/** <span class=\"doctag\">@var</span> \\Predis\\Client $tx */</span></span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> ($message_datas <span class=\"keyword\">as</span> $i =&gt; $message_data)&#123;</span><br><span class=\"line\">                        $tx-&gt;rpush($key, $message_data); <span class=\"comment\">//这时候才是真正的入队</span></span><br><span class=\"line\">                        $hash_key = $keys[$i];</span><br><span class=\"line\">                        $tx-&gt;hdel($key.<span class=\"string\">':hlist'</span>, $hash_key);    <span class=\"comment\">//从hash列表删除元素</span></span><br><span class=\"line\">                        $tx-&gt;zrem($key.<span class=\"string\">':zset'</span>, $hash_key); <span class=\"comment\">//从集合删除元素</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;releaseLock($key.<span class=\"string\">':lock'</span>);<span class=\"comment\">//释放锁</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;client-&gt;lpop($key); <span class=\"comment\">//出队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLock</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        $ret = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;client-&gt;incr($key) != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            $ret = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $ttl = <span class=\"keyword\">$this</span>-&gt;client-&gt;ttl($key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($ttl == <span class=\"number\">-1</span>) &#123;    <span class=\"comment\">//forever</span></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;client-&gt;expire($key, <span class=\"number\">60</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">releaseLock</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;client-&gt;del($key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randString</span><span class=\"params\">($length)</span></span>&#123;</span><br><span class=\"line\">        $str = <span class=\"string\">''</span>;</span><br><span class=\"line\">        $strPol = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"</span>;</span><br><span class=\"line\">        $max = strlen($strPol) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">            $str .= $strPol[mt_rand(<span class=\"number\">0</span>, $max)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。</p>\n"},{"layout":"post","title":"玩转ElasticSearch全文搜索","date":"2019-04-09T04:19:42.000Z","author":"Heropoo","excerpt":"玩转ElasticSearch全文搜索","_content":"玩转ElasticSearch全文搜索，做个笔记。\n\n## 运行ElasticSearch服务\n为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。\n\n我们使用官方的`elasticsearch:5.6.16-alpine`作为基础镜像，另外添加一个中文分词插件`elasticsearch-ik`\n\n我们的Dockerfile内容如下，很简单，只需两行哟：\n```\nFROM elasticsearch:5.6.16-alpine\nRUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip\n```\n\n构建镜像：\n```\ndocker build -t heropoo/elasticsearch-ik .\n```\n\n运行容器：\n```\ndocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" heropoo/elasticsearch-ik\n```\n\n因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 http://localhost:9200 看看服务是否正常。\n\n## 基本概念\nElastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。\n\n### Index\nElastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。\n\n查看当前节点的所有 Index\n```\ncurl -X GET 'http://localhost:9200/_cat/indices?v'\n```\n\n### Document\nIndex 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。\n例如：\n```\n{\n  \"user\": \"张三\",\n  \"title\": \"工程师\",\n  \"desc\": \"数据库管理\"\n}\n```\n同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。\n\n### Type\n不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。\n\n下面的命令可以列出每个 Index 所包含的 Type\n```\ncurl 'localhost:9200/_mapping?pretty=true'\n```\npretty参数是优化显示结果易于查看\n\n## Index操作\n### 查看当前节点的所有 Index\n```\ncurl -X GET 'http://localhost:9200/_cat/indices?v'\n```\n\n### 新建Index\n```\ncurl -X PUT 'http://localhost:9200/weather'\n```\n\n### 删除Index\n```\ncurl -X DELETE 'http://localhost:9200/weather'\n```\n\n### 新建一个 Index，指定需要分词的字段\n```\ncurl -X PUT 'localhost:9200/accounts' -d '\n{\n  \"mappings\": {\n    \"person\": {\n      \"properties\": {\n        \"user\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        },\n        \"title\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        },\n        \"desc\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        }\n      }\n    }\n  }\n}'\n```\n上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。\n\n## 数据操作\n### 新增记录\n向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录\n```\ncurl -X PUT 'localhost:9200/accounts/person/1' -d '\n{\n  \"user\": \"张三\",\n  \"title\": \"工程师\",\n  \"desc\": \"数据库管理\"\n}'\n```\n\n新增记录的时候，也可以不指定 Id，这时要改成 POST 请求\n```\ncurl -X POST 'localhost:9200/accounts/person' -d '\n{\n  \"user\": \"李四\",\n  \"title\": \"工程师\",\n  \"desc\": \"软件工程师\"\n}'\n```\n\n其实PUT就是存在时修改，不存在时创建。\n\n### 查看记录\n向/Index/Type/Id发出 GET 请求，就可以查看这条记录\n```\ncurl 'localhost:9200/accounts/person/1?pretty=true'\n```\n\n### 删除记录\n```\ncurl -X DELETE 'localhost:9200/accounts/person/1'\n```\n\n### 更新记录\n参考上面创建操作，用PUT方法\n```\ncurl -X PUT 'localhost:9200/accounts/person/1' -d '\n{\n  \"user\": \"张三1\",\n  \"title\": \"工程师1\",\n  \"desc\": \"数据库管理1\"\n}'\n```\n\n## 数据查询\n\n### 返回所有记录\n```\ncurl 'localhost:9200/accounts/person/_search'\n```\n\n### 全文搜索\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\" : { \"match\" : { \"desc\" : \"数据库\" }}\n}' \n```\n\n### 逻辑运算\n如果有多个搜索关键字， Elastic 认为它们是or关系\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\" : { \"match\" : { \"desc\" : \"软件 系统\" }}\n}'\n```\n\n如果要执行多个关键词的and搜索，必须使用布尔查询\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"desc\": \"软件\" } },\n        { \"match\": { \"desc\": \"系统\" } }\n      ]\n    }\n  }\n}'\n```\n\n搞定~\n\n参考：http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-04-09-elasticsearch.md","raw":"---\nlayout: post\ntitle:  \"玩转ElasticSearch全文搜索\"\ndate:   2019-04-09 12:19:42\nauthor: \"Heropoo\"\ncategories: \n    - 全文搜索\ntags:\n    - 全文搜索\n    - ElasticSearch\n    - PHP\n    - Docker\nexcerpt: \"玩转ElasticSearch全文搜索\"\n---\n玩转ElasticSearch全文搜索，做个笔记。\n\n## 运行ElasticSearch服务\n为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。\n\n我们使用官方的`elasticsearch:5.6.16-alpine`作为基础镜像，另外添加一个中文分词插件`elasticsearch-ik`\n\n我们的Dockerfile内容如下，很简单，只需两行哟：\n```\nFROM elasticsearch:5.6.16-alpine\nRUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip\n```\n\n构建镜像：\n```\ndocker build -t heropoo/elasticsearch-ik .\n```\n\n运行容器：\n```\ndocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" heropoo/elasticsearch-ik\n```\n\n因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 http://localhost:9200 看看服务是否正常。\n\n## 基本概念\nElastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。\n\n### Index\nElastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。\n\n查看当前节点的所有 Index\n```\ncurl -X GET 'http://localhost:9200/_cat/indices?v'\n```\n\n### Document\nIndex 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。\n例如：\n```\n{\n  \"user\": \"张三\",\n  \"title\": \"工程师\",\n  \"desc\": \"数据库管理\"\n}\n```\n同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。\n\n### Type\n不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。\n\n下面的命令可以列出每个 Index 所包含的 Type\n```\ncurl 'localhost:9200/_mapping?pretty=true'\n```\npretty参数是优化显示结果易于查看\n\n## Index操作\n### 查看当前节点的所有 Index\n```\ncurl -X GET 'http://localhost:9200/_cat/indices?v'\n```\n\n### 新建Index\n```\ncurl -X PUT 'http://localhost:9200/weather'\n```\n\n### 删除Index\n```\ncurl -X DELETE 'http://localhost:9200/weather'\n```\n\n### 新建一个 Index，指定需要分词的字段\n```\ncurl -X PUT 'localhost:9200/accounts' -d '\n{\n  \"mappings\": {\n    \"person\": {\n      \"properties\": {\n        \"user\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        },\n        \"title\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        },\n        \"desc\": {\n          \"type\": \"text\",\n          \"analyzer\": \"ik_max_word\",\n          \"search_analyzer\": \"ik_max_word\"\n        }\n      }\n    }\n  }\n}'\n```\n上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。\n\n## 数据操作\n### 新增记录\n向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录\n```\ncurl -X PUT 'localhost:9200/accounts/person/1' -d '\n{\n  \"user\": \"张三\",\n  \"title\": \"工程师\",\n  \"desc\": \"数据库管理\"\n}'\n```\n\n新增记录的时候，也可以不指定 Id，这时要改成 POST 请求\n```\ncurl -X POST 'localhost:9200/accounts/person' -d '\n{\n  \"user\": \"李四\",\n  \"title\": \"工程师\",\n  \"desc\": \"软件工程师\"\n}'\n```\n\n其实PUT就是存在时修改，不存在时创建。\n\n### 查看记录\n向/Index/Type/Id发出 GET 请求，就可以查看这条记录\n```\ncurl 'localhost:9200/accounts/person/1?pretty=true'\n```\n\n### 删除记录\n```\ncurl -X DELETE 'localhost:9200/accounts/person/1'\n```\n\n### 更新记录\n参考上面创建操作，用PUT方法\n```\ncurl -X PUT 'localhost:9200/accounts/person/1' -d '\n{\n  \"user\": \"张三1\",\n  \"title\": \"工程师1\",\n  \"desc\": \"数据库管理1\"\n}'\n```\n\n## 数据查询\n\n### 返回所有记录\n```\ncurl 'localhost:9200/accounts/person/_search'\n```\n\n### 全文搜索\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\" : { \"match\" : { \"desc\" : \"数据库\" }}\n}' \n```\n\n### 逻辑运算\n如果有多个搜索关键字， Elastic 认为它们是or关系\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\" : { \"match\" : { \"desc\" : \"软件 系统\" }}\n}'\n```\n\n如果要执行多个关键词的and搜索，必须使用布尔查询\n```\ncurl 'localhost:9200/accounts/person/_search'  -d '\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"desc\": \"软件\" } },\n        { \"match\": { \"desc\": \"系统\" } }\n      ]\n    }\n  }\n}'\n```\n\n搞定~\n\n参考：http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-04-09-elasticsearch","published":1,"updated":"2019-11-01T02:16:34.416Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsct002gsm4w0jsqcqqc","content":"<p>玩转ElasticSearch全文搜索，做个笔记。</p>\n<h2 id=\"运行ElasticSearch服务\"><a href=\"#运行ElasticSearch服务\" class=\"headerlink\" title=\"运行ElasticSearch服务\"></a>运行ElasticSearch服务</h2><p>为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。</p>\n<p>我们使用官方的<code>elasticsearch:5.6.16-alpine</code>作为基础镜像，另外添加一个中文分词插件<code>elasticsearch-ik</code></p>\n<p>我们的Dockerfile内容如下，很简单，只需两行哟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM elasticsearch:5.6.16-alpine</span><br><span class=\"line\">RUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip</span><br></pre></td></tr></table></figure>\n\n<p>构建镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t heropoo/elasticsearch-ik .</span><br></pre></td></tr></table></figure>\n\n<p>运行容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; heropoo/elasticsearch-ik</span><br></pre></td></tr></table></figure>\n\n<p>因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"noopener\">http://localhost:9200</a> 看看服务是否正常。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p>\n<h3 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。</p>\n<p>查看当前节点的所有 Index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。</p>\n<h3 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h3><p>不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p>\n<p>下面的命令可以列出每个 Index 所包含的 Type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/_mapping?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<p>pretty参数是优化显示结果易于查看</p>\n<h2 id=\"Index操作\"><a href=\"#Index操作\" class=\"headerlink\" title=\"Index操作\"></a>Index操作</h2><h3 id=\"查看当前节点的所有-Index\"><a href=\"#查看当前节点的所有-Index\" class=\"headerlink\" title=\"查看当前节点的所有 Index\"></a>查看当前节点的所有 Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建Index\"><a href=\"#新建Index\" class=\"headerlink\" title=\"新建Index\"></a>新建Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Index\"><a href=\"#删除Index\" class=\"headerlink\" title=\"删除Index\"></a>删除Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建一个-Index，指定需要分词的字段\"><a href=\"#新建一个-Index，指定需要分词的字段\" class=\"headerlink\" title=\"新建一个 Index，指定需要分词的字段\"></a>新建一个 Index，指定需要分词的字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;mappings&quot;: &#123;</span><br><span class=\"line\">    &quot;person&quot;: &#123;</span><br><span class=\"line\">      &quot;properties&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;title&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;desc&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p>\n<h2 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h2><h3 id=\"新增记录\"><a href=\"#新增记录\" class=\"headerlink\" title=\"新增记录\"></a>新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST &apos;localhost:9200/accounts/person&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;软件工程师&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>其实PUT就是存在时修改，不存在时创建。</p>\n<h3 id=\"查看记录\"><a href=\"#查看记录\" class=\"headerlink\" title=\"查看记录\"></a>查看记录</h3><p>向/Index/Type/Id发出 GET 请求，就可以查看这条记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/1?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除记录\"><a href=\"#删除记录\" class=\"headerlink\" title=\"删除记录\"></a>删除记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE &apos;localhost:9200/accounts/person/1&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h3><p>参考上面创建操作，用PUT方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三1&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师1&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理1&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h2><h3 id=\"返回所有记录\"><a href=\"#返回所有记录\" class=\"headerlink\" title=\"返回所有记录\"></a>返回所有记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全文搜索\"><a href=\"#全文搜索\" class=\"headerlink\" title=\"全文搜索\"></a>全文搜索</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;数据库&quot; &#125;&#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是or关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>如果要执行多个关键词的and搜索，必须使用布尔查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class=\"line\">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>搞定~</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>\n","site":{"data":{}},"more":"<p>玩转ElasticSearch全文搜索，做个笔记。</p>\n<h2 id=\"运行ElasticSearch服务\"><a href=\"#运行ElasticSearch服务\" class=\"headerlink\" title=\"运行ElasticSearch服务\"></a>运行ElasticSearch服务</h2><p>为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。</p>\n<p>我们使用官方的<code>elasticsearch:5.6.16-alpine</code>作为基础镜像，另外添加一个中文分词插件<code>elasticsearch-ik</code></p>\n<p>我们的Dockerfile内容如下，很简单，只需两行哟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM elasticsearch:5.6.16-alpine</span><br><span class=\"line\">RUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip</span><br></pre></td></tr></table></figure>\n\n<p>构建镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t heropoo/elasticsearch-ik .</span><br></pre></td></tr></table></figure>\n\n<p>运行容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; heropoo/elasticsearch-ik</span><br></pre></td></tr></table></figure>\n\n<p>因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"noopener\">http://localhost:9200</a> 看看服务是否正常。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p>\n<h3 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。</p>\n<p>查看当前节点的所有 Index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。</p>\n<h3 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h3><p>不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p>\n<p>下面的命令可以列出每个 Index 所包含的 Type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/_mapping?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<p>pretty参数是优化显示结果易于查看</p>\n<h2 id=\"Index操作\"><a href=\"#Index操作\" class=\"headerlink\" title=\"Index操作\"></a>Index操作</h2><h3 id=\"查看当前节点的所有-Index\"><a href=\"#查看当前节点的所有-Index\" class=\"headerlink\" title=\"查看当前节点的所有 Index\"></a>查看当前节点的所有 Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建Index\"><a href=\"#新建Index\" class=\"headerlink\" title=\"新建Index\"></a>新建Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Index\"><a href=\"#删除Index\" class=\"headerlink\" title=\"删除Index\"></a>删除Index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建一个-Index，指定需要分词的字段\"><a href=\"#新建一个-Index，指定需要分词的字段\" class=\"headerlink\" title=\"新建一个 Index，指定需要分词的字段\"></a>新建一个 Index，指定需要分词的字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;mappings&quot;: &#123;</span><br><span class=\"line\">    &quot;person&quot;: &#123;</span><br><span class=\"line\">      &quot;properties&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;title&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;desc&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class=\"line\">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p>\n<h2 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h2><h3 id=\"新增记录\"><a href=\"#新增记录\" class=\"headerlink\" title=\"新增记录\"></a>新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST &apos;localhost:9200/accounts/person&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;软件工程师&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>其实PUT就是存在时修改，不存在时创建。</p>\n<h3 id=\"查看记录\"><a href=\"#查看记录\" class=\"headerlink\" title=\"查看记录\"></a>查看记录</h3><p>向/Index/Type/Id发出 GET 请求，就可以查看这条记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/1?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除记录\"><a href=\"#删除记录\" class=\"headerlink\" title=\"删除记录\"></a>删除记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE &apos;localhost:9200/accounts/person/1&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h3><p>参考上面创建操作，用PUT方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &quot;张三1&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;工程师1&quot;,</span><br><span class=\"line\">  &quot;desc&quot;: &quot;数据库管理1&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h2><h3 id=\"返回所有记录\"><a href=\"#返回所有记录\" class=\"headerlink\" title=\"返回所有记录\"></a>返回所有记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全文搜索\"><a href=\"#全文搜索\" class=\"headerlink\" title=\"全文搜索\"></a>全文搜索</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;数据库&quot; &#125;&#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是or关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>如果要执行多个关键词的and搜索，必须使用布尔查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class=\"line\">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>搞定~</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>\n"},{"layout":"post","title":"常用nginx web配置","date":"2019-05-22T10:35:30.000Z","author":"Heropoo","excerpt":"常用nginx对于web项目配置整理","_content":"常用nginx对于web项目配置整理，做个笔记。\n\n## php web项目配置\n```\nserver {\n  listen 80;\n  listen [::]:80;\n\n  # 设置上传最大为5MB\n  client_max_body_size 5m;\n\n  root /srv/www/wechat/public;\n\n  index index.html index.php;\n\n  server_name example.com;\n\n  location / {\n    try_files $uri $uri/ =404;\n  }\n\n  # 支持php\n  location ~ \\.php$ {\n    # Check that the PHP script exists before passing it\n    try_files $fastcgi_script_name =404;\n\n    fastcgi_index index.php;\n    include fastcgi.conf;\n\n    # With php-fpm (or other unix sockets):\n    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n    #  # With php-cgi (or other tcp sockets):\n    #  fastcgi_pass 127.0.0.1:9000;\n  }\n\n  # deny access to .htaccess files, if Apache's document root\n  # concurs with nginx's one\n  #\n  location ~ /\\.ht {\n    deny all;\n  }\n}\n```\n\n## php web项目配置 支持laravel、symfony、Yii2单入口\n```\n...\n  location / {\n    # First attempt to serve request as file, then\n    # as directory, then fall back to displaying a 404.\n    #try_files $uri $uri/ =404;  # 注释上面这句，使用下面这句\n    try_files $uri $uri/ /index.php?$query_string;\n  }\n...\n```\n\n## php web项目配置 支持ThinkPHP\n```\n...\n  location ~ \\.php$ {\n    # regex to split $uri to $fastcgi_script_name and $fastcgi_path\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\n    # Check that the PHP script exists before passing it\n    try_files $fastcgi_script_name =404;\n\n    # Bypass the fact that try_files resets $fastcgi_path_info\n    # see: http://trac.nginx.org/nginx/ticket/321\n    set $path_info $fastcgi_path_info;\n    fastcgi_param PATH_INFO $path_info;   # ThinkPHP依赖PATH_INFO这个环境变量\n\n    fastcgi_index index.php;\n    include fastcgi.conf;\n\n    # With php-fpm (or other unix sockets):\n    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n    #  # With php-cgi (or other tcp sockets):\n    #  fastcgi_pass 127.0.0.1:9000;\n  }\n...\n```\n\n## php web项目配置 禁止访问上传目录下的php文件\n```\n...\n  # 这个块location要放在 location ~ \\.php$ 之前\n  location ~ ^/uploads/.*\\.php$ {     # 所有/uploads文件目录下的.php文件都被禁止访问\n    #deny all;  # 返回403\n    return 404; #返回404\n  }\n...\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-05-22-nginx-web-conf.md","raw":"---\nlayout: post\ntitle:  \"常用nginx web配置\"\ndate:   2019-05-22 18:35:30\nauthor: \"Heropoo\"\ncategories: \n    - nginx\ntags:\n    - nginx\nexcerpt: \"常用nginx对于web项目配置整理\"\n---\n常用nginx对于web项目配置整理，做个笔记。\n\n## php web项目配置\n```\nserver {\n  listen 80;\n  listen [::]:80;\n\n  # 设置上传最大为5MB\n  client_max_body_size 5m;\n\n  root /srv/www/wechat/public;\n\n  index index.html index.php;\n\n  server_name example.com;\n\n  location / {\n    try_files $uri $uri/ =404;\n  }\n\n  # 支持php\n  location ~ \\.php$ {\n    # Check that the PHP script exists before passing it\n    try_files $fastcgi_script_name =404;\n\n    fastcgi_index index.php;\n    include fastcgi.conf;\n\n    # With php-fpm (or other unix sockets):\n    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n    #  # With php-cgi (or other tcp sockets):\n    #  fastcgi_pass 127.0.0.1:9000;\n  }\n\n  # deny access to .htaccess files, if Apache's document root\n  # concurs with nginx's one\n  #\n  location ~ /\\.ht {\n    deny all;\n  }\n}\n```\n\n## php web项目配置 支持laravel、symfony、Yii2单入口\n```\n...\n  location / {\n    # First attempt to serve request as file, then\n    # as directory, then fall back to displaying a 404.\n    #try_files $uri $uri/ =404;  # 注释上面这句，使用下面这句\n    try_files $uri $uri/ /index.php?$query_string;\n  }\n...\n```\n\n## php web项目配置 支持ThinkPHP\n```\n...\n  location ~ \\.php$ {\n    # regex to split $uri to $fastcgi_script_name and $fastcgi_path\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\n    # Check that the PHP script exists before passing it\n    try_files $fastcgi_script_name =404;\n\n    # Bypass the fact that try_files resets $fastcgi_path_info\n    # see: http://trac.nginx.org/nginx/ticket/321\n    set $path_info $fastcgi_path_info;\n    fastcgi_param PATH_INFO $path_info;   # ThinkPHP依赖PATH_INFO这个环境变量\n\n    fastcgi_index index.php;\n    include fastcgi.conf;\n\n    # With php-fpm (or other unix sockets):\n    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n    #  # With php-cgi (or other tcp sockets):\n    #  fastcgi_pass 127.0.0.1:9000;\n  }\n...\n```\n\n## php web项目配置 禁止访问上传目录下的php文件\n```\n...\n  # 这个块location要放在 location ~ \\.php$ 之前\n  location ~ ^/uploads/.*\\.php$ {     # 所有/uploads文件目录下的.php文件都被禁止访问\n    #deny all;  # 返回403\n    return 404; #返回404\n  }\n...\n```\n\n\n\n\n\n\n\n\n\n","slug":"2019-05-22-nginx-web-conf","published":1,"updated":"2019-11-01T02:16:34.416Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscu002jsm4w3b5dc0vq","content":"<p>常用nginx对于web项目配置整理，做个笔记。</p>\n<h2 id=\"php-web项目配置\"><a href=\"#php-web项目配置\" class=\"headerlink\" title=\"php web项目配置\"></a>php web项目配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设置上传最大为5MB</span><br><span class=\"line\">  client_max_body_size 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">  root /srv/www/wechat/public;</span><br><span class=\"line\"></span><br><span class=\"line\">  index index.html index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">  server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    try_files $uri $uri/ =404;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 支持php</span><br><span class=\"line\">  location ~ \\.php$ &#123;</span><br><span class=\"line\">    # Check that the PHP script exists before passing it</span><br><span class=\"line\">    try_files $fastcgi_script_name =404;</span><br><span class=\"line\"></span><br><span class=\"line\">    fastcgi_index index.php;</span><br><span class=\"line\">    include fastcgi.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    # With php-fpm (or other unix sockets):</span><br><span class=\"line\">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">    #  # With php-cgi (or other tcp sockets):</span><br><span class=\"line\">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">  # concurs with nginx&apos;s one</span><br><span class=\"line\">  #</span><br><span class=\"line\">  location ~ /\\.ht &#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-支持laravel、symfony、Yii2单入口\"><a href=\"#php-web项目配置-支持laravel、symfony、Yii2单入口\" class=\"headerlink\" title=\"php web项目配置 支持laravel、symfony、Yii2单入口\"></a>php web项目配置 支持laravel、symfony、Yii2单入口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    # First attempt to serve request as file, then</span><br><span class=\"line\">    # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">    #try_files $uri $uri/ =404;  # 注释上面这句，使用下面这句</span><br><span class=\"line\">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-支持ThinkPHP\"><a href=\"#php-web项目配置-支持ThinkPHP\" class=\"headerlink\" title=\"php web项目配置 支持ThinkPHP\"></a>php web项目配置 支持ThinkPHP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  location ~ \\.php$ &#123;</span><br><span class=\"line\">    # regex to split $uri to $fastcgi_script_name and $fastcgi_path</span><br><span class=\"line\">    fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Check that the PHP script exists before passing it</span><br><span class=\"line\">    try_files $fastcgi_script_name =404;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Bypass the fact that try_files resets $fastcgi_path_info</span><br><span class=\"line\">    # see: http://trac.nginx.org/nginx/ticket/321</span><br><span class=\"line\">    set $path_info $fastcgi_path_info;</span><br><span class=\"line\">    fastcgi_param PATH_INFO $path_info;   # ThinkPHP依赖PATH_INFO这个环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">    fastcgi_index index.php;</span><br><span class=\"line\">    include fastcgi.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    # With php-fpm (or other unix sockets):</span><br><span class=\"line\">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">    #  # With php-cgi (or other tcp sockets):</span><br><span class=\"line\">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-禁止访问上传目录下的php文件\"><a href=\"#php-web项目配置-禁止访问上传目录下的php文件\" class=\"headerlink\" title=\"php web项目配置 禁止访问上传目录下的php文件\"></a>php web项目配置 禁止访问上传目录下的php文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  # 这个块location要放在 location ~ \\.php$ 之前</span><br><span class=\"line\">  location ~ ^/uploads/.*\\.php$ &#123;     # 所有/uploads文件目录下的.php文件都被禁止访问</span><br><span class=\"line\">    #deny all;  # 返回403</span><br><span class=\"line\">    return 404; #返回404</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"more":"<p>常用nginx对于web项目配置整理，做个笔记。</p>\n<h2 id=\"php-web项目配置\"><a href=\"#php-web项目配置\" class=\"headerlink\" title=\"php web项目配置\"></a>php web项目配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设置上传最大为5MB</span><br><span class=\"line\">  client_max_body_size 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">  root /srv/www/wechat/public;</span><br><span class=\"line\"></span><br><span class=\"line\">  index index.html index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">  server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    try_files $uri $uri/ =404;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 支持php</span><br><span class=\"line\">  location ~ \\.php$ &#123;</span><br><span class=\"line\">    # Check that the PHP script exists before passing it</span><br><span class=\"line\">    try_files $fastcgi_script_name =404;</span><br><span class=\"line\"></span><br><span class=\"line\">    fastcgi_index index.php;</span><br><span class=\"line\">    include fastcgi.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    # With php-fpm (or other unix sockets):</span><br><span class=\"line\">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">    #  # With php-cgi (or other tcp sockets):</span><br><span class=\"line\">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">  # concurs with nginx&apos;s one</span><br><span class=\"line\">  #</span><br><span class=\"line\">  location ~ /\\.ht &#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-支持laravel、symfony、Yii2单入口\"><a href=\"#php-web项目配置-支持laravel、symfony、Yii2单入口\" class=\"headerlink\" title=\"php web项目配置 支持laravel、symfony、Yii2单入口\"></a>php web项目配置 支持laravel、symfony、Yii2单入口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    # First attempt to serve request as file, then</span><br><span class=\"line\">    # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">    #try_files $uri $uri/ =404;  # 注释上面这句，使用下面这句</span><br><span class=\"line\">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-支持ThinkPHP\"><a href=\"#php-web项目配置-支持ThinkPHP\" class=\"headerlink\" title=\"php web项目配置 支持ThinkPHP\"></a>php web项目配置 支持ThinkPHP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  location ~ \\.php$ &#123;</span><br><span class=\"line\">    # regex to split $uri to $fastcgi_script_name and $fastcgi_path</span><br><span class=\"line\">    fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Check that the PHP script exists before passing it</span><br><span class=\"line\">    try_files $fastcgi_script_name =404;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Bypass the fact that try_files resets $fastcgi_path_info</span><br><span class=\"line\">    # see: http://trac.nginx.org/nginx/ticket/321</span><br><span class=\"line\">    set $path_info $fastcgi_path_info;</span><br><span class=\"line\">    fastcgi_param PATH_INFO $path_info;   # ThinkPHP依赖PATH_INFO这个环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">    fastcgi_index index.php;</span><br><span class=\"line\">    include fastcgi.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    # With php-fpm (or other unix sockets):</span><br><span class=\"line\">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">    #  # With php-cgi (or other tcp sockets):</span><br><span class=\"line\">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-web项目配置-禁止访问上传目录下的php文件\"><a href=\"#php-web项目配置-禁止访问上传目录下的php文件\" class=\"headerlink\" title=\"php web项目配置 禁止访问上传目录下的php文件\"></a>php web项目配置 禁止访问上传目录下的php文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  # 这个块location要放在 location ~ \\.php$ 之前</span><br><span class=\"line\">  location ~ ^/uploads/.*\\.php$ &#123;     # 所有/uploads文件目录下的.php文件都被禁止访问</span><br><span class=\"line\">    #deny all;  # 返回403</span><br><span class=\"line\">    return 404; #返回404</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"layout":"post","title":"关于大文件上传","date":"2019-05-23T02:06:28.000Z","author":"Heropoo","excerpt":"最近做视频上传，我们使用切片上传大文件","_content":"最近在做视频上传，我们使用切片上传大文件，做个笔记。\n\n## 思路\n* 使用js读取form表单中选择的file，计算文件md5值，并上传md5值到服务端，检查文件是否已上传过（类似秒传功能）\n* 若文件未上传过，按照其大小切成1MB大小的块，小于1MB的不用切\n* 用ajax异步提交切好的块上传至服务端（一个块一个请求，不阻塞，多线程）\n* 当上传完成所有切块，发起一个合并文件的请求，服务端进行前面上传的文件块的合并，合并完成即上传完成。\n\n## 实现\njs计算文件md5使用[spark-md5.js](https://www.npmjs.com/package/spark-md5),据说这个库使用的是世界上最快的md5算法。\n\njs对文件切片并使用ajax上传切片\n```javascript\n//...\nlet size = file.size; //获取文件大小\nconst shardSize = 1024 * 1024; // 块大小1MB\nlet shardCount = Math.ceil(size/shardSize); //可切成的块数\n\nfor(let i = 0; i < shardCount; i++){\n  let start = i * shardSize,\n      end = Math.min(size, start + shardSize);\n  let form = new FormData();\n  form.append('file', file.slice(start, end));  //用slice方法切片\n  form.append('size', end - start);\n  form.append('name', name);\n  form.append('total', shardCount);\n  form.append('md5', file_md5); //文件md5值\n  form.append('index', i);  //第几块\n\n  $.ajax({\n    url: 'upload.php?type=shard',\n    type: \"POST\",\n    data: form,\n    // async: false,     //是否异步上传，默认true\n    processData: false, //很重要，告诉jquery不要对form进行处理\n    contentType: false, //很重要，指定为false才能形成正确的Content-Type\n    success: function (res) {\n      // 成功回调\n    }\n  }\n}\n```\n\nphp端保存切片\n```php\n$path = __DIR__ . '/uploads';\n$file = $_FILES['file'];\n$total = $_POST['total'];\n$index = $_POST['index'];\n$size = $_POST['size'];\n$dst_file = $path . '/' . $name . '-' . $total . ':' . $index;  // 切片文件存储的文件名 \nif ($file[\"error\"] > 0) {\n    echo json_encode(['code'=>400, 'msg'=>$file[\"error\"]]);die;\n} else {\n    $res = move_uploaded_file($file['tmp_name'], $dst_file);\n    if ($res) {\n        file_put_contents($dst_file . '.info', $size);  // 切片上传成功，写一个保存其大小的文件，后续合并是校验文件用的到\n        echo json_encode(['code'=>200, 'msg'=>'shard ok']);die;\n    } else {\n        echo json_encode(['code'=>400, 'msg'=>'shard move_uploaded_file error']);die;\n    }\n}\n```\n\nphp端合并\n```php\n//...\nfunction mergeFile($name, $total, &$msg)\n{\n    // 校验切片文件是否都上传完成，是否完整\n    for ($i = 0; $i < $total; $i++) { \n        if (!file_exists($name . '-' . $total . ':' . $i . '.info') || !file_exists($name . '-' . $total . ':' . $i)) {\n            $msg = \"shard error $i\";\n            return false;\n        } else if (filesize($name . '-' . $total . ':' . $i) != file_get_contents($name . '-' . $total . ':' . $i . '.info')) {\n            $msg = \"shard size error $i\";\n            return false;\n        }\n    }\n    @unlink($name);\n    if (file_exists($name . '.lock')) {   //加锁 防止有其他进程写文件，造成文件损坏\n        $msg = 'on lock';\n        return false;\n    }\n    touch($name . '.lock');\n    $file = fopen($name, 'a+');\n    for ($i = 0; $i < $total; $i++) {   //按切片顺序写入文件\n        $shardFile = fopen($name . '-' . $total . ':' . $i, 'r');\n        $shardData = fread($shardFile, filesize($name . '-' . $total . ':' . $i));\n        fwrite($file, $shardData);\n        fclose($shardFile);\n        unlink($name . '-' . $total . ':' . $i); \n        unlink($name . '-' . $total . ':' . $i . '.info');\n    }\n    fclose($file);\n    unlink($name . '.lock');\n    return true;\n}\n```\n\n我也写好了一个demo，[传送门](https://github.com/heropoo/just-code/tree/master/upload-large-file)\n\n下面是这个demo的效果图：\n\n![pic-0](/assets/images/WX20190523-103939.png)\n![pic-1](/assets/images/WX20190523-104043.png)\n\n这个demo有些方面还不够完善，后续持续完善吧～","source":"_posts/2019-05-23-upload-large-file.md","raw":"---\nlayout: post\ntitle:  \"关于大文件上传\"\ndate:   2019-05-23 10:06:28\nauthor: \"Heropoo\"\ncategories: \n    - JavaScript\n    - PHP\ntags:\n    - JavaScript\n    - HTML5\n    - AJAX \n    - PHP\nexcerpt: \"最近做视频上传，我们使用切片上传大文件\"\n---\n最近在做视频上传，我们使用切片上传大文件，做个笔记。\n\n## 思路\n* 使用js读取form表单中选择的file，计算文件md5值，并上传md5值到服务端，检查文件是否已上传过（类似秒传功能）\n* 若文件未上传过，按照其大小切成1MB大小的块，小于1MB的不用切\n* 用ajax异步提交切好的块上传至服务端（一个块一个请求，不阻塞，多线程）\n* 当上传完成所有切块，发起一个合并文件的请求，服务端进行前面上传的文件块的合并，合并完成即上传完成。\n\n## 实现\njs计算文件md5使用[spark-md5.js](https://www.npmjs.com/package/spark-md5),据说这个库使用的是世界上最快的md5算法。\n\njs对文件切片并使用ajax上传切片\n```javascript\n//...\nlet size = file.size; //获取文件大小\nconst shardSize = 1024 * 1024; // 块大小1MB\nlet shardCount = Math.ceil(size/shardSize); //可切成的块数\n\nfor(let i = 0; i < shardCount; i++){\n  let start = i * shardSize,\n      end = Math.min(size, start + shardSize);\n  let form = new FormData();\n  form.append('file', file.slice(start, end));  //用slice方法切片\n  form.append('size', end - start);\n  form.append('name', name);\n  form.append('total', shardCount);\n  form.append('md5', file_md5); //文件md5值\n  form.append('index', i);  //第几块\n\n  $.ajax({\n    url: 'upload.php?type=shard',\n    type: \"POST\",\n    data: form,\n    // async: false,     //是否异步上传，默认true\n    processData: false, //很重要，告诉jquery不要对form进行处理\n    contentType: false, //很重要，指定为false才能形成正确的Content-Type\n    success: function (res) {\n      // 成功回调\n    }\n  }\n}\n```\n\nphp端保存切片\n```php\n$path = __DIR__ . '/uploads';\n$file = $_FILES['file'];\n$total = $_POST['total'];\n$index = $_POST['index'];\n$size = $_POST['size'];\n$dst_file = $path . '/' . $name . '-' . $total . ':' . $index;  // 切片文件存储的文件名 \nif ($file[\"error\"] > 0) {\n    echo json_encode(['code'=>400, 'msg'=>$file[\"error\"]]);die;\n} else {\n    $res = move_uploaded_file($file['tmp_name'], $dst_file);\n    if ($res) {\n        file_put_contents($dst_file . '.info', $size);  // 切片上传成功，写一个保存其大小的文件，后续合并是校验文件用的到\n        echo json_encode(['code'=>200, 'msg'=>'shard ok']);die;\n    } else {\n        echo json_encode(['code'=>400, 'msg'=>'shard move_uploaded_file error']);die;\n    }\n}\n```\n\nphp端合并\n```php\n//...\nfunction mergeFile($name, $total, &$msg)\n{\n    // 校验切片文件是否都上传完成，是否完整\n    for ($i = 0; $i < $total; $i++) { \n        if (!file_exists($name . '-' . $total . ':' . $i . '.info') || !file_exists($name . '-' . $total . ':' . $i)) {\n            $msg = \"shard error $i\";\n            return false;\n        } else if (filesize($name . '-' . $total . ':' . $i) != file_get_contents($name . '-' . $total . ':' . $i . '.info')) {\n            $msg = \"shard size error $i\";\n            return false;\n        }\n    }\n    @unlink($name);\n    if (file_exists($name . '.lock')) {   //加锁 防止有其他进程写文件，造成文件损坏\n        $msg = 'on lock';\n        return false;\n    }\n    touch($name . '.lock');\n    $file = fopen($name, 'a+');\n    for ($i = 0; $i < $total; $i++) {   //按切片顺序写入文件\n        $shardFile = fopen($name . '-' . $total . ':' . $i, 'r');\n        $shardData = fread($shardFile, filesize($name . '-' . $total . ':' . $i));\n        fwrite($file, $shardData);\n        fclose($shardFile);\n        unlink($name . '-' . $total . ':' . $i); \n        unlink($name . '-' . $total . ':' . $i . '.info');\n    }\n    fclose($file);\n    unlink($name . '.lock');\n    return true;\n}\n```\n\n我也写好了一个demo，[传送门](https://github.com/heropoo/just-code/tree/master/upload-large-file)\n\n下面是这个demo的效果图：\n\n![pic-0](/assets/images/WX20190523-103939.png)\n![pic-1](/assets/images/WX20190523-104043.png)\n\n这个demo有些方面还不够完善，后续持续完善吧～","slug":"2019-05-23-upload-large-file","published":1,"updated":"2019-11-01T02:16:34.417Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscv002msm4we07p0cj3","content":"<p>最近在做视频上传，我们使用切片上传大文件，做个笔记。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>使用js读取form表单中选择的file，计算文件md5值，并上传md5值到服务端，检查文件是否已上传过（类似秒传功能）</li>\n<li>若文件未上传过，按照其大小切成1MB大小的块，小于1MB的不用切</li>\n<li>用ajax异步提交切好的块上传至服务端（一个块一个请求，不阻塞，多线程）</li>\n<li>当上传完成所有切块，发起一个合并文件的请求，服务端进行前面上传的文件块的合并，合并完成即上传完成。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js计算文件md5使用<a href=\"https://www.npmjs.com/package/spark-md5\" target=\"_blank\" rel=\"noopener\">spark-md5.js</a>,据说这个库使用的是世界上最快的md5算法。</p>\n<p>js对文件切片并使用ajax上传切片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = file.size; <span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shardSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 块大小1MB</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> shardCount = <span class=\"built_in\">Math</span>.ceil(size/shardSize); <span class=\"comment\">//可切成的块数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; shardCount; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = i * shardSize,</span><br><span class=\"line\">      end = <span class=\"built_in\">Math</span>.min(size, start + shardSize);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">  form.append(<span class=\"string\">'file'</span>, file.slice(start, end));  <span class=\"comment\">//用slice方法切片</span></span><br><span class=\"line\">  form.append(<span class=\"string\">'size'</span>, end - start);</span><br><span class=\"line\">  form.append(<span class=\"string\">'name'</span>, name);</span><br><span class=\"line\">  form.append(<span class=\"string\">'total'</span>, shardCount);</span><br><span class=\"line\">  form.append(<span class=\"string\">'md5'</span>, file_md5); <span class=\"comment\">//文件md5值</span></span><br><span class=\"line\">  form.append(<span class=\"string\">'index'</span>, i);  <span class=\"comment\">//第几块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'upload.php?type=shard'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    data: form,</span><br><span class=\"line\">    <span class=\"comment\">// async: false,     //是否异步上传，默认true</span></span><br><span class=\"line\">    processData: <span class=\"literal\">false</span>, <span class=\"comment\">//很重要，告诉jquery不要对form进行处理</span></span><br><span class=\"line\">    contentType: <span class=\"literal\">false</span>, <span class=\"comment\">//很重要，指定为false才能形成正确的Content-Type</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 成功回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php端保存切片</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$path = <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/uploads'</span>;</span><br><span class=\"line\">$file = $_FILES[<span class=\"string\">'file'</span>];</span><br><span class=\"line\">$total = $_POST[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">$index = $_POST[<span class=\"string\">'index'</span>];</span><br><span class=\"line\">$size = $_POST[<span class=\"string\">'size'</span>];</span><br><span class=\"line\">$dst_file = $path . <span class=\"string\">'/'</span> . $name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $index;  <span class=\"comment\">// 切片文件存储的文件名 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($file[<span class=\"string\">\"error\"</span>] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">400</span>, <span class=\"string\">'msg'</span>=&gt;$file[<span class=\"string\">\"error\"</span>]]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $res = move_uploaded_file($file[<span class=\"string\">'tmp_name'</span>], $dst_file);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">        file_put_contents($dst_file . <span class=\"string\">'.info'</span>, $size);  <span class=\"comment\">// 切片上传成功，写一个保存其大小的文件，后续合并是校验文件用的到</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">200</span>, <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'shard ok'</span>]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">400</span>, <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'shard move_uploaded_file error'</span>]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php端合并</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeFile</span><span class=\"params\">($name, $total, &amp;$msg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 校验切片文件是否都上传完成，是否完整</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file_exists($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>) || !file_exists($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i)) &#123;</span><br><span class=\"line\">            $msg = <span class=\"string\">\"shard error $i\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (filesize($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i) != file_get_contents($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>)) &#123;</span><br><span class=\"line\">            $msg = <span class=\"string\">\"shard size error $i\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @unlink($name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($name . <span class=\"string\">'.lock'</span>)) &#123;   <span class=\"comment\">//加锁 防止有其他进程写文件，造成文件损坏</span></span><br><span class=\"line\">        $msg = <span class=\"string\">'on lock'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    touch($name . <span class=\"string\">'.lock'</span>);</span><br><span class=\"line\">    $file = fopen($name, <span class=\"string\">'a+'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;   <span class=\"comment\">//按切片顺序写入文件</span></span><br><span class=\"line\">        $shardFile = fopen($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i, <span class=\"string\">'r'</span>);</span><br><span class=\"line\">        $shardData = fread($shardFile, filesize($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i));</span><br><span class=\"line\">        fwrite($file, $shardData);</span><br><span class=\"line\">        fclose($shardFile);</span><br><span class=\"line\">        unlink($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i); </span><br><span class=\"line\">        unlink($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose($file);</span><br><span class=\"line\">    unlink($name . <span class=\"string\">'.lock'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也写好了一个demo，<a href=\"https://github.com/heropoo/just-code/tree/master/upload-large-file\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>下面是这个demo的效果图：</p>\n<p><img src=\"/assets/images/WX20190523-103939.png\" alt=\"pic-0\"><br><img src=\"/assets/images/WX20190523-104043.png\" alt=\"pic-1\"></p>\n<p>这个demo有些方面还不够完善，后续持续完善吧～</p>\n","site":{"data":{}},"more":"<p>最近在做视频上传，我们使用切片上传大文件，做个笔记。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>使用js读取form表单中选择的file，计算文件md5值，并上传md5值到服务端，检查文件是否已上传过（类似秒传功能）</li>\n<li>若文件未上传过，按照其大小切成1MB大小的块，小于1MB的不用切</li>\n<li>用ajax异步提交切好的块上传至服务端（一个块一个请求，不阻塞，多线程）</li>\n<li>当上传完成所有切块，发起一个合并文件的请求，服务端进行前面上传的文件块的合并，合并完成即上传完成。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js计算文件md5使用<a href=\"https://www.npmjs.com/package/spark-md5\" target=\"_blank\" rel=\"noopener\">spark-md5.js</a>,据说这个库使用的是世界上最快的md5算法。</p>\n<p>js对文件切片并使用ajax上传切片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = file.size; <span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shardSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 块大小1MB</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> shardCount = <span class=\"built_in\">Math</span>.ceil(size/shardSize); <span class=\"comment\">//可切成的块数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; shardCount; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = i * shardSize,</span><br><span class=\"line\">      end = <span class=\"built_in\">Math</span>.min(size, start + shardSize);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">  form.append(<span class=\"string\">'file'</span>, file.slice(start, end));  <span class=\"comment\">//用slice方法切片</span></span><br><span class=\"line\">  form.append(<span class=\"string\">'size'</span>, end - start);</span><br><span class=\"line\">  form.append(<span class=\"string\">'name'</span>, name);</span><br><span class=\"line\">  form.append(<span class=\"string\">'total'</span>, shardCount);</span><br><span class=\"line\">  form.append(<span class=\"string\">'md5'</span>, file_md5); <span class=\"comment\">//文件md5值</span></span><br><span class=\"line\">  form.append(<span class=\"string\">'index'</span>, i);  <span class=\"comment\">//第几块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'upload.php?type=shard'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    data: form,</span><br><span class=\"line\">    <span class=\"comment\">// async: false,     //是否异步上传，默认true</span></span><br><span class=\"line\">    processData: <span class=\"literal\">false</span>, <span class=\"comment\">//很重要，告诉jquery不要对form进行处理</span></span><br><span class=\"line\">    contentType: <span class=\"literal\">false</span>, <span class=\"comment\">//很重要，指定为false才能形成正确的Content-Type</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 成功回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php端保存切片</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$path = <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/uploads'</span>;</span><br><span class=\"line\">$file = $_FILES[<span class=\"string\">'file'</span>];</span><br><span class=\"line\">$total = $_POST[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">$index = $_POST[<span class=\"string\">'index'</span>];</span><br><span class=\"line\">$size = $_POST[<span class=\"string\">'size'</span>];</span><br><span class=\"line\">$dst_file = $path . <span class=\"string\">'/'</span> . $name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $index;  <span class=\"comment\">// 切片文件存储的文件名 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($file[<span class=\"string\">\"error\"</span>] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">400</span>, <span class=\"string\">'msg'</span>=&gt;$file[<span class=\"string\">\"error\"</span>]]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $res = move_uploaded_file($file[<span class=\"string\">'tmp_name'</span>], $dst_file);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">        file_put_contents($dst_file . <span class=\"string\">'.info'</span>, $size);  <span class=\"comment\">// 切片上传成功，写一个保存其大小的文件，后续合并是校验文件用的到</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">200</span>, <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'shard ok'</span>]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> json_encode([<span class=\"string\">'code'</span>=&gt;<span class=\"number\">400</span>, <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'shard move_uploaded_file error'</span>]);<span class=\"keyword\">die</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php端合并</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeFile</span><span class=\"params\">($name, $total, &amp;$msg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 校验切片文件是否都上传完成，是否完整</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file_exists($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>) || !file_exists($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i)) &#123;</span><br><span class=\"line\">            $msg = <span class=\"string\">\"shard error $i\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (filesize($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i) != file_get_contents($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>)) &#123;</span><br><span class=\"line\">            $msg = <span class=\"string\">\"shard size error $i\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @unlink($name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($name . <span class=\"string\">'.lock'</span>)) &#123;   <span class=\"comment\">//加锁 防止有其他进程写文件，造成文件损坏</span></span><br><span class=\"line\">        $msg = <span class=\"string\">'on lock'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    touch($name . <span class=\"string\">'.lock'</span>);</span><br><span class=\"line\">    $file = fopen($name, <span class=\"string\">'a+'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;   <span class=\"comment\">//按切片顺序写入文件</span></span><br><span class=\"line\">        $shardFile = fopen($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i, <span class=\"string\">'r'</span>);</span><br><span class=\"line\">        $shardData = fread($shardFile, filesize($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i));</span><br><span class=\"line\">        fwrite($file, $shardData);</span><br><span class=\"line\">        fclose($shardFile);</span><br><span class=\"line\">        unlink($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i); </span><br><span class=\"line\">        unlink($name . <span class=\"string\">'-'</span> . $total . <span class=\"string\">':'</span> . $i . <span class=\"string\">'.info'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose($file);</span><br><span class=\"line\">    unlink($name . <span class=\"string\">'.lock'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也写好了一个demo，<a href=\"https://github.com/heropoo/just-code/tree/master/upload-large-file\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>下面是这个demo的效果图：</p>\n<p><img src=\"/assets/images/WX20190523-103939.png\" alt=\"pic-0\"><br><img src=\"/assets/images/WX20190523-104043.png\" alt=\"pic-1\"></p>\n<p>这个demo有些方面还不够完善，后续持续完善吧～</p>\n"},{"layout":"post","title":"在网页上使用MathJax渲染LaTex格式数学公式","date":"2019-05-27T07:12:58.000Z","author":"Heropoo","excerpt":"最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式","_content":"<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式，值得推荐下。\n\n## 使用方法：\n在你的html模版中引入这个js\n```\n<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n```\n\n写几个公式测试下：\n\n质能方程是$$E=mc^2$$\n\n代码：\n```\n$$E=mc^2$$\n```\n\nk-means算法的代价函数:\n$$J(c,\\mu )=\\sum_{i=1}^{k}\\left \\| x^{(i)}-\\mu _{c^{(i)}} \\right \\|^{2}$$\n\n代码：\n```\n$$J(c,\\mu )=\\sum_{i=1}^{k}\\left \\| x^{(i)}-\\mu _{c^{(i)}} \\right \\|^{2}$$\n```\n\n感受效果还可以😉😛😛\n\n再附送一个在线的公式编辑器[https://www.codecogs.com/latex/eqneditor.php](https://www.codecogs.com/latex/eqneditor.php)\n\n","source":"_posts/2019-05-27-math-jax.md","raw":"---\nlayout: post\ntitle:  \"在网页上使用MathJax渲染LaTex格式数学公式\"\ndate:   2019-05-27 15:12:58\nauthor: \"Heropoo\"\ncategories: \n    - 数学\n    - JavaScript \ntags:\n    - JavaScript\n    - 数学\n    - MathJax\n    - LaTex\nexcerpt: \"最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式\"\n---\n<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式，值得推荐下。\n\n## 使用方法：\n在你的html模版中引入这个js\n```\n<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n```\n\n写几个公式测试下：\n\n质能方程是$$E=mc^2$$\n\n代码：\n```\n$$E=mc^2$$\n```\n\nk-means算法的代价函数:\n$$J(c,\\mu )=\\sum_{i=1}^{k}\\left \\| x^{(i)}-\\mu _{c^{(i)}} \\right \\|^{2}$$\n\n代码：\n```\n$$J(c,\\mu )=\\sum_{i=1}^{k}\\left \\| x^{(i)}-\\mu _{c^{(i)}} \\right \\|^{2}$$\n```\n\n感受效果还可以😉😛😛\n\n再附送一个在线的公式编辑器[https://www.codecogs.com/latex/eqneditor.php](https://www.codecogs.com/latex/eqneditor.php)\n\n","slug":"2019-05-27-math-jax","published":1,"updated":"2019-11-01T02:27:37.842Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscw002qsm4wfmklhbkm","content":"<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n<p>最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式，值得推荐下。</p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><p>在你的html模版中引入这个js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写几个公式测试下：</p>\n<p>质能方程是$$E=mc^2$$</p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$E=mc^2$$</span><br></pre></td></tr></table></figure>\n\n<p>k-means算法的代价函数:<br>$$J(c,\\mu )=\\sum_{i=1}^{k}\\left | x^{(i)}-\\mu _{c^{(i)}} \\right |^{2}$$</p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$J(c,\\mu )=\\sum_&#123;i=1&#125;^&#123;k&#125;\\left \\| x^&#123;(i)&#125;-\\mu _&#123;c^&#123;(i)&#125;&#125; \\right \\|^&#123;2&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>感受效果还可以😉😛😛</p>\n<p>再附送一个在线的公式编辑器<a href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\" rel=\"noopener\">https://www.codecogs.com/latex/eqneditor.php</a></p>\n","site":{"data":{}},"more":"<script type=\"text/javascript\" src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n<p>最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式，值得推荐下。</p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><p>在你的html模版中引入这个js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写几个公式测试下：</p>\n<p>质能方程是$$E=mc^2$$</p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$E=mc^2$$</span><br></pre></td></tr></table></figure>\n\n<p>k-means算法的代价函数:<br>$$J(c,\\mu )=\\sum_{i=1}^{k}\\left | x^{(i)}-\\mu _{c^{(i)}} \\right |^{2}$$</p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$J(c,\\mu )=\\sum_&#123;i=1&#125;^&#123;k&#125;\\left \\| x^&#123;(i)&#125;-\\mu _&#123;c^&#123;(i)&#125;&#125; \\right \\|^&#123;2&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>感受效果还可以😉😛😛</p>\n<p>再附送一个在线的公式编辑器<a href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\" rel=\"noopener\">https://www.codecogs.com/latex/eqneditor.php</a></p>\n"},{"layout":"post","title":"Linux软连接和硬链接","date":"2019-05-29T03:15:08.000Z","author":"Heropoo","excerpt":"Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。","_content":"Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。\n\n### 1.Linux链接概念\n\nLinux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。\n\n* 【硬连接】\n\n硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。\n\n* 【软连接】\n\n另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。\n\n### 2.通过实验加深理解\n```bash\n[root@Linux]$ touch f1 #创建一个测试文件f1\n[root@Linux]$ ln f1 f2 #创建f1的一个硬连接文件f2\n[root@Linux]$ ln -s f1 f3 #创建f1的一个符号连接文件f3\n[root@Linux]$ ls -li # -i参数显示文件的inode节点信息\ntotal 0\n9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f1\n9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f2\n9797649 lrwxrwxrwx 1 root root 2 Apr 21 08:11 f3 -> f1\n```\n从上面的结果中可以看出，硬连接文件f2与原文件f1的inode节点相同，均为9797648，然而符号连接文件的inode节点不同。\n```bash\n[root@Linux]$ echo \"I am f1 file\" >>f1\n[root@Linux]$ cat f1\nI am f1 file\n[root@Linux]$ cat f2\nI am f1 file\n[root@Linux]$ cat f3\nI am f1 file\n[root@Linux]$ rm -f f1\n[root@Linux]$ cat f2\nI am f1 file\n[root@Linux]$ cat f3\ncat: f3: No such file or directory\n```\n通过上面的测试可以看出：当删除原始文件f1后，硬连接f2不受影响，但是符号连接f1文件无效。\n\n### 3.总结\n\n依此您可以做一些相关的测试，可以得到以下全部结论：\n\n* 1).删除符号连接f3,对f1,f2无影响；\n\n* 2).删除硬连接f2，对f1,f3也无影响；\n\n* 3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；\n\n* 4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除。\n\n本文摘自互联网，侵删。\n\n","source":"_posts/2019-05-29-linux-symbolic-link.md","raw":"---\nlayout: post\ntitle:  \"Linux软连接和硬链接\"\ndate:   2019-05-29 11:15:08\nauthor: \"Heropoo\"\ncategories: \n    - Linux \ntags:\n    - Linux\nexcerpt: \"Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。\"\n---\nLinux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。\n\n### 1.Linux链接概念\n\nLinux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。\n\n* 【硬连接】\n\n硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。\n\n* 【软连接】\n\n另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。\n\n### 2.通过实验加深理解\n```bash\n[root@Linux]$ touch f1 #创建一个测试文件f1\n[root@Linux]$ ln f1 f2 #创建f1的一个硬连接文件f2\n[root@Linux]$ ln -s f1 f3 #创建f1的一个符号连接文件f3\n[root@Linux]$ ls -li # -i参数显示文件的inode节点信息\ntotal 0\n9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f1\n9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f2\n9797649 lrwxrwxrwx 1 root root 2 Apr 21 08:11 f3 -> f1\n```\n从上面的结果中可以看出，硬连接文件f2与原文件f1的inode节点相同，均为9797648，然而符号连接文件的inode节点不同。\n```bash\n[root@Linux]$ echo \"I am f1 file\" >>f1\n[root@Linux]$ cat f1\nI am f1 file\n[root@Linux]$ cat f2\nI am f1 file\n[root@Linux]$ cat f3\nI am f1 file\n[root@Linux]$ rm -f f1\n[root@Linux]$ cat f2\nI am f1 file\n[root@Linux]$ cat f3\ncat: f3: No such file or directory\n```\n通过上面的测试可以看出：当删除原始文件f1后，硬连接f2不受影响，但是符号连接f1文件无效。\n\n### 3.总结\n\n依此您可以做一些相关的测试，可以得到以下全部结论：\n\n* 1).删除符号连接f3,对f1,f2无影响；\n\n* 2).删除硬连接f2，对f1,f3也无影响；\n\n* 3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；\n\n* 4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除。\n\n本文摘自互联网，侵删。\n\n","slug":"2019-05-29-linux-symbolic-link","published":1,"updated":"2019-11-01T02:16:34.417Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscy002usm4w7fxr77gj","content":"<p>Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。</p>\n<h3 id=\"1-Linux链接概念\"><a href=\"#1-Linux链接概念\" class=\"headerlink\" title=\"1.Linux链接概念\"></a>1.Linux链接概念</h3><p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。</p>\n<ul>\n<li>【硬连接】</li>\n</ul>\n<p>硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<ul>\n<li>【软连接】</li>\n</ul>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>\n<h3 id=\"2-通过实验加深理解\"><a href=\"#2-通过实验加深理解\" class=\"headerlink\" title=\"2.通过实验加深理解\"></a>2.通过实验加深理解</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Linux]$ touch f1 <span class=\"comment\">#创建一个测试文件f1</span></span><br><span class=\"line\">[root@Linux]$ ln f1 f2 <span class=\"comment\">#创建f1的一个硬连接文件f2</span></span><br><span class=\"line\">[root@Linux]$ ln -s f1 f3 <span class=\"comment\">#创建f1的一个符号连接文件f3</span></span><br><span class=\"line\">[root@Linux]$ ls -li <span class=\"comment\"># -i参数显示文件的inode节点信息</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f1</span><br><span class=\"line\">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f2</span><br><span class=\"line\">9797649 lrwxrwxrwx 1 root root 2 Apr 21 08:11 f3 -&gt; f1</span><br></pre></td></tr></table></figure>\n<p>从上面的结果中可以看出，硬连接文件f2与原文件f1的inode节点相同，均为9797648，然而符号连接文件的inode节点不同。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Linux]$ <span class=\"built_in\">echo</span> <span class=\"string\">\"I am f1 file\"</span> &gt;&gt;f1</span><br><span class=\"line\">[root@Linux]$ cat f1</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f2</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f3</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ rm -f f1</span><br><span class=\"line\">[root@Linux]$ cat f2</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f3</span><br><span class=\"line\">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>通过上面的测试可以看出：当删除原始文件f1后，硬连接f2不受影响，但是符号连接f1文件无效。</p>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>\n<ul>\n<li><p>1).删除符号连接f3,对f1,f2无影响；</p>\n</li>\n<li><p>2).删除硬连接f2，对f1,f3也无影响；</p>\n</li>\n<li><p>3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p>\n</li>\n<li><p>4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p>\n</li>\n</ul>\n<p>本文摘自互联网，侵删。</p>\n","site":{"data":{}},"more":"<p>Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。</p>\n<h3 id=\"1-Linux链接概念\"><a href=\"#1-Linux链接概念\" class=\"headerlink\" title=\"1.Linux链接概念\"></a>1.Linux链接概念</h3><p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。</p>\n<ul>\n<li>【硬连接】</li>\n</ul>\n<p>硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<ul>\n<li>【软连接】</li>\n</ul>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>\n<h3 id=\"2-通过实验加深理解\"><a href=\"#2-通过实验加深理解\" class=\"headerlink\" title=\"2.通过实验加深理解\"></a>2.通过实验加深理解</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Linux]$ touch f1 <span class=\"comment\">#创建一个测试文件f1</span></span><br><span class=\"line\">[root@Linux]$ ln f1 f2 <span class=\"comment\">#创建f1的一个硬连接文件f2</span></span><br><span class=\"line\">[root@Linux]$ ln -s f1 f3 <span class=\"comment\">#创建f1的一个符号连接文件f3</span></span><br><span class=\"line\">[root@Linux]$ ls -li <span class=\"comment\"># -i参数显示文件的inode节点信息</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f1</span><br><span class=\"line\">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f2</span><br><span class=\"line\">9797649 lrwxrwxrwx 1 root root 2 Apr 21 08:11 f3 -&gt; f1</span><br></pre></td></tr></table></figure>\n<p>从上面的结果中可以看出，硬连接文件f2与原文件f1的inode节点相同，均为9797648，然而符号连接文件的inode节点不同。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Linux]$ <span class=\"built_in\">echo</span> <span class=\"string\">\"I am f1 file\"</span> &gt;&gt;f1</span><br><span class=\"line\">[root@Linux]$ cat f1</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f2</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f3</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ rm -f f1</span><br><span class=\"line\">[root@Linux]$ cat f2</span><br><span class=\"line\">I am f1 file</span><br><span class=\"line\">[root@Linux]$ cat f3</span><br><span class=\"line\">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>通过上面的测试可以看出：当删除原始文件f1后，硬连接f2不受影响，但是符号连接f1文件无效。</p>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>\n<ul>\n<li><p>1).删除符号连接f3,对f1,f2无影响；</p>\n</li>\n<li><p>2).删除硬连接f2，对f1,f3也无影响；</p>\n</li>\n<li><p>3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p>\n</li>\n<li><p>4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p>\n</li>\n</ul>\n<p>本文摘自互联网，侵删。</p>\n"},{"layout":"post","title":"MySQL权限管理","date":"2019-06-10T04:47:00.000Z","author":"Heropoo","excerpt":"MySQL中的账号与权限管理","_content":"MySQL中的账号与权限管理\n\n### 权限系统的工作原理\nMySQL权限系统通过下面两个阶段进行认证：\n1. 对连接的用户进行身份认证，合法的用户通过认证、不合法的用户拒绝连接。\n2. 对通过认证的合法用户赋予相应的权限，用户可以在这些权限范围内对数据库做相应的操作。\n\n对于身份，MySQL是通过`IP地址`和`用户名`联合进行确认的，例如MySQL安装默认创建的用户`root@localhost`表示用户root只能从本地（localhost）进行连接才可以通过认证，此用户从其他任何主机对数据库进行的连接都将被拒绝。也就是说，同样的一个用户名，如果来自不同的IP地址，则MySQL将其视为不同的用户。\n\nMySQL的权限表在数据库启动地时候就载入内存，当用户通过身份认证后，就在内存中进行相应权限的存取，这样，此用户就可以在数据库中做权限范围内的各种操作了。\n\n### 权限表\n系统会用到名叫“mysql”数据库（安装MySQL时被创建）中user表作为权限表\n\n我们看看user表的结构（注：本文示例使用的是MySQL5.7.25版本）\n```\nmysql> desc user;\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n| Field                  | Type                              | Null | Key | Default               | Extra |\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n| Host                   | char(60)                          | NO   | PRI |                       |       |\n| User                   | char(32)                          | NO   | PRI |                       |       |\n| Select_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Insert_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Update_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Delete_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Drop_priv              | enum('N','Y')                     | NO   |     | N                     |       |\n| Reload_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Shutdown_priv          | enum('N','Y')                     | NO   |     | N                     |       |\n| Process_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| File_priv              | enum('N','Y')                     | NO   |     | N                     |       |\n| Grant_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| References_priv        | enum('N','Y')                     | NO   |     | N                     |       |\n| Index_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Alter_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Show_db_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Super_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_tmp_table_priv  | enum('N','Y')                     | NO   |     | N                     |       |\n| Lock_tables_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Execute_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Repl_slave_priv        | enum('N','Y')                     | NO   |     | N                     |       |\n| Repl_client_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_view_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Show_view_priv         | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_routine_priv    | enum('N','Y')                     | NO   |     | N                     |       |\n| Alter_routine_priv     | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_user_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Event_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Trigger_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_tablespace_priv | enum('N','Y')                     | NO   |     | N                     |       |\n| ssl_type               | enum('','ANY','X509','SPECIFIED') | NO   |     |                       |       |\n| ssl_cipher             | blob                              | NO   |     | NULL                  |       |\n| x509_issuer            | blob                              | NO   |     | NULL                  |       |\n| x509_subject           | blob                              | NO   |     | NULL                  |       |\n| max_questions          | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_updates            | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |\n| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |\n| authentication_string  | text                              | YES  |     | NULL                  |       |\n| password_expired       | enum('N','Y')                     | NO   |     | N                     |       |\n| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |\n| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |\n| account_locked         | enum('N','Y')                     | NO   |     | N                     |       |\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n45 rows in set (0.00 sec)\n```\n当用户进行连接的时候，权限表的存取过程有以下现个阶段。\n* 先从user表中的`Host`、`User`、`authentication_string`(密码)、`password_expired`和`password_lifetime`这几个字段中判断连接的IP、用户名和密码是否存在于表中，如果存在，则通过身份验证，否则拒绝连接。\n* 如果验证通过，再通过以`_priv`结尾的那些枚举字段（这些都是用户的权限开关（Y/N））得到用户拥有的权限。\n\n### 账号管理\n账号管理主要包括账号的创建、权限更改和账号的删除。用户连接数据库的第一步都从账号创建开始。\n\n有两种方法可以用来创建账号：使用`GRANT`语法创建或者直接操作授权表，但更推荐使用第一种方法，因为操作简单，出错几率更少。\n\n我们用几个例子来说明吧：\n\n1. 创建用户\n\n    创建用户tom，权限为可以在所有数据库上执行所有权限，只能从本地进行连接。\n    ```\n    mysql> GRANT ALL PRIVILEGES ON *.* TO tom@localhost IDENTIFIED BY 'tompassword' WITH GRANT OPTION;\n    ```\n    如果你执行这个语句碰到以下错误：`ERROR 1819 (HY000): Your password does not satisfy the current policy requirements`。这个是密码策略的问题，请设置比较复杂的密码，或者修改密码策略，这里就不详细说了。\n    \n    GRANT命令说明：\n    > `ALL PRIVILEGES`是表示所有权限，你也可以使用select、update等权限。\n    \n    > `ON`用来指定权限针对哪些库和表，格式是`数据库名.表名`，这里`*.*`表示所有数据库和所有表。\n    \n    > `TO` 表示将权限赋予某个用户。`tom@localhost`，表示`tom`用户，`@`后面接限制的主机，可以是`IP`、`IP段`、`域名`以及`%`，`%`表示任何地方。注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了。\n    \n    > `IDENTIFIED BY` 指定用户的登录密码， 这里`'tompassword'`就是用户tom的密码。\n    \n    > `WITH GRANT OPTION` 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n    \n    备注：可以使用`GRANT`重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。\n    \n    使用`GRANT`操作用户权限之后，再使用`FLUSH PRIVILEGES`命令来刷新权限使其立即生效\n    ```\n    mysql> FLUSH PRIVILEGES;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n2. 查看用户的权限\n\n    直接使用`SHOW GRANTS`默认查看`root@localhost`的权限\n    ```\n    mysql> SHOW GRANTS;\n    +---------------------------------------------------------------------+\n    | Grants for root@localhost                                           |\n    +---------------------------------------------------------------------+\n    | GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |\n    | GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION        |\n    +---------------------------------------------------------------------+\n    2 rows in set (0.01 sec)\n    ```\n    \n    查看某个用户的权限\n    ```\n    mysql> SHOW GRANTS FOR tom@localhost;\n    +----------------------------------------------------------------------+\n    | Grants for tom@localhost                                           |\n    +----------------------------------------------------------------------+\n    | GRANT ALL PRIVILEGES ON *.* TO 'tom'@'localhost' WITH GRANT OPTION |\n    +----------------------------------------------------------------------+\n    1 row in set (0.00 sec)\n    ```\n\n3. 收回权限\n    ```\n    mysql> REVOKE DELETE ON *.* FROM 'tom'@'localhost';\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n4. 对用户账户重命名\n    ```\n    mysql> RENAME USER tom@localhost to jerry@localhost;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n5. 删除用户\n    ```\n    mysql> DROP USER jerry@localhost;\n    Query OK, 0 rows affected (0.01 sec)\n    ```\n\n6. 修改和重置密码\n\n    * 用`SET PASSWORD`命令修改密码\n    ```\n    mysql> SET PASSWORD FOR root@localhost = PASSWORD('123456');\n    Query OK, 0 rows affected, 1 warning (0.01 sec)\n    ```\n\n    * 直接修改user表\n    ```\n    mysql> UPDATE user SET authentication_string=PASSWORD('123456root') WHERE user='root' and host='localhost';\n    Query OK, 1 row affected, 1 warning (0.00 sec)\n    Rows matched: 1  Changed: 1  Warnings: 1\n    \n    mysql> FLUSH PRIVILEGES;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n    * 在未登录mysql的情况下用mysqladmin命令修改密码\n    ```\n    $ mysqladmin -uroot -p123456root password 123321\n    ```\n\n    * 在丢失root密码的时候\n    关闭mysql服务（根据你自己的操作系统自行关闭），然后跳过权限认证启动mysql服务\n    ```\n    $ mysqld_safe --skip-grant-tables &   \n    ```\n \n    无密码登陆\n    ```\n    $ mysql -uroot\n    ```\n    进入之后使用上面直接修改user表的方法修改root用户的密码\n    \n    最后杀掉`mysqld_safe`和`mysqld`的进程\n    \n    重新启动mysql服务，用新的密码登陆吧。\n\n\n\n\n\n\n\n\n","source":"_posts/2019-06-10-mysql-user.md","raw":"---\nlayout: post\ntitle:  \"MySQL权限管理\"\ndate:   2019-06-10 12:47:00\nauthor: \"Heropoo\"\ncategories: \n    - MySQL \ntags:\n    - MySQL\nexcerpt: \"MySQL中的账号与权限管理\"\n---\nMySQL中的账号与权限管理\n\n### 权限系统的工作原理\nMySQL权限系统通过下面两个阶段进行认证：\n1. 对连接的用户进行身份认证，合法的用户通过认证、不合法的用户拒绝连接。\n2. 对通过认证的合法用户赋予相应的权限，用户可以在这些权限范围内对数据库做相应的操作。\n\n对于身份，MySQL是通过`IP地址`和`用户名`联合进行确认的，例如MySQL安装默认创建的用户`root@localhost`表示用户root只能从本地（localhost）进行连接才可以通过认证，此用户从其他任何主机对数据库进行的连接都将被拒绝。也就是说，同样的一个用户名，如果来自不同的IP地址，则MySQL将其视为不同的用户。\n\nMySQL的权限表在数据库启动地时候就载入内存，当用户通过身份认证后，就在内存中进行相应权限的存取，这样，此用户就可以在数据库中做权限范围内的各种操作了。\n\n### 权限表\n系统会用到名叫“mysql”数据库（安装MySQL时被创建）中user表作为权限表\n\n我们看看user表的结构（注：本文示例使用的是MySQL5.7.25版本）\n```\nmysql> desc user;\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n| Field                  | Type                              | Null | Key | Default               | Extra |\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n| Host                   | char(60)                          | NO   | PRI |                       |       |\n| User                   | char(32)                          | NO   | PRI |                       |       |\n| Select_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Insert_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Update_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Delete_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Drop_priv              | enum('N','Y')                     | NO   |     | N                     |       |\n| Reload_priv            | enum('N','Y')                     | NO   |     | N                     |       |\n| Shutdown_priv          | enum('N','Y')                     | NO   |     | N                     |       |\n| Process_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| File_priv              | enum('N','Y')                     | NO   |     | N                     |       |\n| Grant_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| References_priv        | enum('N','Y')                     | NO   |     | N                     |       |\n| Index_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Alter_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Show_db_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Super_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_tmp_table_priv  | enum('N','Y')                     | NO   |     | N                     |       |\n| Lock_tables_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Execute_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Repl_slave_priv        | enum('N','Y')                     | NO   |     | N                     |       |\n| Repl_client_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_view_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Show_view_priv         | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_routine_priv    | enum('N','Y')                     | NO   |     | N                     |       |\n| Alter_routine_priv     | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_user_priv       | enum('N','Y')                     | NO   |     | N                     |       |\n| Event_priv             | enum('N','Y')                     | NO   |     | N                     |       |\n| Trigger_priv           | enum('N','Y')                     | NO   |     | N                     |       |\n| Create_tablespace_priv | enum('N','Y')                     | NO   |     | N                     |       |\n| ssl_type               | enum('','ANY','X509','SPECIFIED') | NO   |     |                       |       |\n| ssl_cipher             | blob                              | NO   |     | NULL                  |       |\n| x509_issuer            | blob                              | NO   |     | NULL                  |       |\n| x509_subject           | blob                              | NO   |     | NULL                  |       |\n| max_questions          | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_updates            | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |\n| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |\n| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |\n| authentication_string  | text                              | YES  |     | NULL                  |       |\n| password_expired       | enum('N','Y')                     | NO   |     | N                     |       |\n| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |\n| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |\n| account_locked         | enum('N','Y')                     | NO   |     | N                     |       |\n+------------------------+-----------------------------------+------+-----+-----------------------+-------+\n45 rows in set (0.00 sec)\n```\n当用户进行连接的时候，权限表的存取过程有以下现个阶段。\n* 先从user表中的`Host`、`User`、`authentication_string`(密码)、`password_expired`和`password_lifetime`这几个字段中判断连接的IP、用户名和密码是否存在于表中，如果存在，则通过身份验证，否则拒绝连接。\n* 如果验证通过，再通过以`_priv`结尾的那些枚举字段（这些都是用户的权限开关（Y/N））得到用户拥有的权限。\n\n### 账号管理\n账号管理主要包括账号的创建、权限更改和账号的删除。用户连接数据库的第一步都从账号创建开始。\n\n有两种方法可以用来创建账号：使用`GRANT`语法创建或者直接操作授权表，但更推荐使用第一种方法，因为操作简单，出错几率更少。\n\n我们用几个例子来说明吧：\n\n1. 创建用户\n\n    创建用户tom，权限为可以在所有数据库上执行所有权限，只能从本地进行连接。\n    ```\n    mysql> GRANT ALL PRIVILEGES ON *.* TO tom@localhost IDENTIFIED BY 'tompassword' WITH GRANT OPTION;\n    ```\n    如果你执行这个语句碰到以下错误：`ERROR 1819 (HY000): Your password does not satisfy the current policy requirements`。这个是密码策略的问题，请设置比较复杂的密码，或者修改密码策略，这里就不详细说了。\n    \n    GRANT命令说明：\n    > `ALL PRIVILEGES`是表示所有权限，你也可以使用select、update等权限。\n    \n    > `ON`用来指定权限针对哪些库和表，格式是`数据库名.表名`，这里`*.*`表示所有数据库和所有表。\n    \n    > `TO` 表示将权限赋予某个用户。`tom@localhost`，表示`tom`用户，`@`后面接限制的主机，可以是`IP`、`IP段`、`域名`以及`%`，`%`表示任何地方。注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了。\n    \n    > `IDENTIFIED BY` 指定用户的登录密码， 这里`'tompassword'`就是用户tom的密码。\n    \n    > `WITH GRANT OPTION` 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n    \n    备注：可以使用`GRANT`重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。\n    \n    使用`GRANT`操作用户权限之后，再使用`FLUSH PRIVILEGES`命令来刷新权限使其立即生效\n    ```\n    mysql> FLUSH PRIVILEGES;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n2. 查看用户的权限\n\n    直接使用`SHOW GRANTS`默认查看`root@localhost`的权限\n    ```\n    mysql> SHOW GRANTS;\n    +---------------------------------------------------------------------+\n    | Grants for root@localhost                                           |\n    +---------------------------------------------------------------------+\n    | GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |\n    | GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION        |\n    +---------------------------------------------------------------------+\n    2 rows in set (0.01 sec)\n    ```\n    \n    查看某个用户的权限\n    ```\n    mysql> SHOW GRANTS FOR tom@localhost;\n    +----------------------------------------------------------------------+\n    | Grants for tom@localhost                                           |\n    +----------------------------------------------------------------------+\n    | GRANT ALL PRIVILEGES ON *.* TO 'tom'@'localhost' WITH GRANT OPTION |\n    +----------------------------------------------------------------------+\n    1 row in set (0.00 sec)\n    ```\n\n3. 收回权限\n    ```\n    mysql> REVOKE DELETE ON *.* FROM 'tom'@'localhost';\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n4. 对用户账户重命名\n    ```\n    mysql> RENAME USER tom@localhost to jerry@localhost;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n5. 删除用户\n    ```\n    mysql> DROP USER jerry@localhost;\n    Query OK, 0 rows affected (0.01 sec)\n    ```\n\n6. 修改和重置密码\n\n    * 用`SET PASSWORD`命令修改密码\n    ```\n    mysql> SET PASSWORD FOR root@localhost = PASSWORD('123456');\n    Query OK, 0 rows affected, 1 warning (0.01 sec)\n    ```\n\n    * 直接修改user表\n    ```\n    mysql> UPDATE user SET authentication_string=PASSWORD('123456root') WHERE user='root' and host='localhost';\n    Query OK, 1 row affected, 1 warning (0.00 sec)\n    Rows matched: 1  Changed: 1  Warnings: 1\n    \n    mysql> FLUSH PRIVILEGES;\n    Query OK, 0 rows affected (0.00 sec)\n    ```\n\n    * 在未登录mysql的情况下用mysqladmin命令修改密码\n    ```\n    $ mysqladmin -uroot -p123456root password 123321\n    ```\n\n    * 在丢失root密码的时候\n    关闭mysql服务（根据你自己的操作系统自行关闭），然后跳过权限认证启动mysql服务\n    ```\n    $ mysqld_safe --skip-grant-tables &   \n    ```\n \n    无密码登陆\n    ```\n    $ mysql -uroot\n    ```\n    进入之后使用上面直接修改user表的方法修改root用户的密码\n    \n    最后杀掉`mysqld_safe`和`mysqld`的进程\n    \n    重新启动mysql服务，用新的密码登陆吧。\n\n\n\n\n\n\n\n\n","slug":"2019-06-10-mysql-user","published":1,"updated":"2019-11-01T02:16:34.418Z","comments":1,"photos":[],"link":"","_id":"ck2k8bscz002ysm4w2ap23uk9","content":"<p>MySQL中的账号与权限管理</p>\n<h3 id=\"权限系统的工作原理\"><a href=\"#权限系统的工作原理\" class=\"headerlink\" title=\"权限系统的工作原理\"></a>权限系统的工作原理</h3><p>MySQL权限系统通过下面两个阶段进行认证：</p>\n<ol>\n<li>对连接的用户进行身份认证，合法的用户通过认证、不合法的用户拒绝连接。</li>\n<li>对通过认证的合法用户赋予相应的权限，用户可以在这些权限范围内对数据库做相应的操作。</li>\n</ol>\n<p>对于身份，MySQL是通过<code>IP地址</code>和<code>用户名</code>联合进行确认的，例如MySQL安装默认创建的用户<code>root@localhost</code>表示用户root只能从本地（localhost）进行连接才可以通过认证，此用户从其他任何主机对数据库进行的连接都将被拒绝。也就是说，同样的一个用户名，如果来自不同的IP地址，则MySQL将其视为不同的用户。</p>\n<p>MySQL的权限表在数据库启动地时候就载入内存，当用户通过身份认证后，就在内存中进行相应权限的存取，这样，此用户就可以在数据库中做权限范围内的各种操作了。</p>\n<h3 id=\"权限表\"><a href=\"#权限表\" class=\"headerlink\" title=\"权限表\"></a>权限表</h3><p>系统会用到名叫“mysql”数据库（安装MySQL时被创建）中user表作为权限表</p>\n<p>我们看看user表的结构（注：本文示例使用的是MySQL5.7.25版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc user;</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">| Field                  | Type                              | Null | Key | Default               | Extra |</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">| Host                   | char(60)                          | NO   | PRI |                       |       |</span><br><span class=\"line\">| User                   | char(32)                          | NO   | PRI |                       |       |</span><br><span class=\"line\">| Select_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Insert_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Update_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Delete_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Drop_priv              | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Reload_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Shutdown_priv          | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Process_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| File_priv              | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Grant_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| References_priv        | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Index_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Alter_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Show_db_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Super_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_tmp_table_priv  | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Lock_tables_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Execute_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Repl_slave_priv        | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Repl_client_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_view_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Show_view_priv         | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_routine_priv    | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Alter_routine_priv     | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_user_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Event_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Trigger_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_tablespace_priv | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| ssl_type               | enum(&apos;&apos;,&apos;ANY&apos;,&apos;X509&apos;,&apos;SPECIFIED&apos;) | NO   |     |                       |       |</span><br><span class=\"line\">| ssl_cipher             | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| x509_issuer            | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| x509_subject           | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| max_questions          | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_updates            | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |</span><br><span class=\"line\">| authentication_string  | text                              | YES  |     | NULL                  |       |</span><br><span class=\"line\">| password_expired       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |</span><br><span class=\"line\">| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |</span><br><span class=\"line\">| account_locked         | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">45 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>当用户进行连接的时候，权限表的存取过程有以下现个阶段。</p>\n<ul>\n<li>先从user表中的<code>Host</code>、<code>User</code>、<code>authentication_string</code>(密码)、<code>password_expired</code>和<code>password_lifetime</code>这几个字段中判断连接的IP、用户名和密码是否存在于表中，如果存在，则通过身份验证，否则拒绝连接。</li>\n<li>如果验证通过，再通过以<code>_priv</code>结尾的那些枚举字段（这些都是用户的权限开关（Y/N））得到用户拥有的权限。</li>\n</ul>\n<h3 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h3><p>账号管理主要包括账号的创建、权限更改和账号的删除。用户连接数据库的第一步都从账号创建开始。</p>\n<p>有两种方法可以用来创建账号：使用<code>GRANT</code>语法创建或者直接操作授权表，但更推荐使用第一种方法，因为操作简单，出错几率更少。</p>\n<p>我们用几个例子来说明吧：</p>\n<ol>\n<li><p>创建用户</p>\n<p> 创建用户tom，权限为可以在所有数据库上执行所有权限，只能从本地进行连接。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO tom@localhost IDENTIFIED BY &apos;tompassword&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<p> 如果你执行这个语句碰到以下错误：<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>。这个是密码策略的问题，请设置比较复杂的密码，或者修改密码策略，这里就不详细说了。</p>\n<p> GRANT命令说明：</p>\n<blockquote>\n<p><code>ALL PRIVILEGES</code>是表示所有权限，你也可以使用select、update等权限。</p>\n</blockquote>\n<blockquote>\n<p><code>ON</code>用来指定权限针对哪些库和表，格式是<code>数据库名.表名</code>，这里<code>*.*</code>表示所有数据库和所有表。</p>\n</blockquote>\n<blockquote>\n<p><code>TO</code> 表示将权限赋予某个用户。<code>tom@localhost</code>，表示<code>tom</code>用户，<code>@</code>后面接限制的主机，可以是<code>IP</code>、<code>IP段</code>、<code>域名</code>以及<code>%</code>，<code>%</code>表示任何地方。注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了。</p>\n</blockquote>\n<blockquote>\n<p><code>IDENTIFIED BY</code> 指定用户的登录密码， 这里<code>&#39;tompassword&#39;</code>就是用户tom的密码。</p>\n</blockquote>\n<blockquote>\n<p><code>WITH GRANT OPTION</code> 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。</p>\n</blockquote>\n<p> 备注：可以使用<code>GRANT</code>重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</p>\n<p> 使用<code>GRANT</code>操作用户权限之后，再使用<code>FLUSH PRIVILEGES</code>命令来刷新权限使其立即生效</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看用户的权限</p>\n<p> 直接使用<code>SHOW GRANTS</code>默认查看<code>root@localhost</code>的权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW GRANTS;</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for root@localhost                                           |</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION |</span><br><span class=\"line\">| GRANT PROXY ON &apos;&apos;@&apos;&apos; TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION        |</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p> 查看某个用户的权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW GRANTS FOR tom@localhost;</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for tom@localhost                                           |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO &apos;tom&apos;@&apos;localhost&apos; WITH GRANT OPTION |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>收回权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; REVOKE DELETE ON *.* FROM &apos;tom&apos;@&apos;localhost&apos;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对用户账户重命名</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; RENAME USER tom@localhost to jerry@localhost;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP USER jerry@localhost;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改和重置密码</p>\n<ul>\n<li><p>用<code>SET PASSWORD</code>命令修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET PASSWORD FOR root@localhost = PASSWORD(&apos;123456&apos;);</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接修改user表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE user SET authentication_string=PASSWORD(&apos;123456root&apos;) WHERE user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在未登录mysql的情况下用mysqladmin命令修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p123456root password 123321</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在丢失root密码的时候<br>关闭mysql服务（根据你自己的操作系统自行关闭），然后跳过权限认证启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>\n\n<p>无密码登陆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot</span><br></pre></td></tr></table></figure>\n<p>进入之后使用上面直接修改user表的方法修改root用户的密码</p>\n<p>最后杀掉<code>mysqld_safe</code>和<code>mysqld</code>的进程</p>\n<p>重新启动mysql服务，用新的密码登陆吧。</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"more":"<p>MySQL中的账号与权限管理</p>\n<h3 id=\"权限系统的工作原理\"><a href=\"#权限系统的工作原理\" class=\"headerlink\" title=\"权限系统的工作原理\"></a>权限系统的工作原理</h3><p>MySQL权限系统通过下面两个阶段进行认证：</p>\n<ol>\n<li>对连接的用户进行身份认证，合法的用户通过认证、不合法的用户拒绝连接。</li>\n<li>对通过认证的合法用户赋予相应的权限，用户可以在这些权限范围内对数据库做相应的操作。</li>\n</ol>\n<p>对于身份，MySQL是通过<code>IP地址</code>和<code>用户名</code>联合进行确认的，例如MySQL安装默认创建的用户<code>root@localhost</code>表示用户root只能从本地（localhost）进行连接才可以通过认证，此用户从其他任何主机对数据库进行的连接都将被拒绝。也就是说，同样的一个用户名，如果来自不同的IP地址，则MySQL将其视为不同的用户。</p>\n<p>MySQL的权限表在数据库启动地时候就载入内存，当用户通过身份认证后，就在内存中进行相应权限的存取，这样，此用户就可以在数据库中做权限范围内的各种操作了。</p>\n<h3 id=\"权限表\"><a href=\"#权限表\" class=\"headerlink\" title=\"权限表\"></a>权限表</h3><p>系统会用到名叫“mysql”数据库（安装MySQL时被创建）中user表作为权限表</p>\n<p>我们看看user表的结构（注：本文示例使用的是MySQL5.7.25版本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc user;</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">| Field                  | Type                              | Null | Key | Default               | Extra |</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">| Host                   | char(60)                          | NO   | PRI |                       |       |</span><br><span class=\"line\">| User                   | char(32)                          | NO   | PRI |                       |       |</span><br><span class=\"line\">| Select_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Insert_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Update_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Delete_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Drop_priv              | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Reload_priv            | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Shutdown_priv          | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Process_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| File_priv              | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Grant_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| References_priv        | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Index_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Alter_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Show_db_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Super_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_tmp_table_priv  | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Lock_tables_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Execute_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Repl_slave_priv        | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Repl_client_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_view_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Show_view_priv         | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_routine_priv    | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Alter_routine_priv     | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_user_priv       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Event_priv             | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Trigger_priv           | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| Create_tablespace_priv | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| ssl_type               | enum(&apos;&apos;,&apos;ANY&apos;,&apos;X509&apos;,&apos;SPECIFIED&apos;) | NO   |     |                       |       |</span><br><span class=\"line\">| ssl_cipher             | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| x509_issuer            | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| x509_subject           | blob                              | NO   |     | NULL                  |       |</span><br><span class=\"line\">| max_questions          | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_updates            | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class=\"line\">| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |</span><br><span class=\"line\">| authentication_string  | text                              | YES  |     | NULL                  |       |</span><br><span class=\"line\">| password_expired       | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |</span><br><span class=\"line\">| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |</span><br><span class=\"line\">| account_locked         | enum(&apos;N&apos;,&apos;Y&apos;)                     | NO   |     | N                     |       |</span><br><span class=\"line\">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class=\"line\">45 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>当用户进行连接的时候，权限表的存取过程有以下现个阶段。</p>\n<ul>\n<li>先从user表中的<code>Host</code>、<code>User</code>、<code>authentication_string</code>(密码)、<code>password_expired</code>和<code>password_lifetime</code>这几个字段中判断连接的IP、用户名和密码是否存在于表中，如果存在，则通过身份验证，否则拒绝连接。</li>\n<li>如果验证通过，再通过以<code>_priv</code>结尾的那些枚举字段（这些都是用户的权限开关（Y/N））得到用户拥有的权限。</li>\n</ul>\n<h3 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h3><p>账号管理主要包括账号的创建、权限更改和账号的删除。用户连接数据库的第一步都从账号创建开始。</p>\n<p>有两种方法可以用来创建账号：使用<code>GRANT</code>语法创建或者直接操作授权表，但更推荐使用第一种方法，因为操作简单，出错几率更少。</p>\n<p>我们用几个例子来说明吧：</p>\n<ol>\n<li><p>创建用户</p>\n<p> 创建用户tom，权限为可以在所有数据库上执行所有权限，只能从本地进行连接。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO tom@localhost IDENTIFIED BY &apos;tompassword&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<p> 如果你执行这个语句碰到以下错误：<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>。这个是密码策略的问题，请设置比较复杂的密码，或者修改密码策略，这里就不详细说了。</p>\n<p> GRANT命令说明：</p>\n<blockquote>\n<p><code>ALL PRIVILEGES</code>是表示所有权限，你也可以使用select、update等权限。</p>\n</blockquote>\n<blockquote>\n<p><code>ON</code>用来指定权限针对哪些库和表，格式是<code>数据库名.表名</code>，这里<code>*.*</code>表示所有数据库和所有表。</p>\n</blockquote>\n<blockquote>\n<p><code>TO</code> 表示将权限赋予某个用户。<code>tom@localhost</code>，表示<code>tom</code>用户，<code>@</code>后面接限制的主机，可以是<code>IP</code>、<code>IP段</code>、<code>域名</code>以及<code>%</code>，<code>%</code>表示任何地方。注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了。</p>\n</blockquote>\n<blockquote>\n<p><code>IDENTIFIED BY</code> 指定用户的登录密码， 这里<code>&#39;tompassword&#39;</code>就是用户tom的密码。</p>\n</blockquote>\n<blockquote>\n<p><code>WITH GRANT OPTION</code> 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。</p>\n</blockquote>\n<p> 备注：可以使用<code>GRANT</code>重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</p>\n<p> 使用<code>GRANT</code>操作用户权限之后，再使用<code>FLUSH PRIVILEGES</code>命令来刷新权限使其立即生效</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看用户的权限</p>\n<p> 直接使用<code>SHOW GRANTS</code>默认查看<code>root@localhost</code>的权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW GRANTS;</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for root@localhost                                           |</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION |</span><br><span class=\"line\">| GRANT PROXY ON &apos;&apos;@&apos;&apos; TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION        |</span><br><span class=\"line\">+---------------------------------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p> 查看某个用户的权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW GRANTS FOR tom@localhost;</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for tom@localhost                                           |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO &apos;tom&apos;@&apos;localhost&apos; WITH GRANT OPTION |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>收回权限</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; REVOKE DELETE ON *.* FROM &apos;tom&apos;@&apos;localhost&apos;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对用户账户重命名</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; RENAME USER tom@localhost to jerry@localhost;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP USER jerry@localhost;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改和重置密码</p>\n<ul>\n<li><p>用<code>SET PASSWORD</code>命令修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET PASSWORD FOR root@localhost = PASSWORD(&apos;123456&apos;);</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接修改user表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; UPDATE user SET authentication_string=PASSWORD(&apos;123456root&apos;) WHERE user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在未登录mysql的情况下用mysqladmin命令修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p123456root password 123321</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在丢失root密码的时候<br>关闭mysql服务（根据你自己的操作系统自行关闭），然后跳过权限认证启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>\n\n<p>无密码登陆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot</span><br></pre></td></tr></table></figure>\n<p>进入之后使用上面直接修改user表的方法修改root用户的密码</p>\n<p>最后杀掉<code>mysqld_safe</code>和<code>mysqld</code>的进程</p>\n<p>重新启动mysql服务，用新的密码登陆吧。</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"阳光明媚，时光静好","date":"2019-06-14T22:50:00.000Z","author":"Heropoo","excerpt":"阳光明媚，时光静好","_content":"\n起了个老早，去练车，本来睡不好，还有点情绪，在下车过桥时突然发现早上的阳光格外的好。\n\n![example-pic](/assets/images/20190619210216.jpg)\n\n![example-pic](/assets/images/20190619210339.jpg)\n\n![example-pic](/assets/images/20190619210745.jpg)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-06-15-good-morning.md","raw":"---\nlayout: post\ntitle:  \"阳光明媚，时光静好\"\ndate:   2019-06-15 06:50:00\nauthor: \"Heropoo\"\ncategories: \n    - 岁月静好 \ntags:\n    - 岁月静好\nexcerpt: \"阳光明媚，时光静好\"\n---\n\n起了个老早，去练车，本来睡不好，还有点情绪，在下车过桥时突然发现早上的阳光格外的好。\n\n![example-pic](/assets/images/20190619210216.jpg)\n\n![example-pic](/assets/images/20190619210339.jpg)\n\n![example-pic](/assets/images/20190619210745.jpg)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-06-15-good-morning","published":1,"updated":"2019-11-01T02:16:34.418Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsd00032sm4w1cfbahdy","content":"<p>起了个老早，去练车，本来睡不好，还有点情绪，在下车过桥时突然发现早上的阳光格外的好。</p>\n<p><img src=\"/assets/images/20190619210216.jpg\" alt=\"example-pic\"></p>\n<p><img src=\"/assets/images/20190619210339.jpg\" alt=\"example-pic\"></p>\n<p><img src=\"/assets/images/20190619210745.jpg\" alt=\"example-pic\"></p>\n","site":{"data":{}},"more":"<p>起了个老早，去练车，本来睡不好，还有点情绪，在下车过桥时突然发现早上的阳光格外的好。</p>\n<p><img src=\"/assets/images/20190619210216.jpg\" alt=\"example-pic\"></p>\n<p><img src=\"/assets/images/20190619210339.jpg\" alt=\"example-pic\"></p>\n<p><img src=\"/assets/images/20190619210745.jpg\" alt=\"example-pic\"></p>\n"},{"layout":"post","title":"SSH使用密码自动登录脚本","date":"2019-08-28T09:19:56.000Z","author":"Heropoo","excerpt":"SSH使用密码自动登录脚本","_content":"分享一个ssh使用密码登录的脚本\n\n写个脚本`autologin.sh`内容如下：\n```sh\n#!/usr/bin/expect -f\nset user [lindex $argv 0]\nset host [lindex $argv 1]\nset password [lindex $argv 2]\nset timeout -1\n\nspawn ssh $user@$host\nexpect \"password:*\"\nsend \"$password\\r\"\ninteract\nexpect eof\n```\n\n并给这个脚本可执行权限\n```sh\nchmod +x ./autologin.sh\n```\n\n* 使用方法：\n假如平时使用`ssh root@127.0.0.1`,然后输入密码`123456`登录\n\n现在用这个脚本就是\n```sh\n./autologin.sh root 127.0.0.1 123456\n```\n\n挺方便的吧～","source":"_posts/2019-08-28-ssh-autologin.md","raw":"---\nlayout: post\ntitle:  \"SSH使用密码自动登录脚本\"\ndate:   2019-08-28 17:19:56\nauthor: \"Heropoo\"\ncategories: \n    - Linux\ntags:\n    - Linux\nexcerpt: \"SSH使用密码自动登录脚本\"\n---\n分享一个ssh使用密码登录的脚本\n\n写个脚本`autologin.sh`内容如下：\n```sh\n#!/usr/bin/expect -f\nset user [lindex $argv 0]\nset host [lindex $argv 1]\nset password [lindex $argv 2]\nset timeout -1\n\nspawn ssh $user@$host\nexpect \"password:*\"\nsend \"$password\\r\"\ninteract\nexpect eof\n```\n\n并给这个脚本可执行权限\n```sh\nchmod +x ./autologin.sh\n```\n\n* 使用方法：\n假如平时使用`ssh root@127.0.0.1`,然后输入密码`123456`登录\n\n现在用这个脚本就是\n```sh\n./autologin.sh root 127.0.0.1 123456\n```\n\n挺方便的吧～","slug":"2019-08-28-ssh-autologin","published":1,"updated":"2019-11-01T02:16:34.419Z","comments":1,"photos":[],"link":"","_id":"ck2k8bsd10036sm4wenyc0p6y","content":"<p>分享一个ssh使用密码登录的脚本</p>\n<p>写个脚本<code>autologin.sh</code>内容如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/expect -f</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user [lindex <span class=\"variable\">$argv</span> 0]</span><br><span class=\"line\"><span class=\"built_in\">set</span> host [lindex <span class=\"variable\">$argv</span> 1]</span><br><span class=\"line\"><span class=\"built_in\">set</span> password [lindex <span class=\"variable\">$argv</span> 2]</span><br><span class=\"line\"><span class=\"built_in\">set</span> timeout -1</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh <span class=\"variable\">$user</span>@<span class=\"variable\">$host</span></span><br><span class=\"line\">expect <span class=\"string\">\"password:*\"</span></span><br><span class=\"line\">send <span class=\"string\">\"<span class=\"variable\">$password</span>\\r\"</span></span><br><span class=\"line\">interact</span><br><span class=\"line\">expect eof</span><br></pre></td></tr></table></figure>\n\n<p>并给这个脚本可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./autologin.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用方法：<br>假如平时使用<code>ssh root@127.0.0.1</code>,然后输入密码<code>123456</code>登录</li>\n</ul>\n<p>现在用这个脚本就是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autologin.sh root 127.0.0.1 123456</span><br></pre></td></tr></table></figure>\n\n<p>挺方便的吧～</p>\n","site":{"data":{}},"more":"<p>分享一个ssh使用密码登录的脚本</p>\n<p>写个脚本<code>autologin.sh</code>内容如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/expect -f</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user [lindex <span class=\"variable\">$argv</span> 0]</span><br><span class=\"line\"><span class=\"built_in\">set</span> host [lindex <span class=\"variable\">$argv</span> 1]</span><br><span class=\"line\"><span class=\"built_in\">set</span> password [lindex <span class=\"variable\">$argv</span> 2]</span><br><span class=\"line\"><span class=\"built_in\">set</span> timeout -1</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh <span class=\"variable\">$user</span>@<span class=\"variable\">$host</span></span><br><span class=\"line\">expect <span class=\"string\">\"password:*\"</span></span><br><span class=\"line\">send <span class=\"string\">\"<span class=\"variable\">$password</span>\\r\"</span></span><br><span class=\"line\">interact</span><br><span class=\"line\">expect eof</span><br></pre></td></tr></table></figure>\n\n<p>并给这个脚本可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./autologin.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用方法：<br>假如平时使用<code>ssh root@127.0.0.1</code>,然后输入密码<code>123456</code>登录</li>\n</ul>\n<p>现在用这个脚本就是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autologin.sh root 127.0.0.1 123456</span><br></pre></td></tr></table></figure>\n\n<p>挺方便的吧～</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2k8bsbm0000sm4wd8qwhcwl","category_id":"ck2k8bsbr0002sm4whz0keq3d","_id":"ck2k8bsbz000csm4w9f9v35dq"},{"post_id":"ck2k8bsbq0001sm4w8ivffv7o","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bsc2000ism4w9j4p7fzz"},{"post_id":"ck2k8bsbt0004sm4whpq7aq4n","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bsc5000nsm4w6rnf33dt"},{"post_id":"ck2k8bsbu0005sm4w1uaz4lcr","category_id":"ck2k8bsc2000hsm4w86d561o2","_id":"ck2k8bsc7000tsm4w9y9t41ea"},{"post_id":"ck2k8bsbv0006sm4whbta8bx2","category_id":"ck2k8bsc5000psm4w8mj45seg","_id":"ck2k8bsca0011sm4w0td3d6jn"},{"post_id":"ck2k8bsc6000ssm4w4tmydhun","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bscc0014sm4w92cv4d5l"},{"post_id":"ck2k8bsc8000wsm4w18bn3iku","category_id":"ck2k8bsc2000hsm4w86d561o2","_id":"ck2k8bscd0017sm4w6z0mcznn"},{"post_id":"ck2k8bsby000bsm4wdzvzhsk4","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bscf001esm4w1cl95tpq"},{"post_id":"ck2k8bsc0000fsm4w3g0afqfd","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsci001ksm4w8bghd6bg"},{"post_id":"ck2k8bscf001csm4waycdbu1y","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bscj001osm4w4jsx8fsf"},{"post_id":"ck2k8bsc1000gsm4w2doibozz","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsck001ssm4wdrgu4b65"},{"post_id":"ck2k8bsch001ism4wgzqcgfs6","category_id":"ck2k8bsbr0002sm4whz0keq3d","_id":"ck2k8bscl001vsm4w8vqm4suc"},{"post_id":"ck2k8bscj001qsm4wdzfc40se","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bscn001zsm4wdc317sy9"},{"post_id":"ck2k8bsc4000msm4whnbtcflt","category_id":"ck2k8bsck001rsm4w17teggko","_id":"ck2k8bsco0024sm4w7d5hhwzx"},{"post_id":"ck2k8bsco0026sm4w5vr866oq","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bscs002esm4w9l7vgmx0"},{"post_id":"ck2k8bsc9000ysm4wfj7xfm8y","category_id":"ck2k8bsco0023sm4w6cnrhs7w","_id":"ck2k8bsct002hsm4w3qngepg7"},{"post_id":"ck2k8bscp0029sm4w0tdp8pje","category_id":"ck2k8bsbw0007sm4warrg0btn","_id":"ck2k8bscu002ksm4w83zv3qub"},{"post_id":"ck2k8bscq002bsm4wcx3mc6eu","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bscv002nsm4w1gamdqd0"},{"post_id":"ck2k8bsbx000asm4w0smz4itp","category_id":"ck2k8bsc5000psm4w8mj45seg","_id":"ck2k8bscw002rsm4w3tmvefl7"},{"post_id":"ck2k8bsbx000asm4w0smz4itp","category_id":"ck2k8bscq002asm4wduz4esls","_id":"ck2k8bscy002vsm4w57luentf"},{"post_id":"ck2k8bsca0012sm4wezsz0vvk","category_id":"ck2k8bscs002fsm4w0rw12iqb","_id":"ck2k8bscz002zsm4w6g937kzs"},{"post_id":"ck2k8bscc0016sm4w795t8gyp","category_id":"ck2k8bscv002osm4w8f2yaonn","_id":"ck2k8bsd10033sm4wcusy5kkf"},{"post_id":"ck2k8bscy002usm4w7fxr77gj","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsd20037sm4wbl1bh3r8"},{"post_id":"ck2k8bscd0018sm4wfxap0hsi","category_id":"ck2k8bscy002wsm4wb9p6dpwa","_id":"ck2k8bsd3003bsm4w6rmq4mtw"},{"post_id":"ck2k8bsd00032sm4w1cfbahdy","category_id":"ck2k8bsc2000hsm4w86d561o2","_id":"ck2k8bsd4003esm4weqnmacct"},{"post_id":"ck2k8bsd10036sm4wenyc0p6y","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsd4003gsm4w0guh4n01"},{"post_id":"ck2k8bscg001gsm4wfhdqa2bj","category_id":"ck2k8bsd3003asm4wc8zk0hia","_id":"ck2k8bsd6003nsm4wd7id9ej1"},{"post_id":"ck2k8bsci001nsm4w58d3bjjx","category_id":"ck2k8bsck001rsm4w17teggko","_id":"ck2k8bsd6003rsm4w1f6i2dx1"},{"post_id":"ck2k8bsc3000ksm4wevmf02lj","category_id":"ck2k8bsc90010sm4wa5bsdm6f","_id":"ck2k8bsd7003wsm4waogdgzkj"},{"post_id":"ck2k8bsc3000ksm4wevmf02lj","category_id":"ck2k8bsd5003msm4w0te9czv7","_id":"ck2k8bsd7003zsm4w0eolf6l0"},{"post_id":"ck2k8bsck001usm4wbd5qbm9c","category_id":"ck2k8bsd6003ssm4w11g0hswm","_id":"ck2k8bsd80041sm4w3eceao74"},{"post_id":"ck2k8bscm001wsm4w2pn557sb","category_id":"ck2k8bsd7003xsm4w9qgdhku2","_id":"ck2k8bsda0044sm4wdm66fjzs"},{"post_id":"ck2k8bscn001ysm4w3v0xbxmb","category_id":"ck2k8bsd80042sm4w6346bg7u","_id":"ck2k8bsda0048sm4w6cnc46np"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","category_id":"ck2k8bsck001rsm4w17teggko","_id":"ck2k8bsdb004dsm4w00zj3b3p"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","category_id":"ck2k8bsda0045sm4w7jw6dk8m","_id":"ck2k8bsdc004gsm4w8roacd8k"},{"post_id":"ck2k8bsco0022sm4w0jp61b39","category_id":"ck2k8bsda0049sm4w0kfleoy1","_id":"ck2k8bsdc004hsm4wa5sh5k05"},{"post_id":"ck2k8bsct002gsm4w0jsqcqqc","category_id":"ck2k8bsdd004ism4w9jnf9z98","_id":"ck2k8bsde004qsm4w2kw30p5h"},{"post_id":"ck2k8bscu002jsm4w3b5dc0vq","category_id":"ck2k8bsdd004msm4w3f587j35","_id":"ck2k8bsdg004wsm4w9qz0e3e7"},{"post_id":"ck2k8bscv002msm4we07p0cj3","category_id":"ck2k8bsc5000psm4w8mj45seg","_id":"ck2k8bsdh0050sm4w9icz08ze"},{"post_id":"ck2k8bscv002msm4we07p0cj3","category_id":"ck2k8bsdf004ssm4wf9yagkpp","_id":"ck2k8bsdh0052sm4wew5z1t06"},{"post_id":"ck2k8bscz002ysm4w2ap23uk9","category_id":"ck2k8bsda0049sm4w0kfleoy1","_id":"ck2k8bsdi0058sm4whp3ldtj0"},{"post_id":"ck2k8bsce001bsm4w8xxhe4dh","category_id":"ck2k8bscv002osm4w8f2yaonn","_id":"ck2k8bsdj005esm4wgk3n00ga"},{"post_id":"ck2k8bsce001bsm4w8xxhe4dh","category_id":"ck2k8bsdi0054sm4wdgru3o48","_id":"ck2k8bsdj005hsm4whe886qdz"},{"post_id":"ck2k8bscr002dsm4wh6flfwof","category_id":"ck2k8bsdb004esm4w1p4o4x3p","_id":"ck2k8bsdk005jsm4w9i5d1zuq"},{"post_id":"ck2k8bscr002dsm4wh6flfwof","category_id":"ck2k8bsdi005asm4wfkzi6iwg","_id":"ck2k8bsdk005lsm4w8cin61ib"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","category_id":"ck2k8bsdg004xsm4w6czm9x1l","_id":"ck2k8bsdk005nsm4w0cqe7hw2"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","category_id":"ck2k8bsdj005fsm4w490la5r1","_id":"ck2k8bsdk005osm4wdvf3feq4"}],"PostTag":[{"post_id":"ck2k8bsbm0000sm4wd8qwhcwl","tag_id":"ck2k8bsbs0003sm4wb1jzgksc","_id":"ck2k8bsbx0009sm4wdbk80rnf"},{"post_id":"ck2k8bsbq0001sm4w8ivffv7o","tag_id":"ck2k8bsbw0008sm4w7fl01l8h","_id":"ck2k8bsc3000lsm4w9dci9jrw"},{"post_id":"ck2k8bsbq0001sm4w8ivffv7o","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsc5000osm4wfql094n3"},{"post_id":"ck2k8bsbt0004sm4whpq7aq4n","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsc9000xsm4wdzmm7qpa"},{"post_id":"ck2k8bsbt0004sm4whpq7aq4n","tag_id":"ck2k8bsc5000qsm4weybf51dk","_id":"ck2k8bsc9000zsm4whvx1ab07"},{"post_id":"ck2k8bsbu0005sm4w1uaz4lcr","tag_id":"ck2k8bsc7000vsm4w726v3rnp","_id":"ck2k8bscc0015sm4wg1i84ro3"},{"post_id":"ck2k8bsbv0006sm4whbta8bx2","tag_id":"ck2k8bsca0013sm4wba150tne","_id":"ck2k8bsch001hsm4whnykg15e"},{"post_id":"ck2k8bsbv0006sm4whbta8bx2","tag_id":"ck2k8bsce001asm4wg5g6gume","_id":"ck2k8bsci001lsm4wc4xjazau"},{"post_id":"ck2k8bsch001ism4wgzqcgfs6","tag_id":"ck2k8bsbs0003sm4wb1jzgksc","_id":"ck2k8bscj001psm4wck4ce22s"},{"post_id":"ck2k8bsbx000asm4w0smz4itp","tag_id":"ck2k8bsca0013sm4wba150tne","_id":"ck2k8bscn0021sm4wgc0we05x"},{"post_id":"ck2k8bsbx000asm4w0smz4itp","tag_id":"ck2k8bsci001msm4wdtiv4j2c","_id":"ck2k8bsco0025sm4w1w1hh0l9"},{"post_id":"ck2k8bsbx000asm4w0smz4itp","tag_id":"ck2k8bsck001tsm4wbr9sg1cj","_id":"ck2k8bscp0028sm4wc6o23bwb"},{"post_id":"ck2k8bsby000bsm4wdzvzhsk4","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bscv002lsm4wegwxfn2t"},{"post_id":"ck2k8bsby000bsm4wdzvzhsk4","tag_id":"ck2k8bscp0027sm4wc283g59o","_id":"ck2k8bscw002psm4w4ohsd1x5"},{"post_id":"ck2k8bsby000bsm4wdzvzhsk4","tag_id":"ck2k8bscr002csm4w7m1l6iol","_id":"ck2k8bscy002tsm4w6h0fa8yb"},{"post_id":"ck2k8bscv002msm4we07p0cj3","tag_id":"ck2k8bsca0013sm4wba150tne","_id":"ck2k8bscz002xsm4wgs3u5kxe"},{"post_id":"ck2k8bscv002msm4we07p0cj3","tag_id":"ck2k8bsci001msm4wdtiv4j2c","_id":"ck2k8bsd00031sm4whfrj1j4c"},{"post_id":"ck2k8bscv002msm4we07p0cj3","tag_id":"ck2k8bsck001tsm4wbr9sg1cj","_id":"ck2k8bsd10035sm4w6pareen1"},{"post_id":"ck2k8bscv002msm4we07p0cj3","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsd30039sm4w3v5n5opb"},{"post_id":"ck2k8bscy002usm4w7fxr77gj","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsd4003csm4w2yku87o8"},{"post_id":"ck2k8bsc0000fsm4w3g0afqfd","tag_id":"ck2k8bscu002ism4w287z3cj3","_id":"ck2k8bsd4003fsm4wf4tf6vr6"},{"post_id":"ck2k8bsc0000fsm4w3g0afqfd","tag_id":"ck2k8bscw002ssm4w92q8fcec","_id":"ck2k8bsd4003hsm4wdy22et9c"},{"post_id":"ck2k8bsd00032sm4w1cfbahdy","tag_id":"ck2k8bsc7000vsm4w726v3rnp","_id":"ck2k8bsd5003ksm4w1xtza94w"},{"post_id":"ck2k8bsd10036sm4wenyc0p6y","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsd5003lsm4wcpgk492p"},{"post_id":"ck2k8bsc1000gsm4w2doibozz","tag_id":"ck2k8bscu002ism4w287z3cj3","_id":"ck2k8bsd6003psm4wfhk87lmw"},{"post_id":"ck2k8bsc1000gsm4w2doibozz","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsd6003qsm4wgujyfeq5"},{"post_id":"ck2k8bsc1000gsm4w2doibozz","tag_id":"ck2k8bsd4003dsm4w51ic77yx","_id":"ck2k8bsd6003tsm4wcck0eb7m"},{"post_id":"ck2k8bsc3000ksm4wevmf02lj","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsd7003vsm4wduxo3q2u"},{"post_id":"ck2k8bsc3000ksm4wevmf02lj","tag_id":"ck2k8bsd6003osm4wa5j170y1","_id":"ck2k8bsd7003ysm4wcuxp3xok"},{"post_id":"ck2k8bsc4000msm4whnbtcflt","tag_id":"ck2k8bsd6003usm4w5ces48n6","_id":"ck2k8bsda0047sm4wd4nm8cvq"},{"post_id":"ck2k8bsc4000msm4whnbtcflt","tag_id":"ck2k8bsd70040sm4w37pg5un3","_id":"ck2k8bsdb004asm4w9agx82am"},{"post_id":"ck2k8bsc4000msm4whnbtcflt","tag_id":"ck2k8bsd90043sm4w0qi7h4lg","_id":"ck2k8bsdb004csm4wb8myg2zs"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","tag_id":"ck2k8bsd6003usm4w5ces48n6","_id":"ck2k8bsdd004ksm4wh96b3h5o"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","tag_id":"ck2k8bsd70040sm4w37pg5un3","_id":"ck2k8bsdd004lsm4wfouw9wn9"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","tag_id":"ck2k8bsd90043sm4w0qi7h4lg","_id":"ck2k8bsde004osm4wh9oh9mya"},{"post_id":"ck2k8bsc6000rsm4w88i9fjxx","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsde004psm4whz4ucq45"},{"post_id":"ck2k8bsc6000ssm4w4tmydhun","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdf004tsm4w9yf4ctwj"},{"post_id":"ck2k8bsc6000ssm4w4tmydhun","tag_id":"ck2k8bsdd004jsm4w418sds87","_id":"ck2k8bsdf004usm4w95vef5cv"},{"post_id":"ck2k8bsc8000wsm4w18bn3iku","tag_id":"ck2k8bsc7000vsm4w726v3rnp","_id":"ck2k8bsdg004ysm4wdxg847hw"},{"post_id":"ck2k8bsc9000ysm4wfj7xfm8y","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsdi0055sm4wgxdcccch"},{"post_id":"ck2k8bsc9000ysm4wfj7xfm8y","tag_id":"ck2k8bsca0013sm4wba150tne","_id":"ck2k8bsdi0056sm4w3k681ma4"},{"post_id":"ck2k8bsc9000ysm4wfj7xfm8y","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdi0059sm4wfu4f3kkv"},{"post_id":"ck2k8bsc9000ysm4wfj7xfm8y","tag_id":"ck2k8bsd90043sm4w0qi7h4lg","_id":"ck2k8bsdj005bsm4wd3hk1ujv"},{"post_id":"ck2k8bsca0012sm4wezsz0vvk","tag_id":"ck2k8bsdh0053sm4w0v7r5c8o","_id":"ck2k8bsdj005dsm4w0qv6gz85"},{"post_id":"ck2k8bscc0016sm4w795t8gyp","tag_id":"ck2k8bsd6003osm4wa5j170y1","_id":"ck2k8bsdj005gsm4w8rv13cov"},{"post_id":"ck2k8bscd0018sm4wfxap0hsi","tag_id":"ck2k8bsdj005csm4w7f0rezkg","_id":"ck2k8bsdk005ksm4we8uk27ou"},{"post_id":"ck2k8bsce001bsm4w8xxhe4dh","tag_id":"ck2k8bsd6003osm4wa5j170y1","_id":"ck2k8bsdl005qsm4wfi5g3ij1"},{"post_id":"ck2k8bsce001bsm4w8xxhe4dh","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdl005rsm4wdwl78491"},{"post_id":"ck2k8bsce001bsm4w8xxhe4dh","tag_id":"ck2k8bsdk005msm4w11y0ansm","_id":"ck2k8bsdl005tsm4w39mc8we9"},{"post_id":"ck2k8bscf001csm4waycdbu1y","tag_id":"ck2k8bsdl005psm4wgmcr6srj","_id":"ck2k8bsdl005usm4whuqf0rf8"},{"post_id":"ck2k8bscf001csm4waycdbu1y","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdm005wsm4w45qw36uf"},{"post_id":"ck2k8bscg001gsm4wfhdqa2bj","tag_id":"ck2k8bsdl005ssm4waf3e1gqo","_id":"ck2k8bsdm005ysm4wg5bx1nx1"},{"post_id":"ck2k8bscg001gsm4wfhdqa2bj","tag_id":"ck2k8bsdl005vsm4wfe796hwd","_id":"ck2k8bsdm005zsm4w2nx41o7e"},{"post_id":"ck2k8bsci001nsm4w58d3bjjx","tag_id":"ck2k8bsd6003usm4w5ces48n6","_id":"ck2k8bsdn0063sm4wdj7icu4j"},{"post_id":"ck2k8bsci001nsm4w58d3bjjx","tag_id":"ck2k8bsd70040sm4w37pg5un3","_id":"ck2k8bsdn0064sm4wchih2i0p"},{"post_id":"ck2k8bsci001nsm4w58d3bjjx","tag_id":"ck2k8bsd90043sm4w0qi7h4lg","_id":"ck2k8bsdo0066sm4wavlqfceq"},{"post_id":"ck2k8bscj001qsm4wdzfc40se","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdo0067sm4w793ee97w"},{"post_id":"ck2k8bscj001qsm4wdzfc40se","tag_id":"ck2k8bsdn0062sm4w87133zz5","_id":"ck2k8bsdo0069sm4wf1vz2ym1"},{"post_id":"ck2k8bsck001usm4wbd5qbm9c","tag_id":"ck2k8bsdn0065sm4w4gudf42o","_id":"ck2k8bsdp006bsm4w5kyg7a16"},{"post_id":"ck2k8bsck001usm4wbd5qbm9c","tag_id":"ck2k8bsdo0068sm4w5fv6ecbt","_id":"ck2k8bsdp006csm4w1veogs5g"},{"post_id":"ck2k8bscm001wsm4w2pn557sb","tag_id":"ck2k8bsdo006asm4w2iv2b575","_id":"ck2k8bsdp006fsm4w96lfgktk"},{"post_id":"ck2k8bscm001wsm4w2pn557sb","tag_id":"ck2k8bsdp006dsm4wey9r5l5g","_id":"ck2k8bsdp006gsm4we25pa8ls"},{"post_id":"ck2k8bscn001ysm4w3v0xbxmb","tag_id":"ck2k8bsdp006esm4w3jqpaod4","_id":"ck2k8bsdq006ism4w3g5q5drr"},{"post_id":"ck2k8bsco0022sm4w0jp61b39","tag_id":"ck2k8bsdp006hsm4wgkn2apys","_id":"ck2k8bsdq006lsm4wfngy64jz"},{"post_id":"ck2k8bsco0022sm4w0jp61b39","tag_id":"ck2k8bsdq006jsm4wgw0581od","_id":"ck2k8bsdq006msm4w55b7esxc"},{"post_id":"ck2k8bsco0026sm4w5vr866oq","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdr006osm4wf53w6z5x"},{"post_id":"ck2k8bsco0026sm4w5vr866oq","tag_id":"ck2k8bsdl005psm4wgmcr6srj","_id":"ck2k8bsdr006psm4w9txq8i91"},{"post_id":"ck2k8bscp0029sm4w0tdp8pje","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdr006rsm4w9imrd1os"},{"post_id":"ck2k8bscp0029sm4w0tdp8pje","tag_id":"ck2k8bsdq006nsm4w5gl2atgm","_id":"ck2k8bsdr006ssm4wf0z034oi"},{"post_id":"ck2k8bscq002bsm4wcx3mc6eu","tag_id":"ck2k8bscn0020sm4wd7ez2rra","_id":"ck2k8bsdr006usm4w3rxv99mu"},{"post_id":"ck2k8bscq002bsm4wcx3mc6eu","tag_id":"ck2k8bsdr006qsm4w448k8vt7","_id":"ck2k8bsds006vsm4w9oyx1wcq"},{"post_id":"ck2k8bscr002dsm4wh6flfwof","tag_id":"ck2k8bsdr006tsm4wazvybpjf","_id":"ck2k8bsds006ysm4w6qh94tun"},{"post_id":"ck2k8bscr002dsm4wh6flfwof","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsds006zsm4wepwsc0hk"},{"post_id":"ck2k8bscr002dsm4wh6flfwof","tag_id":"ck2k8bsds006wsm4wbeq9fcqw","_id":"ck2k8bsdt0071sm4w0z7f4c6h"},{"post_id":"ck2k8bsct002gsm4w0jsqcqqc","tag_id":"ck2k8bsds006xsm4w16zud2hu","_id":"ck2k8bsdt0074sm4w74izedr3"},{"post_id":"ck2k8bsct002gsm4w0jsqcqqc","tag_id":"ck2k8bsdt0070sm4w57nj639v","_id":"ck2k8bsdu0075sm4w7o2qgpsd"},{"post_id":"ck2k8bsct002gsm4w0jsqcqqc","tag_id":"ck2k8bsbz000esm4wbij96n4t","_id":"ck2k8bsdu0077sm4wbo4q79j9"},{"post_id":"ck2k8bsct002gsm4w0jsqcqqc","tag_id":"ck2k8bsd90043sm4w0qi7h4lg","_id":"ck2k8bsdu0078sm4w8ma6efen"},{"post_id":"ck2k8bscu002jsm4w3b5dc0vq","tag_id":"ck2k8bsdt0073sm4wb4hpefhj","_id":"ck2k8bsdu007asm4w771v0p9s"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","tag_id":"ck2k8bsca0013sm4wba150tne","_id":"ck2k8bsdv007dsm4wdfw19yup"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","tag_id":"ck2k8bsdu0076sm4w2klaconp","_id":"ck2k8bsdv007esm4w2k0uaex7"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","tag_id":"ck2k8bsdu0079sm4w3zkqbu5a","_id":"ck2k8bsdv007fsm4w07ul6t90"},{"post_id":"ck2k8bscw002qsm4wfmklhbkm","tag_id":"ck2k8bsdu007bsm4w3mk0876j","_id":"ck2k8bsdv007gsm4w4zlj0k3c"},{"post_id":"ck2k8bscz002ysm4w2ap23uk9","tag_id":"ck2k8bsdp006hsm4wgkn2apys","_id":"ck2k8bsdv007hsm4wfxyf9yyw"}],"Tag":[{"name":"听风雨","_id":"ck2k8bsbs0003sm4wb1jzgksc"},{"name":"API","_id":"ck2k8bsbw0008sm4w7fl01l8h"},{"name":"PHP","_id":"ck2k8bsbz000esm4wbij96n4t"},{"name":"HTTP","_id":"ck2k8bsc5000qsm4weybf51dk"},{"name":"岁月静好","_id":"ck2k8bsc7000vsm4w726v3rnp"},{"name":"JavaScript","_id":"ck2k8bsca0013sm4wba150tne"},{"name":"百度地图","_id":"ck2k8bsce001asm4wg5g6gume"},{"name":"HTML5","_id":"ck2k8bsci001msm4wdtiv4j2c"},{"name":"AJAX","_id":"ck2k8bsck001tsm4wbr9sg1cj"},{"name":"Linux","_id":"ck2k8bscn0020sm4wd7ez2rra"},{"name":"EFI","_id":"ck2k8bscp0027sm4wc283g59o"},{"name":"Archlinux","_id":"ck2k8bscr002csm4w7m1l6iol"},{"name":"Win10","_id":"ck2k8bscu002ism4w287z3cj3"},{"name":"Ubuntu","_id":"ck2k8bscw002ssm4w92q8fcec"},{"name":"MSYS2","_id":"ck2k8bsd4003dsm4w51ic77yx"},{"name":"Git","_id":"ck2k8bsd6003osm4wa5j170y1"},{"name":"虚拟化","_id":"ck2k8bsd6003usm4w5ces48n6"},{"name":"容器","_id":"ck2k8bsd70040sm4w37pg5un3"},{"name":"Docker","_id":"ck2k8bsd90043sm4w0qi7h4lg"},{"name":"UEditor","_id":"ck2k8bsdd004jsm4w418sds87"},{"name":"互联网","_id":"ck2k8bsdh0053sm4w0v7r5c8o"},{"name":"Rust","_id":"ck2k8bsdj005csm4w7f0rezkg"},{"name":"Webhook","_id":"ck2k8bsdk005msm4w11y0ansm"},{"name":"Composer","_id":"ck2k8bsdl005psm4wgmcr6srj"},{"name":"搜索引擎","_id":"ck2k8bsdl005ssm4waf3e1gqo"},{"name":"站内搜索","_id":"ck2k8bsdl005vsm4wfe796hwd"},{"name":"Yii2","_id":"ck2k8bsdn0062sm4w87133zz5"},{"name":"jupyter","_id":"ck2k8bsdn0065sm4w4gudf42o"},{"name":"python","_id":"ck2k8bsdo0068sm4w5fv6ecbt"},{"name":"github-issue","_id":"ck2k8bsdo006asm4w2iv2b575"},{"name":"gitment","_id":"ck2k8bsdp006dsm4wey9r5l5g"},{"name":"SSH","_id":"ck2k8bsdp006esm4w3jqpaod4"},{"name":"MySQL","_id":"ck2k8bsdp006hsm4wgkn2apys"},{"name":"JSON","_id":"ck2k8bsdq006jsm4wgw0581od"},{"name":"pcntl","_id":"ck2k8bsdq006nsm4w5gl2atgm"},{"name":"AlpineLinux","_id":"ck2k8bsdr006qsm4w448k8vt7"},{"name":"Queue","_id":"ck2k8bsdr006tsm4wazvybpjf"},{"name":"Redis","_id":"ck2k8bsds006wsm4wbeq9fcqw"},{"name":"全文搜索","_id":"ck2k8bsds006xsm4w16zud2hu"},{"name":"ElasticSearch","_id":"ck2k8bsdt0070sm4w57nj639v"},{"name":"nginx","_id":"ck2k8bsdt0073sm4wb4hpefhj"},{"name":"数学","_id":"ck2k8bsdu0076sm4w2klaconp"},{"name":"MathJax","_id":"ck2k8bsdu0079sm4w3zkqbu5a"},{"name":"LaTex","_id":"ck2k8bsdu007bsm4w3mk0876j"}]}}